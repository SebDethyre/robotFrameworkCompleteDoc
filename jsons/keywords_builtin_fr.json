[
    {
        "name": "Call Method",
        "args": [
            {
                "name": "object",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "object"
            },
            {
                "name": "method_name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "method_name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            },
            {
                "name": "kwargs",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_NAMED",
                "required": false,
                "repr": "**kwargs"
            }
        ],
        "returnType": null,
        "doc": "<p>Calls the named method of the given object with the provided arguments.</p>\n<p>The possible return value from the method is returned and can be assigned to a variable. Keyword fails both if the object does not have a method with the given name or if executing the method raises an exception.</p>\n<p>Possible equal signs in arguments must be escaped with a backslash like <code>\\=</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Call Method</td>\n<td>${hashtable}</td>\n<td>put</td>\n<td>myname</td>\n<td>myvalue</td>\n</tr>\n<tr>\n<td>${isempty} =</td>\n<td>Call Method</td>\n<td>${hashtable}</td>\n<td>isEmpty</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Be True</td>\n<td>${isempty}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${value} =</td>\n<td>Call Method</td>\n<td>${hashtable}</td>\n<td>get</td>\n<td>myname</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${value}</td>\n<td>myvalue</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Call Method</td>\n<td>${object}</td>\n<td>kwargs</td>\n<td>name=value</td>\n<td>foo=bar</td>\n</tr>\n<tr>\n<td>Call Method</td>\n<td>${object}</td>\n<td>positional</td>\n<td>escaped\\=equals</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Calls the named method of the given object with the provided arguments.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3516,
        "doc_fr": "Appelle la méthode nommée de l'objet donné avec les arguments fournis.\n\nLa valeur de retour possible de la méthode est renvoyée et peut être affectée à une\nvariable. Le mot-clé échoue si l'objet n'a pas de méthode avec le\nnom donné ou si l'exécution de la méthode génère une exception.\n\nLes signes égaux possibles dans les arguments doivent être échappés avec une barre oblique inverse comme `\\=`.\n\nExemples :\n\nAppeler la méthode | ${hashtable} | put | monnom | mavaleur \n---|---|---|---|--- \n${isempty} = | Appeler la méthode | ${hashtable} | isEmpty | \nNe doit pas être vrai | ${isempty} | | | \n${value} = | Appeler la méthode | ${hashtable} | get | monnom \nDoit être égal | ${value} | mavaleur | | \nAppeler la méthode | ${object} | kwargs | name=value | foo=bar \nAppeler la méthode | ${object} | positionnel | escaped\\=equals |"
    },
    {
        "name": "Catenate",
        "args": [
            {
                "name": "items",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*items"
            }
        ],
        "returnType": null,
        "doc": "<p>Catenates the given items together and returns the resulted string.</p>\n<p>By default, items are catenated with spaces, but if the first item contains the string <code>SEPARATOR=&lt;sep&gt;</code>, the separator <code>&lt;sep&gt;</code> is used instead. Items are converted into strings when necessary.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${str1} =</td>\n<td>Catenate</td>\n<td>Hello</td>\n<td>world</td>\n<td></td>\n</tr>\n<tr>\n<td>${str2} =</td>\n<td>Catenate</td>\n<td>SEPARATOR=---</td>\n<td>Hello</td>\n<td>world</td>\n</tr>\n<tr>\n<td>${str3} =</td>\n<td>Catenate</td>\n<td>SEPARATOR=</td>\n<td>Hello</td>\n<td>world</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${str1} = 'Hello world'\n${str2} = 'Hello---world'\n${str3} = 'Helloworld'\n</pre>",
        "shortdoc": "Catenates the given items together and returns the resulted string.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3010,
        "doc_fr": "Enchaîne les éléments donnés et renvoie la chaîne résultante.\n\nPar défaut, les éléments sont enchaînés avec des espaces, mais si le premier élément contient\nla chaîne `SEPARATOR=<sep>`, le séparateur `<sep>` est utilisé à la place. Les éléments sont\nconvertis en chaînes lorsque cela est nécessaire.\n\nExemples :\n\n${str1} = | Enchaîner | Bonjour | monde | \n---|---|---|---|--- \n${str2} = | Enchaîner | SEPARATOR=--- | Bonjour | monde \n${str3} = | Enchaîner | SEPARATOR= | Bonjour | monde \n\n=>\n\n${str1} = 'Bonjour le monde'\n${str2} = 'Bonjour---monde'\n${str3} = 'Bonjour le monde'"
    },
    {
        "name": "Comment",
        "args": [
            {
                "name": "messages",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*messages"
            }
        ],
        "returnType": null,
        "doc": "<p>Displays the given messages in the log file as keyword arguments.</p>\n<p>This keyword does nothing with the arguments it receives, but as they are visible in the log, this keyword can be used to display simple messages. Given arguments are ignored so thoroughly that they can even contain non-existing variables. If you are interested about variable values, you can use the <a href=\"#Log\" class=\"name\">Log</a> or <a href=\"#Log%20Many\" class=\"name\">Log Many</a> keywords.</p>",
        "shortdoc": "Displays the given messages in the log file as keyword arguments.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3180,
        "doc_fr": "Affiche les messages donnés dans le fichier journal sous forme d'arguments de mot-clé.\n\nCe mot-clé ne fait rien avec les arguments qu'il reçoit, mais comme ils sont\nvisibles dans le journal, ce mot-clé peut être utilisé pour afficher des messages simples. Les\narguments donnés sont si soigneusement ignorés qu'ils peuvent même contenir des\nvariables inexistantes. Si vous êtes intéressé par les valeurs des variables, vous pouvez utiliser les mots-clés Log ou\nLog Many."
    },
    {
        "name": "Continue For Loop",
        "args": [],
        "returnType": null,
        "doc": "<p>Skips the current FOR loop iteration and continues from the next.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>CONTINUE</code> statement that is recommended over this keyword. In the examples below, <code>Continue For Loop</code> can simply be replaced with <code>CONTINUE</code>. In addition to that, native <code>IF</code> syntax (new in RF 4.0) or inline <code>IF</code> syntax (new in RF 5.0) can be used instead of <code>Run Keyword If</code>. For example, the first example below could be written like this instead:</p>\n<pre>\nIF    '${var}' == 'CONTINUE'    CONTINUE\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>Skips the remaining keywords in the current FOR loop iteration and continues from the next one. Starting from Robot Framework 5.0, this keyword can only be used inside a loop, not in a keyword used in a loop.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Run Keyword If</td>\n<td>'${var}' == 'CONTINUE'</td>\n<td>Continue For Loop</td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Continue%20For%20Loop%20If\" class=\"name\">Continue For Loop If</a> to conditionally continue a FOR loop without using <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> or other wrapper keywords.</p>",
        "shortdoc": "Skips the current FOR loop iteration and continues from the next.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2613,
        "doc_fr": "Ignore l'itération de boucle FOR actuelle et continue à partir de la suivante.\n\n* * *\n\n**REMARQUE :** Robot Framework 5.0 a ajouté la prise en charge de l'instruction `CONTINUE` native\nqui est recommandée par rapport à ce mot-clé. Dans les exemples ci-dessous, `Continue For\nLoop` peut simplement être remplacé par `CONTINUE`. De plus, la syntaxe `IF`\nnative (nouvelle dans RF 4.0) ou la syntaxe `IF` en ligne (nouvelle dans RF 5.0) peut être utilisée\nà la place de `Run Keyword If`. Par exemple, le premier exemple ci-dessous pourrait être\nécrit comme ceci :\n\nIF '${var}' == 'CONTINUE' CONTINUE\n\nCe mot-clé sera éventuellement obsolète et supprimé.\n\n* * *\n\nIgnore les mots-clés restants dans l'itération de boucle FOR actuelle et continue à partir de la suivante. À partir de Robot Framework 5.0, ce mot-clé ne peut être\nutilisé qu'à l'intérieur d'une boucle, et non dans un mot-clé utilisé dans une boucle.\n\nExemple :\n\nFOR | ${var} | IN | @{VALUES} \n---|---|---|--- \n| Run Keyword If | '${var}' == 'CONTINUE' | Continue For Loop \n| Do Something | ${var} | \nEND | | | \n\nVoir Continue For Loop If pour continuer conditionnellement une boucle FOR sans utiliser\nRun Keyword If ou d'autres mots-clés wrapper."
    },
    {
        "name": "Continue For Loop If",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            }
        ],
        "returnType": null,
        "doc": "<p>Skips the current FOR loop iteration if the <code>condition</code> is true.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>CONTINUE</code> statement and for inline <code>IF</code>, and that combination should be used instead of this keyword. For example, <code>Continue For Loop If</code> usage in the example below could be replaced with</p>\n<pre>\nIF    '${var}' == 'CONTINUE'    CONTINUE\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>A wrapper for <a href=\"#Continue%20For%20Loop\" class=\"name\">Continue For Loop</a> to continue a FOR loop based on the given condition. The condition is evaluated using the same semantics as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Continue For Loop If</td>\n<td>'${var}' == 'CONTINUE'</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Skips the current FOR loop iteration if the ``condition`` is true.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2649,
        "doc_fr": "Ignore l'itération de boucle FOR actuelle si la « condition » est vraie.\n\n* * *\n\n**REMARQUE :** Robot Framework 5.0 a ajouté la prise en charge de l'instruction « CONTINUE » native\net de « IF » en ligne, et cette combinaison doit être utilisée à la place de ce\nmot-clé. Par exemple, l'utilisation de « Continue For Loop If » dans l'exemple ci-dessous\npeut être remplacée par\n\nIF '${var}' == 'CONTINUE' CONTINUE\n\nCe mot-clé sera éventuellement obsolète et supprimé.\n\n* * *\n\nUn wrapper pour Continue For Loop pour continuer une boucle FOR en fonction de la\ncondition donnée. La condition est évaluée à l'aide de la même sémantique qu'avec le mot-clé Should\nBe True.\n\nExemple :\n\nFOR | ${var} | IN | @{VALUES} \n---|---|---|--- \n| Continue For Loop If | '${var}' == 'CONTINUE' | \n| Do Something | ${var} | \nFIN | | |"
    },
    {
        "name": "Convert To Binary",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "base",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "base=None"
            },
            {
                "name": "prefix",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "prefix=None"
            },
            {
                "name": "length",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "length=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given item to a binary string.</p>\n<p>The <code>item</code>, with an optional <code>base</code>, is first converted to an integer using <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> internally. After that it is converted to a binary number (base 2) represented as a string such as <code>1011</code>.</p>\n<p>The returned value can contain an optional <code>prefix</code> and can be required to be of minimum <code>length</code> (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Binary</td>\n<td>10</td>\n<td></td>\n<td></td>\n<td># Result is 1010</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Binary</td>\n<td>F</td>\n<td>base=16</td>\n<td>prefix=0b</td>\n<td># Result is 0b1111</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Binary</td>\n<td>-2</td>\n<td>prefix=B</td>\n<td>length=4</td>\n<td># Result is -B0010</td>\n</tr>\n</table>\n<p>See also <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a>, <a href=\"#Convert%20To%20Octal\" class=\"name\">Convert To Octal</a> and <a href=\"#Convert%20To%20Hex\" class=\"name\">Convert To Hex</a>.</p>",
        "shortdoc": "Converts the given item to a binary string.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 173,
        "doc_fr": "Convertit l'élément donné en chaîne binaire.\n\nL'élément, avec une base facultative, est d'abord converti en entier à l'aide de\nConvert To Integer en interne. Ensuite, il est converti en nombre binaire\n(base 2) représenté sous forme de chaîne telle que `1011`.\n\nLa valeur renvoyée peut contenir un `prefix` facultatif et peut être requise pour\navoir une longueur minimale (à l'exclusion du préfixe et d'un éventuel signe moins). Si la\nvaleur est initialement plus courte que la longueur requise, elle est complétée par des zéros.\n\nExemples :\n\n${result} = | Convert To Binary | 10 | | | # Le résultat est 1010 \n---|---|---|---|---|--- \n${result} = | Convert To Binary | F | base=16 | prefix=0b | # Le résultat est 0b1111 \n${result} = | Convert To Binary | -2 | préfixe=B | longueur=4 | # Le résultat est -B0010 \n\nVoir également Convertir en entier, Convertir en octal et Convertir en hexadécimal."
    },
    {
        "name": "Convert To Boolean",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given item to Boolean true or false.</p>\n<p>Handles strings <code>True</code> and <code>False</code> (case-insensitive) as expected, otherwise returns item's <a href=\"http://docs.python.org/library/stdtypes.html#truth\">truth value</a> using Python's <code>bool()</code> method.</p>",
        "shortdoc": "Converts the given item to Boolean true or false.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 320,
        "doc_fr": "Convertit l'élément donné en valeur booléenne true ou false.\n\nGère les chaînes `True` et `False` (insensible à la casse) comme prévu, sinon\nrenvoie la [valeur\nvérité](http://docs.python.org/library/stdtypes.html#truth) de l'élément à l'aide de la\nméthode `bool()` de Python."
    },
    {
        "name": "Convert To Bytes",
        "args": [
            {
                "name": "input",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "input"
            },
            {
                "name": "input_type",
                "type": null,
                "defaultValue": "text",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "input_type=text"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given <code>input</code> to bytes according to the <code>input_type</code>.</p>\n<p>Valid input types are listed below:</p>\n<ul>\n<li><code>text:</code> Converts text to bytes character by character. All characters with ordinal below 256 can be used and are converted to bytes with same values. Many characters are easiest to represent using escapes like <code>\\x00</code> or <code>\\xff</code>. Supports both Unicode strings and bytes.</li>\n</ul>\n<ul>\n<li><code>int:</code> Converts integers separated by spaces to bytes. Similarly as with <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a>, it is possible to use binary, octal, or hex values by prefixing the values with <code>0b</code>, <code>0o</code>, or <code>0x</code>, respectively.</li>\n</ul>\n<ul>\n<li><code>hex:</code> Converts hexadecimal values to bytes. Single byte is always two characters long (e.g. <code>01</code> or <code>FF</code>). Spaces are ignored and can be used freely as a visual separator.</li>\n</ul>\n<ul>\n<li><code>bin:</code> Converts binary values to bytes. Single byte is always eight characters long (e.g. <code>00001010</code>). Spaces are ignored and can be used freely as a visual separator.</li>\n</ul>\n<p>In addition to giving the input as a string, it is possible to use lists or other iterables containing individual characters or numbers. In that case numbers do not need to be padded to certain length and they cannot contain extra spaces.</p>\n<p>Examples (last column shows returned bytes):</p>\n<table border=\"1\">\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>hyvä</td>\n<td></td>\n<td># hyv\\xe4</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>hyv\\xe4</td>\n<td></td>\n<td># hyv\\xe4</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>\\xff\\x07</td>\n<td></td>\n<td># \\xff\\x07</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>82 70</td>\n<td>int</td>\n<td># RF</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>0b10 0x10</td>\n<td>int</td>\n<td># \\x02\\x10</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>ff 00 07</td>\n<td>hex</td>\n<td># \\xff\\x00\\x07</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>52462121</td>\n<td>hex</td>\n<td># RF!!</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>0000 1000</td>\n<td>bin</td>\n<td># \\x08</td>\n</tr>\n<tr>\n<td>${input} =</td>\n<td>Create List</td>\n<td>1</td>\n<td>2</td>\n<td>12</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>${input}</td>\n<td>int</td>\n<td># \\x01\\x02\\x0c</td>\n</tr>\n<tr>\n<td>${bytes} =</td>\n<td>Convert To Bytes</td>\n<td>${input}</td>\n<td>hex</td>\n<td># \\x01\\x02\\x12</td>\n</tr>\n</table>\n<p>Use <span class=\"name\">Encode String To Bytes</span> in <code>String</code> library if you need to convert text to bytes using a certain encoding.</p>",
        "shortdoc": "Converts the given ``input`` to bytes according to the ``input_type``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 336,
        "doc_fr": "Convertit l'entrée donnée en octets selon le paramètre `input_type`.\n\nLes types d'entrée valides sont répertoriés ci-dessous :\n\n* `text:` Convertit le texte en octets caractère par caractère. Tous les caractères dont l'ordinal est inférieur à 256 peuvent être utilisés et sont convertis en octets avec les mêmes valeurs. De nombreux caractères sont plus faciles à représenter à l'aide d'échappements tels que `\\x00` ou `\\xff`. Prend en charge les chaînes Unicode et les octets.\n\n* `int:` Convertit les entiers séparés par des espaces en octets. De la même manière qu'avec Convert To Integer, il est possible d'utiliser des valeurs binaires, octales ou hexadécimales en préfixant les valeurs par `0b`, `0o` ou `0x`, respectivement.\n\n* `hex:` Convertit les valeurs hexadécimales en octets. Un octet unique est toujours long de deux caractères (par exemple `01` ou `FF`). Les espaces sont ignorés et peuvent être utilisés librement comme séparateur visuel.\n\n* `bin:` Convertit les valeurs binaires en octets. Un octet simple est toujours long de huit caractères (par exemple `00001010`). Les espaces sont ignorés et peuvent être utilisés librement comme séparateur visuel.\n\nEn plus de donner l'entrée sous forme de chaîne, il est possible d'utiliser des listes ou\nd'autres itérables contenant des caractères individuels ou des nombres. Dans ce cas, les nombres\nn'ont pas besoin d'être complétés à une certaine longueur et ils ne peuvent pas contenir\nd'espaces supplémentaires.\n\nExemples (la dernière colonne montre les octets renvoyés) :\n\n${bytes} = | Convert To Bytes | hyvä | | # hyv\\xe4 \n---|---|---|---|--- \n${bytes} = | Convert To Bytes | hyv\\xe4 | | # hyv\\xe4 \n${bytes} = | Convert To Bytes | \\xff\\x07 | | # \\xff\\x07 \n${bytes} = | Convert To Bytes | 82 70 | int | # RF \n${bytes} = | Convertir en octets | 0b10 0x10 | int | # \\x02\\x10 \n${bytes} = | Convertir en octets | ff 00 07 | hex | # \\xff\\x00\\x07 \n${bytes} = | Convertir en octets | 52462121 | hex | # RF!! \n${bytes} = | Convertir en octets | 0000 1000 | bin | # \\x08 \n${input} = | Créer une liste | 1 | 2 | 12 \n${bytes} = | Convertir en octets | ${input} | int | # \\x01\\x02\\x0c \n${bytes} = | Convertir en octets | ${input} | hex | # \\x01\\x02\\x12 \n\nUtilisez Encode String To Bytes dans la bibliothèque `String` si vous devez convertir du texte en\noctets à l'aide d'un certain codage."
    },
    {
        "name": "Convert To Hex",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "base",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "base=None"
            },
            {
                "name": "prefix",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "prefix=None"
            },
            {
                "name": "length",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "length=None"
            },
            {
                "name": "lowercase",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "lowercase=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given item to a hexadecimal string.</p>\n<p>The <code>item</code>, with an optional <code>base</code>, is first converted to an integer using <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> internally. After that it is converted to a hexadecimal number (base 16) represented as a string such as <code>FF0A</code>.</p>\n<p>The returned value can contain an optional <code>prefix</code> and can be required to be of minimum <code>length</code> (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.</p>\n<p>By default the value is returned as an upper case string, but the <code>lowercase</code> argument a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) turns the value (but not the given prefix) to lower case.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Hex</td>\n<td>255</td>\n<td></td>\n<td></td>\n<td># Result is FF</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Hex</td>\n<td>-10</td>\n<td>prefix=0x</td>\n<td>length=2</td>\n<td># Result is -0x0A</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Hex</td>\n<td>255</td>\n<td>prefix=X</td>\n<td>lowercase=yes</td>\n<td># Result is Xff</td>\n</tr>\n</table>\n<p>See also <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a>, <a href=\"#Convert%20To%20Binary\" class=\"name\">Convert To Binary</a> and <a href=\"#Convert%20To%20Octal\" class=\"name\">Convert To Octal</a>.</p>",
        "shortdoc": "Converts the given item to a hexadecimal string.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 217,
        "doc_fr": "Convertit l'élément donné en chaîne hexadécimale.\n\nL'élément, avec une base facultative, est d'abord converti en entier à l'aide de\nConvert To Integer en interne. Ensuite, il est converti en un nombre hexadécimal\n(base 16) représenté sous forme de chaîne telle que `FF0A`.\n\nLa valeur renvoyée peut contenir un `prefix` facultatif et peut être requise\nd'une `length` minimale (à l'exclusion du préfixe et d'un éventuel signe moins). Si la\nvaleur est initialement plus courte que la longueur requise, elle est complétée par des zéros.\n\nPar défaut, la valeur est renvoyée sous forme de chaîne majuscule, mais l'argument `lowercase`\nune valeur vraie (voir les arguments booléens) transforme la valeur (mais pas le\npréfixe donné) en minuscule.\n\nExemples :\n\n${result} = | Convert To Hex | 255 | | | # Le résultat est FF \n---|---|---|---|---|--- \n${result} = | Convertir en hexadécimal | -10 | préfixe=0x | longueur=2 | # Le résultat est -0x0A \n${result} = | Convertir en hexadécimal | 255 | préfixe=X | minuscule=oui | # Le résultat est Xff \n\nVoir aussi Convertir en entier, Convertir en binaire et Convertir en octal."
    },
    {
        "name": "Convert To Integer",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "base",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "base=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given item to an integer number.</p>\n<p>If the given item is a string, it is by default expected to be an integer in base 10. There are two ways to convert from other bases:</p>\n<ul>\n<li>Give base explicitly to the keyword as <code>base</code> argument.</li>\n</ul>\n<ul>\n<li>Prefix the given string with the base so that <code>0b</code> means binary (base 2), <code>0o</code> means octal (base 8), and <code>0x</code> means hex (base 16). The prefix is considered only when <code>base</code> argument is not given and may itself be prefixed with a plus or minus sign.</li>\n</ul>\n<p>The syntax is case-insensitive and possible spaces are ignored.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>100</td>\n<td></td>\n<td># Result is 100</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>FF AA</td>\n<td>16</td>\n<td># Result is 65450</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>100</td>\n<td>8</td>\n<td># Result is 64</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>-100</td>\n<td>2</td>\n<td># Result is -4</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>0b100</td>\n<td></td>\n<td># Result is 4</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Integer</td>\n<td>-0x100</td>\n<td></td>\n<td># Result is -256</td>\n</tr>\n</table>\n<p>See also <a href=\"#Convert%20To%20Number\" class=\"name\">Convert To Number</a>, <a href=\"#Convert%20To%20Binary\" class=\"name\">Convert To Binary</a>, <a href=\"#Convert%20To%20Octal\" class=\"name\">Convert To Octal</a>, <a href=\"#Convert%20To%20Hex\" class=\"name\">Convert To Hex</a>, and <a href=\"#Convert%20To%20Bytes\" class=\"name\">Convert To Bytes</a>.</p>",
        "shortdoc": "Converts the given item to an integer number.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 120,
        "doc_fr": "Convertit l'élément donné en un nombre entier.\n\nSi l'élément donné est une chaîne, il est par défaut attendu qu'il soit un entier en\nbase 10. Il existe deux façons de convertir à partir d'autres bases :\n\n* Donner explicitement la base au mot-clé comme argument `base`.\n\n* Préfixer la chaîne donnée avec la base de sorte que `0b` signifie binaire (base 2), `0o` signifie octal (base 8) et `0x` signifie hexadécimal (base 16). Le préfixe n'est pris en compte que lorsque l'argument `base` n'est pas donné et peut lui-même être préfixé par un signe plus ou moins.\n\nLa syntaxe ne respecte pas la casse et les éventuels espaces sont ignorés.\n\nExemples :\n\n${result} = | Convertir en entier | 100 | | # Le résultat est 100 \n---|---|---|---|--- \n${result} = | Convertir en entier | FF AA | 16 | # Le résultat est 65450 \n${result} = | Convertir en entier | 100 | 8 | # Le résultat est 64 \n${result} = | Convertir en entier | -100 | 2 | # Le résultat est -4 \n${result} = | Convertir en entier | 0b100 | | # Le résultat est 4 \n${result} = | Convertir en entier | -0x100 | | # Le résultat est -256 \n\nVoir aussi Convertir en nombre, Convertir en binaire, Convertir en octal, Convertir en\nhexadécimal et Convertir en octets."
    },
    {
        "name": "Convert To Number",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "precision",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "precision=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given item to a floating point number.</p>\n<p>If the optional <code>precision</code> is positive or zero, the returned number is rounded to that number of decimal digits. Negative precision means that the number is rounded to the closest multiple of 10 to the power of the absolute precision. If a number is equally close to a certain precision, it is always rounded away from zero.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Number</td>\n<td>42.512</td>\n<td></td>\n<td># Result is 42.512</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Number</td>\n<td>42.512</td>\n<td>1</td>\n<td># Result is 42.5</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Number</td>\n<td>42.512</td>\n<td>0</td>\n<td># Result is 43.0</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Number</td>\n<td>42.512</td>\n<td>-1</td>\n<td># Result is 40.0</td>\n</tr>\n</table>\n<p>Notice that machines generally cannot store floating point numbers accurately. This may cause surprises with these numbers in general and also when they are rounded. For more information see, for example, these resources:</p>\n<ul>\n<li><a href=\"http://docs.python.org/tutorial/floatingpoint.html\">http://docs.python.org/tutorial/floatingpoint.html</a></li>\n<li><a href=\"http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition\">http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition</a></li>\n</ul>\n<p>If you want to avoid possible problems with floating point numbers, you can implement custom keywords using Python's <a href=\"http://docs.python.org/library/decimal.html\">decimal</a> or <a href=\"http://docs.python.org/library/fractions.html\">fractions</a> modules.</p>\n<p>If you need an integer number, use <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> instead.</p>",
        "shortdoc": "Converts the given item to a floating point number.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 256,
        "doc_fr": "Convertit l'élément donné en un nombre à virgule flottante.\n\nSi la précision facultative est positive ou nulle, le nombre renvoyé est\narrondi à ce nombre de chiffres décimaux. Une précision négative signifie que le\nnombre est arrondi au multiple le plus proche de 10 à la puissance de la\nprécision absolue. Si un nombre est également proche d'une certaine précision, il est\ntoujours arrondi à partir de zéro.\n\nExemples :\n\n${result} = | Convertir en nombre | 42,512 | | # Le résultat est 42,512 \n---|---|---|---|--- \n${result} = | Convertir en nombre | 42,512 | 1 | # Le résultat est 42,5 \n${result} = | Convertir en nombre | 42,512 | 0 | # Le résultat est 43,0 \n${result} = | Convertir en nombre | 42,512 | -1 | # Le résultat est 40,0 \n\nNotez que les machines ne peuvent généralement pas stocker les nombres à virgule flottante avec précision.\nCela peut entraîner des surprises avec ces nombres en général et également lorsqu'ils sont\narrondis. Pour plus d'informations, consultez, par exemple, ces ressources :\n\n* <http://docs.python.org/tutorial/floatingpoint.html>\n* <http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition>\n\nSi vous souhaitez éviter d'éventuels problèmes avec les nombres à virgule flottante, vous\npouvez implémenter des mots-clés personnalisés à l'aide des modules\n[decimal](http://docs.python.org/library/decimal.html) ou\n[fractions](http://docs.python.org/library/fractions.html) de Python.\n\nSi vous avez besoin d'un nombre entier, utilisez plutôt Convert To Integer."
    },
    {
        "name": "Convert To Octal",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "base",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "base=None"
            },
            {
                "name": "prefix",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "prefix=None"
            },
            {
                "name": "length",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "length=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given item to an octal string.</p>\n<p>The <code>item</code>, with an optional <code>base</code>, is first converted to an integer using <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> internally. After that it is converted to an octal number (base 8) represented as a string such as <code>775</code>.</p>\n<p>The returned value can contain an optional <code>prefix</code> and can be required to be of minimum <code>length</code> (excluding the prefix and a possible minus sign). If the value is initially shorter than the required length, it is padded with zeros.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${result} =</td>\n<td>Convert To Octal</td>\n<td>10</td>\n<td></td>\n<td></td>\n<td># Result is 12</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Octal</td>\n<td>-F</td>\n<td>base=16</td>\n<td>prefix=0</td>\n<td># Result is -017</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Convert To Octal</td>\n<td>16</td>\n<td>prefix=oct</td>\n<td>length=4</td>\n<td># Result is oct0020</td>\n</tr>\n</table>\n<p>See also <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a>, <a href=\"#Convert%20To%20Binary\" class=\"name\">Convert To Binary</a> and <a href=\"#Convert%20To%20Hex\" class=\"name\">Convert To Hex</a>.</p>",
        "shortdoc": "Converts the given item to an octal string.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 195,
        "doc_fr": "Convertit l'élément donné en chaîne octale.\n\nL'élément, avec une base facultative, est d'abord converti en entier à l'aide de\nConvert To Integer en interne. Ensuite, il est converti en un nombre octal\n(base 8) représenté sous forme de chaîne telle que `775`.\n\nLa valeur renvoyée peut contenir un préfixe facultatif et peut être requise pour\navoir une longueur minimale (à l'exclusion du préfixe et d'un éventuel signe moins). Si la\nvaleur est initialement plus courte que la longueur requise, elle est complétée par des zéros.\n\nExemples :\n\n${result} = | Convert To Octal | 10 | | | # Le résultat est 12 \n---|---|---|---|---|--- \n${result} = | Convert To Octal | -F | base=16 | prefix=0 | # Le résultat est -017 \n${result} = | Convert To Octal | 16 | prefix=oct | length=4 | # Le résultat est oct0020 \n\nVoir aussi Convertir en entier, Convertir en binaire et Convertir en hexadécimal."
    },
    {
        "name": "Convert To String",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given item to a Unicode string.</p>\n<p>Strings are also <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">NFC normalized</a>.</p>\n<p>Use <span class=\"name\">Encode String To Bytes</span> and <span class=\"name\">Decode Bytes To String</span> keywords in <code>String</code> library if you need to convert between Unicode and byte strings using different encodings. Use <a href=\"#Convert%20To%20Bytes\" class=\"name\">Convert To Bytes</a> if you just want to create byte strings.</p>",
        "shortdoc": "Converts the given item to a Unicode string.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 306,
        "doc_fr": "Convertit l'élément donné en chaîne Unicode.\n\nLes chaînes sont également normalisées NFC.\n\nUtilisez les mots-clés Encode String To Bytes et Decode Bytes To String dans la bibliothèque `String`\nsi vous devez effectuer une conversion entre des chaînes Unicode et des chaînes d'octets en utilisant\ndifférents codages. Utilisez Convert To Bytes si vous souhaitez simplement créer des\nchaînes d'octets."
    },
    {
        "name": "Create Dictionary",
        "args": [
            {
                "name": "items",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*items"
            }
        ],
        "returnType": null,
        "doc": "<p>Creates and returns a dictionary based on the given <code>items</code>.</p>\n<p>Items are typically given using the <code>key=value</code> syntax same way as <code>&amp;{dictionary}</code> variables are created in the Variable table. Both keys and values can contain variables, and possible equal sign in key can be escaped with a backslash like <code>escaped\\=key=value</code>. It is also possible to get items from existing dictionaries by simply using them like <code>&amp;{dict}</code>.</p>\n<p>Alternatively items can be specified so that keys and values are given separately. This and the <code>key=value</code> syntax can even be combined, but separately given items must be first. If same key is used multiple times, the last value has precedence.</p>\n<p>The returned dictionary is ordered, and values with strings as keys can also be accessed using a convenient dot-access syntax like <code>${dict.key}</code>. Technically the returned dictionary is Robot Framework's own <code>DotDict</code> instance. If there is a need, it can be converted into a regular Python <code>dict</code> instance by using the <span class=\"name\">Convert To Dictionary</span> keyword from the Collections library.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>&amp;{dict} =</td>\n<td>Create Dictionary</td>\n<td>key=value</td>\n<td>foo=bar</td>\n<td></td>\n<td></td>\n<td># key=value syntax</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${dict} == {'key': 'value', 'foo': 'bar'}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{dict2} =</td>\n<td>Create Dictionary</td>\n<td>key</td>\n<td>value</td>\n<td>foo</td>\n<td>bar</td>\n<td># separate key and value</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${dict}</td>\n<td>${dict2}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{dict} =</td>\n<td>Create Dictionary</td>\n<td>${1}=${2}</td>\n<td>&amp;{dict}</td>\n<td>foo=new</td>\n<td></td>\n<td># using variables</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${dict} == {1: 2, 'key': 'value', 'foo': 'new'}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${dict.key}</td>\n<td>value</td>\n<td></td>\n<td></td>\n<td></td>\n<td># dot-access</td>\n</tr>\n</table>",
        "shortdoc": "Creates and returns a dictionary based on the given ``items``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 441,
        "doc_fr": "Crée et renvoie un dictionnaire basé sur les `items` donnés.\n\nLes éléments sont généralement donnés en utilisant la syntaxe `key=value` de la même manière que les variables\n`&{dictionary}` sont créées dans la table Variable. Les clés et les\nvaleurs peuvent contenir des variables, et un éventuel signe égal dans la clé peut être échappé\navec une barre oblique inverse comme `escaped\\=key=value`. Il est également possible d'obtenir des éléments\nà partir de dictionnaires existants en les utilisant simplement comme `&{dict}`.\n\nLes éléments peuvent également être spécifiés de manière à ce que les clés et les valeurs soient\ndonnées séparément. Cette syntaxe et la syntaxe `key=value` peuvent même être combinées, mais les éléments\ndonnés séparément doivent être les premiers. Si la même clé est utilisée plusieurs fois, la\ndernière valeur a la priorité.\n\nLe dictionnaire renvoyé est ordonné et les valeurs avec des chaînes comme clés peuvent également\nêtre accessibles à l'aide d'une syntaxe d'accès par points pratique comme `${dict.key}`.\n\nTechniquement, le dictionnaire renvoyé est la propre instance `DotDict` de Robot Framework. Si nécessaire, il peut être converti en une instance Python `dict`\nstandard en utilisant le mot-clé Convert To Dictionary de la bibliothèque\nCollections.\n\nExemples :\n\n&{dict} = | Créer un dictionnaire | clé=valeur | foo=bar | | | # syntaxe clé=valeur \n---|---|---|---|---|---|--- \nDoit être vrai | ${dict} == {'key': 'value', 'foo': 'bar'} | | | | | \n&{dict2} = | Créer un dictionnaire | clé | valeur | foo | bar | # séparer la clé et la valeur \nDoit être égal | ${dict} | ${dict2} | | | | \n&{dict} = | Créer un dictionnaire | ${1}=${2} | &{dict} | foo=new | | # utiliser des variables \nDoit être vrai | ${dict} == {1: 2, 'key': 'value', 'foo': 'new'} | | | | | \nDoit être égal | ${dict.key} | value | | | | # dot-access"
    },
    {
        "name": "Create List",
        "args": [
            {
                "name": "items",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*items"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns a list containing given items.</p>\n<p>The returned list can be assigned both to <code>${scalar}</code> and <code>@{list}</code> variables.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>@{list} =</td>\n<td>Create List</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n</tr>\n<tr>\n<td>${scalar} =</td>\n<td>Create List</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n</tr>\n<tr>\n<td>${ints} =</td>\n<td>Create List</td>\n<td>${1}</td>\n<td>${2}</td>\n<td>${3}</td>\n</tr>\n</table>",
        "shortdoc": "Returns a list containing given items.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 427,
        "doc_fr": "Renvoie une liste contenant les éléments donnés.\n\nLa liste renvoyée peut être affectée à la fois aux variables `${scalar}` et `@{list}`.\n\nExemples :\n\n@{list} = | Créer une liste | a | b | c \n---|---|---|---|--- \n${scalar} = | Créer une liste | a | b | c \n${ints} = | Créer une liste | ${1} | ${2} | ${3}"
    },
    {
        "name": "Evaluate",
        "args": [
            {
                "name": "expression",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expression"
            },
            {
                "name": "modules",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "modules=None"
            },
            {
                "name": "namespace",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "namespace=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Evaluates the given expression in Python and returns the result.</p>\n<p><code>expression</code> is evaluated in Python as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section.</p>\n<p><code>modules</code> argument can be used to specify a comma separated list of Python modules to be imported and added to the evaluation namespace.</p>\n<p><code>namespace</code> argument can be used to pass a custom evaluation namespace as a dictionary. Possible <code>modules</code> are added to this namespace.</p>\n<p>Variables used like <code>${variable}</code> are replaced in the expression before evaluation. Variables are also available in the evaluation namespace and can be accessed using the special <code>$variable</code> syntax as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section.</p>\n<p>Starting from Robot Framework 3.2, modules used in the expression are imported automatically. There are, however, two cases where they need to be explicitly specified using the <code>modules</code> argument:</p>\n<ul>\n<li>When nested modules like <code>rootmod.submod</code> are implemented so that the root module does not automatically import sub modules. This is illustrated by the <code>selenium.webdriver</code> example below.</li>\n</ul>\n<ul>\n<li>When using a module in the expression part of a list comprehension. This is illustrated by the <code>json</code> example below.</li>\n</ul>\n<p>Examples (expecting <code>${result}</code> is number 3.14):</p>\n<table border=\"1\">\n<tr>\n<td>${status} =</td>\n<td>Evaluate</td>\n<td>0 &lt; ${result} &lt; 10</td>\n<td># Would also work with string '3.14'</td>\n</tr>\n<tr>\n<td>${status} =</td>\n<td>Evaluate</td>\n<td>0 &lt; $result &lt; 10</td>\n<td># Using variable itself, not string representation</td>\n</tr>\n<tr>\n<td>${random} =</td>\n<td>Evaluate</td>\n<td>random.randint(0, sys.maxsize)</td>\n<td></td>\n</tr>\n<tr>\n<td>${options} =</td>\n<td>Evaluate</td>\n<td>selenium.webdriver.ChromeOptions()</td>\n<td>modules=selenium.webdriver</td>\n</tr>\n<tr>\n<td>${items} =</td>\n<td>Evaluate</td>\n<td>[json.loads(item) for item in ('1', '\"b\"')]</td>\n<td>modules=json</td>\n</tr>\n<tr>\n<td>${ns} =</td>\n<td>Create Dictionary</td>\n<td>x=${4}</td>\n<td>y=${2}</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Evaluate</td>\n<td>x*10 + y</td>\n<td>namespace=${ns}</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${status} = True\n${random} = &lt;random integer&gt;\n${options} = ChromeOptions instance\n${items} = [1, 'b']\n${result} = 42\n</pre>\n<p><b>NOTE</b>: Prior to Robot Framework 3.2 using <code>modules=rootmod.submod</code> was not enough to make the root module itself available in the evaluation namespace. It needed to be taken into use explicitly like <code>modules=rootmod, rootmod.submod</code>.</p>",
        "shortdoc": "Evaluates the given expression in Python and returns the result.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3460,
        "doc_fr": "Évalue l'expression donnée en Python et renvoie le résultat.\n\n`expression` est évaluée en Python comme expliqué dans la section Évaluation des expressions\n.\n\nL'argument `modules` peut être utilisé pour spécifier une liste séparée par des virgules de\nmodules Python à importer et à ajouter à l'espace de noms d'évaluation.\n\nL'argument `namespace` peut être utilisé pour passer un espace de noms d'évaluation personnalisé en tant que\ndictionnaire. Les `modules` possibles sont ajoutés à cet espace de noms.\n\nLes variables utilisées comme `${variable}` sont remplacées dans l'expression avant\nl'évaluation. Les variables sont également disponibles dans l'espace de noms d'évaluation et peuvent\nêtre consultées à l'aide de la syntaxe spéciale `$variable` comme expliqué dans la\nsection Évaluation des expressions.\n\nÀ partir de Robot Framework 3.2, les modules utilisés dans l'expression sont importés\nautomatiquement. Il existe cependant deux cas où ils doivent être explicitement\nspécifiés à l'aide de l'argument `modules` :\n\n* Lorsque des modules imbriqués comme `rootmod.submod` sont implémentés de manière à ce que le module racine n'importe pas automatiquement les sous-modules. Ceci est illustré par l'exemple `selenium.webdriver` ci-dessous.\n\n* Lorsque vous utilisez un module dans la partie expression d'une liste de compréhension. Ceci est illustré par l'exemple `json` ci-dessous.\n\nExemples (attendant que `${result}` soit le numéro 3.14) :\n\n${status} = | Evaluate | 0 < ${result} < 10 | # Fonctionnerait également avec la chaîne '3.14' \n---|---|---|--- \n${status} = | Evaluate | 0 < $result < 10 | # En utilisant la variable elle-même, pas la représentation sous forme de chaîne \n${random} = | Evaluate | random.randint(0, sys.maxsize) | \n${options} = | Évaluer | selenium.webdriver.ChromeOptions() | modules=selenium.webdriver \n${items} = | Évaluer | [json.loads(item) pour l'élément dans ('1', '\"b\"')] | modules=json \n${ns} = | Créer un dictionnaire | x=${4} | y=${2} \n${result} = | Évaluer | x*10 + y | namespace=${ns} \n\n=>\n\n${status} = True\n${random} = <entier aléatoire>\n${options} = instance ChromeOptions\n${items} = [1, 'b']\n${result} = 42\n\n**REMARQUE** : Avant Robot Framework 3.2, l'utilisation de `modules=rootmod.submod`\nn'était pas suffisante pour rendre le module racine lui-même disponible dans l'espace de noms d'évaluation.\nIl fallait l'utiliser explicitement comme `modules=rootmod,\nrootmod.submod`."
    },
    {
        "name": "Exit For Loop",
        "args": [],
        "returnType": null,
        "doc": "<p>Stops executing the enclosing FOR loop.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>BREAK</code> statement that is recommended over this keyword. In the examples below, <code>Exit For Loop</code> can simply be replaced with <code>BREAK</code>. In addition to that, native <code>IF</code> syntax (new in RF 4.0) or inline <code>IF</code> syntax (new in RF 5.0) can be used instead of <code>Run Keyword If</code>. For example, the first example below could be written like this instead:</p>\n<pre>\nIF    '${var}' == 'EXIT'    BREAK\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>Exits the enclosing FOR loop and continues execution after it. Starting from Robot Framework 5.0, this keyword can only be used inside a loop, not in a keyword used in a loop.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Run Keyword If</td>\n<td>'${var}' == 'EXIT'</td>\n<td>Exit For Loop</td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Exit%20For%20Loop%20If\" class=\"name\">Exit For Loop If</a> to conditionally exit a FOR loop without using <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> or other wrapper keywords.</p>",
        "shortdoc": "Stops executing the enclosing FOR loop.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2680,
        "doc_fr": "Arrête l'exécution de la boucle FOR englobante.\n\n* * *\n\n**REMARQUE :** Robot Framework 5.0 a ajouté la prise en charge de l'instruction `BREAK` native qui\nest recommandée par rapport à ce mot-clé. Dans les exemples ci-dessous, `Exit For Loop` peut\nsimplement être remplacé par `BREAK`. En plus de cela, la syntaxe `IF` native (nouvelle\ndans RF 4.0) ou la syntaxe `IF` en ligne (nouvelle dans RF 5.0) peut être utilisée à la place de `Run\nKeyword If`. Par exemple, le premier exemple ci-dessous pourrait être écrit comme ceci\nà la place :\n\nIF '${var}' == 'EXIT' BREAK\n\nCe mot-clé sera éventuellement obsolète et supprimé.\n\n* * *\n\nQuitter la boucle FOR englobante et continuer l'exécution après celle-ci. À partir de\nRobot Framework 5.0, ce mot-clé ne peut être utilisé qu'à l'intérieur d'une boucle, et non dans un\nmot-clé utilisé dans une boucle.\n\nExemple :\n\nFOR | ${var} | IN | @{VALUES} \n---|---|---|--- \n| Run Keyword If | '${var}' == 'EXIT' | Quitter la boucle For \n| Faire quelque chose | ${var} | \nEND | | | \n\nVoir Quitter la boucle For If pour quitter conditionnellement une boucle FOR sans utiliser Run\nKeyword If ou d'autres mots-clés wrapper."
    },
    {
        "name": "Exit For Loop If",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            }
        ],
        "returnType": null,
        "doc": "<p>Stops executing the enclosing FOR loop if the <code>condition</code> is true.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>BREAK</code> statement and for inline <code>IF</code>, and that combination should be used instead of this keyword. For example, <code>Exit For Loop If</code> usage in the example below could be replaced with</p>\n<pre>\nIF    '${var}' == 'EXIT'    BREAK\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>A wrapper for <a href=\"#Exit%20For%20Loop\" class=\"name\">Exit For Loop</a> to exit a FOR loop based on the given condition. The condition is evaluated using the same semantics as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Exit For Loop If</td>\n<td>'${var}' == 'EXIT'</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Stops executing the enclosing FOR loop if the ``condition`` is true.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2716,
        "doc_fr": "Arrête l'exécution de la boucle FOR englobante si la condition est vraie.\n\n* * *\n\n**REMARQUE :** Robot Framework 5.0 a ajouté la prise en charge de l'instruction `BREAK` native et\nde la fonction `IF` en ligne, et cette combinaison doit être utilisée à la place de ce mot-clé.\nPar exemple, l'utilisation de `Exit For Loop If` dans l'exemple ci-dessous pourrait être remplacée\npar\n\nIF '${var}' == 'EXIT' BREAK\n\nCe mot-clé sera éventuellement obsolète et supprimé.\n\n* * *\n\nUn wrapper pour Exit For Loop pour quitter une boucle FOR en fonction de la condition donnée.\nLa condition est évaluée à l'aide de la même sémantique qu'avec le mot-clé Should Be True\n.\n\nExemple :\n\nFOR | ${var} | IN | @{VALUES} \n---|---|---|--- \n| Exit For Loop If | '${var}' == 'EXIT' | \n| Do Something | ${var} | \nFIN | | |"
    },
    {
        "name": "Fail",
        "args": [
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "tags",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*tags"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails the test with the given message and optionally alters its tags.</p>\n<p>The error message is specified using the <code>msg</code> argument. It is possible to use HTML in the given error message, similarly as with any other keyword accepting an error message, by prefixing the error with <code>*HTML*</code>.</p>\n<p>It is possible to modify tags of the current test case by passing tags after the message. Tags starting with a hyphen (e.g. <code>-regression</code>) are removed and others added. Tags are modified using <a href=\"#Set%20Tags\" class=\"name\">Set Tags</a> and <a href=\"#Remove%20Tags\" class=\"name\">Remove Tags</a> internally, and the semantics setting and removing them are the same as with these keywords.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Fail</td>\n<td>Test not ready</td>\n<td></td>\n<td></td>\n<td># Fails with the given message.</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>*HTML*&lt;b&gt;Test not ready&lt;/b&gt;</td>\n<td></td>\n<td></td>\n<td># Fails using HTML in the message.</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>Test not ready</td>\n<td>not-ready</td>\n<td></td>\n<td># Fails and adds 'not-ready' tag.</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>OS not supported</td>\n<td>-regression</td>\n<td></td>\n<td># Removes tag 'regression'.</td>\n</tr>\n<tr>\n<td>Fail</td>\n<td>My message</td>\n<td>tag</td>\n<td>-t*</td>\n<td># Removes all tags starting with 't' except the newly added 'tag'.</td>\n</tr>\n</table>\n<p>See <a href=\"#Fatal%20Error\" class=\"name\">Fatal Error</a> if you need to stop the whole test execution.</p>",
        "shortdoc": "Fails the test with the given message and optionally alters its tags.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 505,
        "doc_fr": "Fait échouer le test avec le message donné et modifie éventuellement ses balises.\n\nLe message d'erreur est spécifié à l'aide de l'argument `msg`. Il est possible d'utiliser\nHTML dans le message d'erreur donné, de la même manière qu'avec tout autre mot-clé acceptant\nun message d'erreur, en préfixant l'erreur avec `*HTML*`.\n\nIl est possible de modifier les balises du cas de test actuel en passant des balises après\nle message. Les balises commençant par un tiret (par exemple `-regression`) sont supprimées et\nd'autres ajoutées. Les balises sont modifiées à l'aide de Set Tags et Remove Tags en interne, et\nla définition de la sémantique et leur suppression sont les mêmes qu'avec ces mots-clés.\n\nExemples :\n\nÉchec | Test non prêt | | | # Échec avec le message donné. \n---|---|---|---|--- \nÉchec | *HTML*<b>Test non prêt</b> | | | # Échec en utilisant HTML dans le message. \nÉchec | Test non prêt | not-ready | | # Échoue et ajoute la balise « not-ready ». \nÉchec | Système d'exploitation non pris en charge | -regression | | # Supprime la balise « regression ». \nÉchec | Mon message | balise | -t* | # Supprime toutes les balises commençant par « t » à l'exception de la « balise » nouvellement ajoutée. \n\nConsultez Erreur fatale si vous devez arrêter l'exécution complète du test."
    },
    {
        "name": "Fatal Error",
        "args": [
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Stops the whole test execution.</p>\n<p>The test or suite where this keyword is used fails with the provided message, and subsequent tests fail with a canned message. Possible teardowns will nevertheless be executed.</p>\n<p>See <a href=\"#Fail\" class=\"name\">Fail</a> if you only want to stop one test case unconditionally.</p>",
        "shortdoc": "Stops the whole test execution.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 531,
        "doc_fr": "Arrête l'exécution complète du test.\n\nLe test ou la suite où ce mot-clé est utilisé échoue avec le message fourni,\net les tests suivants échouent avec un message prédéfini. Les éventuels arrêts seront\nnéanmoins exécutés.\n\nVoir Échec si vous ne souhaitez arrêter qu'un seul cas de test sans condition."
    },
    {
        "name": "Get Count",
        "args": [
            {
                "name": "container",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "container"
            },
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns and logs how many times <code>item</code> is found from <code>container</code>.</p>\n<p>This keyword works with Python strings and lists and all objects that either have <code>count</code> method or can be converted to Python lists.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${count} =</td>\n<td>Get Count</td>\n<td>${some item}</td>\n<td>interesting value</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>5 &lt; ${count} &lt; 10</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Returns and logs how many times ``item`` is found from ``container``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1285,
        "doc_fr": "Renvoie et enregistre le nombre de fois où `item` est trouvé dans `container`.\n\nCe mot-clé fonctionne avec les chaînes et les listes Python et tous les objets qui\nont la méthode `count` ou peuvent être convertis en listes Python.\n\nExemple :\n\n${count} = | Get Count | ${some item} | interesting value \n---|---|---|--- \nDoit être vrai | 5 < ${count} < 10 | |"
    },
    {
        "name": "Get Length",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns and logs the length of the given item as an integer.</p>\n<p>The item can be anything that has a length, for example, a string, a list, or a mapping. The keyword first tries to get the length with the Python function <code>len</code>, which calls the  item's <code>__len__</code> method internally. If that fails, the keyword tries to call the item's possible <code>length</code> and <code>size</code> methods directly. The final attempt is trying to get the value of the item's <code>length</code> attribute. If all these attempts are unsuccessful, the keyword fails.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${length} =</td>\n<td>Get Length</td>\n<td>Hello, world!</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${length}</td>\n<td>13</td>\n<td></td>\n</tr>\n<tr>\n<td>@{list} =</td>\n<td>Create List</td>\n<td>Hello,</td>\n<td>world!</td>\n</tr>\n<tr>\n<td>${length} =</td>\n<td>Get Length</td>\n<td>${list}</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>${length}</td>\n<td>2</td>\n<td></td>\n</tr>\n</table>\n<p>See also <a href=\"#Length%20Should%20Be\" class=\"name\">Length Should Be</a>, <a href=\"#Should%20Be%20Empty\" class=\"name\">Should Be Empty</a> and <a href=\"#Should%20Not%20Be%20Empty\" class=\"name\">Should Not Be Empty</a>.</p>",
        "shortdoc": "Returns and logs the length of the given item as an integer.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1400,
        "doc_fr": "Renvoie et enregistre la longueur de l'élément donné sous forme d'entier.\n\nL'élément peut être n'importe quoi qui a une longueur, par exemple une chaîne, une liste ou\nun mappage. Le mot-clé essaie d'abord d'obtenir la longueur avec la fonction Python\n`len`, qui appelle la méthode `__len__` de l'élément en interne. Si cela échoue, le\nmot-clé essaie d'appeler directement les méthodes possibles `length` et `size` de l'élément\n. La dernière tentative consiste à essayer d'obtenir la valeur de l'attribut `length`\nde l'élément. Si toutes ces tentatives échouent, le mot-clé échoue.\n\nExemples :\n\n${length} = | Obtenir la longueur | Bonjour, monde ! | \n---|---|---|--- \nDoit être égal à des entiers | ${length} | 13 | \n@{list} = | Créer une liste | Bonjour, | monde ! \n${length} = | Obtenir la longueur | ${list} | \nDoit être égal à des entiers | ${length} | 2 | \n\nVoir aussi La longueur doit être, Doit être vide et Ne doit pas être vide."
    },
    {
        "name": "Get Library Instance",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "name=None"
            },
            {
                "name": "all",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "all=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns the currently active instance of the specified library.</p>\n<p>This keyword makes it easy for libraries to interact with other libraries that have state. This is illustrated by the Python example below:</p>\n<pre>\nfrom robot.libraries.BuiltIn import BuiltIn\n\ndef title_should_start_with(expected):\n    seleniumlib = BuiltIn().get_library_instance('SeleniumLibrary')\n    title = seleniumlib.get_title()\n    if not title.startswith(expected):\n        raise AssertionError(f\"Title '{title}' did not start with '{expected}'.\")\n</pre>\n<p>It is also possible to use this keyword in the test data and pass the returned library instance to another keyword. If a library is imported with a custom name, the <code>name</code> used to get the instance must be that name and not the original library name.</p>\n<p>If the optional argument <code>all</code> is given a true value, then a dictionary mapping all library names to instances will be returned.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>&amp;{all libs} =</td>\n<td>Get library instance</td>\n<td>all=True</td>\n</tr>\n</table>",
        "shortdoc": "Returns the currently active instance of the specified library.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3733,
        "doc_fr": "Renvoie l'instance actuellement active de la bibliothèque spécifiée.\n\nCe mot-clé permet aux bibliothèques d'interagir facilement avec d'autres bibliothèques qui\nont un état. Ceci est illustré par l'exemple Python ci-dessous :\n\nfrom robot.libraries.BuiltIn import BuiltIn\n\ndef title_should_start_with(expected):\nseleniumlib = BuiltIn().get_library_instance('SeleniumLibrary')\ntitle = seleniumlib.get_title()\nif not title.startswith(expected):\nraise AssertionError(f\"Title '{title}' did not start with '{expected}'.\")\n\nIl est également possible d'utiliser ce mot-clé dans les données de test et de transmettre l'instance\nde bibliothèque renvoyée à un autre mot-clé. Si une bibliothèque est importée avec un\nnom personnalisé, le `name` utilisé pour obtenir l'instance doit être ce nom et non le\nnom de la bibliothèque d'origine.\n\nSi l'argument optionnel `all` reçoit une valeur true, alors un dictionnaire\nmappant tous les noms de bibliothèques aux instances sera renvoyé.\n\nExemple :\n\n&{all libs} = | Obtenir l'instance de bibliothèque | all=True \n---|---|---"
    },
    {
        "name": "Get Time",
        "args": [
            {
                "name": "format",
                "type": null,
                "defaultValue": "timestamp",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "format=timestamp"
            },
            {
                "name": "time_",
                "type": null,
                "defaultValue": "NOW",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "time_=NOW"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns the given time in the requested format.</p>\n<p><b>NOTE:</b> DateTime library contains much more flexible keywords for getting the current date and time and for date and time handling in general.</p>\n<p>How time is returned is determined based on the given <code>format</code> string as follows. Note that all checks are case-insensitive.</p>\n<p>1) If <code>format</code> contains the word <code>epoch</code>, the time is returned in seconds after the UNIX epoch (1970-01-01 00:00:00 UTC). The return value is always an integer.</p>\n<p>2) If <code>format</code> contains any of the words <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>min</code>, or <code>sec</code>, only the selected parts are returned. The order of the returned parts is always the one in the previous sentence and the order of words in <code>format</code> is not significant. The parts are returned as zero-padded strings (e.g. May -&gt; <code>05</code>).</p>\n<p>3) Otherwise (and by default) the time is returned as a timestamp string in the format <code>2006-02-24 15:08:31</code>.</p>\n<p>By default this keyword returns the current local time, but that can be altered using <code>time</code> argument as explained below. Note that all checks involving strings are case-insensitive.</p>\n<p>1) If <code>time</code> is a number, or a string that can be converted to a number, it is interpreted as seconds since the UNIX epoch. This documentation was originally written about 1177654467 seconds after the epoch.</p>\n<p>2) If <code>time</code> is a timestamp, that time will be used. Valid timestamp formats are <code>YYYY-MM-DD hh:mm:ss</code> and <code>YYYYMMDD hhmmss</code>.</p>\n<p>3) If <code>time</code> is equal to <code>NOW</code> (default), the current local time is used.</p>\n<p>4) If <code>time</code> is equal to <code>UTC</code>, the current time in <a href=\"http://en.wikipedia.org/wiki/Coordinated_Universal_Time\">UTC</a> is used.</p>\n<p>5) If <code>time</code> is in the format like <code>NOW - 1 day</code> or <code>UTC + 1 hour 30 min</code>, the current local/UTC time plus/minus the time specified with the time string is used. The time string format is described in an appendix of Robot Framework User Guide.</p>\n<p>Examples (expecting the current local time is 2006-03-29 15:06:21):</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Get Time</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${secs} =</td>\n<td>Get Time</td>\n<td>epoch</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${year} =</td>\n<td>Get Time</td>\n<td>return year</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${yyyy}</td>\n<td>${mm}</td>\n<td>${dd} =</td>\n<td>Get Time</td>\n<td>year,month,day</td>\n</tr>\n<tr>\n<td>@{time} =</td>\n<td>Get Time</td>\n<td>year month day hour min sec</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${y}</td>\n<td>${s} =</td>\n<td>Get Time</td>\n<td>seconds and year</td>\n<td></td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${time} = '2006-03-29 15:06:21'\n${secs} = 1143637581\n${year} = '2006'\n${yyyy} = '2006', ${mm} = '03', ${dd} = '29'\n@{time} = ['2006', '03', '29', '15', '06', '21']\n${y} = '2006'\n${s} = '21'\n</pre>\n<p>Examples (expecting the current local time is 2006-03-29 15:06:21 and UTC time is 2006-03-29 12:06:21):</p>\n<table border=\"1\">\n<tr>\n<td>${time} =</td>\n<td>Get Time</td>\n<td></td>\n<td>1177654467</td>\n<td># Time given as epoch seconds</td>\n</tr>\n<tr>\n<td>${secs} =</td>\n<td>Get Time</td>\n<td>sec</td>\n<td>2007-04-27 09:14:27</td>\n<td># Time given as a timestamp</td>\n</tr>\n<tr>\n<td>${year} =</td>\n<td>Get Time</td>\n<td>year</td>\n<td>NOW</td>\n<td># The local time of execution</td>\n</tr>\n<tr>\n<td>@{time} =</td>\n<td>Get Time</td>\n<td>hour min sec</td>\n<td>NOW + 1h 2min 3s</td>\n<td># 1h 2min 3s added to the local time</td>\n</tr>\n<tr>\n<td>@{utc} =</td>\n<td>Get Time</td>\n<td>hour min sec</td>\n<td>UTC</td>\n<td># The UTC time of execution</td>\n</tr>\n<tr>\n<td>${hour} =</td>\n<td>Get Time</td>\n<td>hour</td>\n<td>UTC - 1 hour</td>\n<td># 1h subtracted from the UTC  time</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${time} = '2007-04-27 09:14:27'\n${secs} = 27\n${year} = '2006'\n@{time} = ['16', '08', '24']\n@{utc} = ['12', '06', '21']\n${hour} = '11'\n</pre>",
        "shortdoc": "Returns the given time in the requested format.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3377,
        "doc_fr": "Renvoie l'heure donnée dans le format demandé.\n\n**REMARQUE :** la bibliothèque DateTime contient des mots-clés beaucoup plus flexibles pour obtenir\nla date et l'heure actuelles et pour la gestion de la date et de l'heure en général.\n\nLa manière dont l'heure est renvoyée est déterminée en fonction de la chaîne `format` donnée\ncomme suit. Notez que toutes les vérifications sont insensibles à la casse.\n\n1) Si `format` contient le mot `epoch`, l'heure est renvoyée en secondes\naprès l'époque UNIX (1970-01-01 00:00:00 UTC). La valeur de retour est toujours un\nentier.\n\n2) Si `format` contient l'un des mots `year`, `month`, `day`, `hour`,\n`min` ou `sec`, seules les parties sélectionnées sont renvoyées. L'ordre des\nparties renvoyées est toujours celui de la phrase précédente et l'ordre des\nmots dans `format` n'est pas significatif. Les parties sont renvoyées sous forme de\nchaînes complétées par des zéros (par exemple, mai -> `05`).\n\n3) Sinon (et par défaut), l'heure est renvoyée sous forme de chaîne d'horodatage au\nformat `2006-02-24 15:08:31`.\n\nPar défaut, ce mot-clé renvoie l'heure locale actuelle, mais elle peut\nêtre modifiée à l'aide de l'argument `time` comme expliqué ci-dessous. Notez que toutes les vérifications\nimpliquant des chaînes ne sont pas sensibles à la casse.\n\n1) Si `time` est un nombre, ou une chaîne qui peut être convertie en nombre, elle est\ninterprétée comme les secondes depuis l'époque UNIX. Cette documentation a été écrite à l'origine\nenviron 1177654467 secondes après l'époque.\n\n2) Si `time` est un horodatage, cette heure sera utilisée. Les formats d'horodatage valides\nsont `YYYY-MM-DD hh:mm:ss` et `YYYYMMDD hhmmss`.\n\n3) Si `time` est égal à `NOW` (par défaut), l'heure locale actuelle est utilisée.\n\n4) Si `time` est égal à `UTC`, l'heure actuelle en\n[UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) est utilisée.\n\n5) Si `time` est au format `NOW - 1 day` ou `UTC + 1 hour 30 min`, l'heure\nlocale/UTC actuelle plus/moins l'heure spécifiée avec la chaîne d'heure est\nutilisée. Le format de la chaîne d'heure est décrit dans une annexe du Guide de l'utilisateur de Robot Framework.\n\nExemples (en espérant que l'heure locale actuelle soit 2006-03-29 15:06:21) :\n\n${time} = | Get Time | | | \n---|---|---|---|--- \n${secs} = | Obtenir l'heure | époque | | \n${année} = | Obtenir l'heure | année de retour | | \n${aaaa} | ${mm} | ${jj} = | Obtenir l'heure | année, mois, jour \n@{heure} = | Obtenir l'heure | année mois jour heure min sec | | \n${y} | ${s} = | Obtenir l'heure | secondes et année | \n\n=>\n\n${time} = '2006-03-29 15:06:21'\n${secs} = 1143637581\n${year} = '2006'\n${yyyy} = '2006', ${mm} = '03', ${dd} = '29'\n@{time} = ['2006', '03', '29', '15', '06', '21']\n${y} = '2006'\n${s} = '21'\n\nExemples (en espérant que l'heure locale actuelle soit 2006-03-29 15:06:21 et que l'heure UTC\nsoit 2006-03-29 12:06:21) :\n\n${time} = | Obtenir l'heure | | 1177654467 | # Heure donnée en secondes d'époque \n---|---|---|---|--- \n${secs} = | Get Time | sec | 2007-04-27 09:14:27 | # Heure donnée en tant qu'horodatage \n${year} = | Get Time | year | NOW | # L'heure locale d'exécution \n@{time} = | Get Time | hour min sec | NOW + 1h 2min 3s | # 1h 2min 3s ajoutée à l'heure locale \n@{utc} = | Get Time | hour min sec | UTC | # L'heure UTC d'exécution \n${hour} = | Get Time | hour | UTC - 1 hour | # 1h soustraite de l'heure UTC \n\n=>\n\n${time} = '2007-04-27 09:14:27'\n${secs} = 27\n${year} = '2006'\n@{time} = ['16', '08', '24']\n@{utc} = ['12', '06', '21']\n${hour} = '11'"
    },
    {
        "name": "Get Variable Value",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "default",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "default=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns variable value or <code>default</code> if the variable does not exist.</p>\n<p>The name of the variable can be given either as a normal variable name like <code>${name}</code> or in escaped format like <code>$name</code> or <code>\\${name}</code>. For the reasons explained in the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section, using the escaped format is recommended.</p>\n<p>Examples:</p>\n<pre>\n${x} =    <a href=\"#Get%20Variable%20Value\" class=\"name\">Get Variable Value</a>    $a    default\n${y} =    <a href=\"#Get%20Variable%20Value\" class=\"name\">Get Variable Value</a>    $a    ${b}\n${z} =    <a href=\"#Get%20Variable%20Value\" class=\"name\">Get Variable Value</a>    $z\n</pre>\n<p>=&gt;</p>\n<ul>\n<li><code>${x}</code> gets value of <code>${a}</code> if <code>${a}</code> exists and string <code>default</code> otherwise</li>\n<li><code>${y}</code> gets value of <code>${a}</code> if <code>${a}</code> exists and value of <code>${b}</code> otherwise</li>\n<li><code>${z}</code> is set to Python <code>None</code> if it does not exist previously</li>\n</ul>",
        "shortdoc": "Returns variable value or ``default`` if the variable does not exist.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1522,
        "doc_fr": "Renvoie la valeur de la variable ou `default` si la variable n'existe pas.\n\nLe nom de la variable peut être donné soit comme un nom de variable normal comme\n`${name}` ou dans un format échappé comme `$name` ou `\\${name}`. Pour les raisons\nexpliquées dans la section Utilisation de variables avec des mots-clés pour créer ou accéder à des variables\n, il est recommandé d'utiliser le format échappé.\n\nExemples :\n\n${x} = Obtenir la valeur de la variable $a default\n${y} = Obtenir la valeur de la variable $a ${b}\n${z} = Obtenir la valeur de la variable $z\n\n=>\n\n* `${x}` obtient la valeur de `${a}` si `${a}` existe et la chaîne `default` sinon\n* `${y}` obtient la valeur de `${a}` si `${a}` existe et la valeur de `${b}` sinon\n* `${z}` est défini sur Python `None` s'il n'existe pas précédemment"
    },
    {
        "name": "Get Variables",
        "args": [
            {
                "name": "no_decoration",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "no_decoration=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns a dictionary containing all variables in the current scope.</p>\n<p>Variables are returned as a special dictionary that allows accessing variables in space, case, and underscore insensitive manner similarly as accessing variables in the test data. This dictionary supports all same operations as normal Python dictionaries and, for example, Collections library can be used to access or modify it. Modifying the returned dictionary has no effect on the variables available in the current scope.</p>\n<p>By default variables are returned with <code>${}</code>, <code>@{}</code> or <code>&amp;{}</code> decoration based on variable types. Giving a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) to the optional argument <code>no_decoration</code> will return the variables without the decoration.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${example_variable} =</td>\n<td>Set Variable</td>\n<td>example value</td>\n<td></td>\n</tr>\n<tr>\n<td>${variables} =</td>\n<td>Get Variables</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Dictionary Should Contain Key</td>\n<td>${variables}</td>\n<td>\\${example_variable}</td>\n<td></td>\n</tr>\n<tr>\n<td>Dictionary Should Contain Key</td>\n<td>${variables}</td>\n<td>\\${ExampleVariable}</td>\n<td></td>\n</tr>\n<tr>\n<td>Set To Dictionary</td>\n<td>${variables}</td>\n<td>\\${name}</td>\n<td>value</td>\n</tr>\n<tr>\n<td>Variable Should Not Exist</td>\n<td>\\${name}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${no decoration} =</td>\n<td>Get Variables</td>\n<td>no_decoration=Yes</td>\n<td></td>\n</tr>\n<tr>\n<td>Dictionary Should Contain Key</td>\n<td>${no decoration}</td>\n<td>example_variable</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Returns a dictionary containing all variables in the current scope.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1492,
        "doc_fr": "Renvoie un dictionnaire contenant toutes les variables de la portée actuelle.\n\nLes variables sont renvoyées sous forme de dictionnaire spécial qui permet d'accéder aux variables\nde manière insensible à l'espace, à la casse et au trait de soulignement, de la même manière que l'accès aux\nvariables dans les données de test. Ce dictionnaire prend en charge toutes les mêmes opérations que les\ndictionnaires Python normaux et, par exemple, la bibliothèque Collections peut être utilisée\npour y accéder ou le modifier. La modification du dictionnaire renvoyé n'a aucun effet sur les\nvariables disponibles dans la portée actuelle.\n\nPar défaut, les variables sont renvoyées avec une décoration `${}`, `@{}` ou `&{}` basée\nsur les types de variables. Donner une valeur true (voir les arguments booléens) à l'argument\nfacultatif `no_decoration` renverra les variables sans la décoration.\n\nExemple :\n\n${example_variable} = | Set Variable | example value | \n---|---|---|--- \n${variables} = | Get Variables | | \nDictionary Should Contain Key | ${variables} | \\${example_variable} | \nLe dictionnaire doit contenir la clé | ${variables} | \\${ExampleVariable} | \nDéfinir sur le dictionnaire | ${variables} | \\${name} | valeur \nLa variable ne doit pas exister | \\${name} | | \n${no decoration} = | Obtenir les variables | no_decoration=Oui | \nLe dictionnaire doit contenir la clé | ${no decoration} | example_variable |"
    },
    {
        "name": "Import Library",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Imports a library with the given name and optional arguments.</p>\n<p>This functionality allows dynamic importing of libraries while tests are running. That may be necessary, if the library itself is dynamic and not yet available when test data is processed. In a normal case, libraries should be imported using the Library setting in the Setting section.</p>\n<p>This keyword supports importing libraries both using library names and physical paths. When paths are used, they must be given in absolute format or found from <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path\">search path</a>. Forward slashes can be used as path separators in all operating systems.</p>\n<p>It is possible to pass arguments to the imported library and also named argument syntax works if the library supports it. <code>AS</code> syntax can be used to give a custom name to the imported library.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Import Library</td>\n<td>MyLibrary</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Import Library</td>\n<td>${CURDIR}/Lib.py</td>\n<td>arg1</td>\n<td>named=arg2</td>\n<td>AS</td>\n<td>Custom</td>\n</tr>\n</table>",
        "shortdoc": "Imports a library with the given name and optional arguments.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3234,
        "doc_fr": "Importe une bibliothèque avec le nom donné et des arguments facultatifs.\n\nCette fonctionnalité permet l'importation dynamique de bibliothèques pendant que les tests\ns'exécutent. Cela peut être nécessaire si la bibliothèque elle-même est dynamique et n'est pas encore\ndisponible lorsque les données de test sont traitées. Dans un cas normal, les bibliothèques doivent être\nimportées à l'aide du paramètre Bibliothèque dans la section Paramètres.\n\nCe mot-clé prend en charge l'importation de bibliothèques à la fois en utilisant des noms de bibliothèque et des\nchemins physiques. Lorsque des chemins sont utilisés, ils doivent être donnés au format absolu ou trouvés à partir de [chemin\nde recherche](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-\nsearch-path). Les barres obliques peuvent être utilisées comme séparateurs de chemin dans tous les\nsystèmes d'exploitation.\n\nIl est possible de transmettre des arguments à la bibliothèque importée et la syntaxe d'argument\nnommé fonctionne également si la bibliothèque la prend en charge. La syntaxe `AS` peut être utilisée pour\ndonner un nom personnalisé à la bibliothèque importée.\n\nExemples :\n\nImporter une bibliothèque | Ma bibliothèque | | | \n---|---|---|---|---|--- \nImporter la bibliothèque | ${CURDIR}/Lib.py | arg1 | named=arg2 | AS | Personnalisé"
    },
    {
        "name": "Import Resource",
        "args": [
            {
                "name": "path",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "path"
            }
        ],
        "returnType": null,
        "doc": "<p>Imports a resource file with the given path.</p>\n<p>Resources imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Resource setting.</p>\n<p>The given path must be absolute or found from <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path\">search path</a>. Forward slashes can be used as path separator regardless the operating system.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Import Resource</td>\n<td>${CURDIR}/resource.txt</td>\n</tr>\n<tr>\n<td>Import Resource</td>\n<td>${CURDIR}/../resources/resource.html</td>\n</tr>\n<tr>\n<td>Import Resource</td>\n<td>found_from_pythonpath.robot</td>\n</tr>\n</table>",
        "shortdoc": "Imports a resource file with the given path.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3295,
        "doc_fr": "Importe un fichier de ressources avec le chemin donné.\n\nLes ressources importées avec ce mot-clé sont définies dans la portée de la suite de tests\nde la même manière lors de leur importation dans la table Paramètres à l'aide du paramètre Ressource.\n\nLe chemin donné doit être absolu ou trouvé à partir de [chemin\nde recherche](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-\nsearch-path). Les barres obliques peuvent être utilisées comme séparateur de chemin quel que soit le\nsystème d'exploitation.\n\nExemples :\n\nImporter une ressource | ${CURDIR}/resource.txt \n---|--- \nImporter une ressource | ${CURDIR}/../resources/resource.html \nImporter une ressource | found_from_pythonpath.robot"
    },
    {
        "name": "Import Variables",
        "args": [
            {
                "name": "path",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "path"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Imports a variable file with the given path and optional arguments.</p>\n<p>Variables imported with this keyword are set into the test suite scope similarly when importing them in the Setting table using the Variables setting. These variables override possible existing variables with the same names. This functionality can thus be used to import new variables, for example, for each test in a test suite.</p>\n<p>The given path must be absolute or found from <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html##module-search-path\">search path</a>. Forward slashes can be used as path separator regardless the operating system.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Import Variables</td>\n<td>${CURDIR}/variables.py</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Import Variables</td>\n<td>${CURDIR}/../vars/env.py</td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td>Import Variables</td>\n<td>file_from_pythonpath.py</td>\n<td></td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Imports a variable file with the given path and optional arguments.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3270,
        "doc_fr": "Importe un fichier de variables avec le chemin d'accès donné et des arguments facultatifs.\n\nLes variables importées avec ce mot-clé sont définies dans la portée de la suite de tests\nde la même manière lors de leur importation dans la table Paramètres à l'aide du paramètre\nVariables. Ces variables remplacent les éventuelles variables existantes portant les mêmes\nnoms. Cette fonctionnalité peut ainsi être utilisée pour importer de nouvelles variables, par\nexemple, pour chaque test d'une suite de tests.\n\nLe chemin d'accès donné doit être absolu ou trouvé à partir de [chemin\nde recherche](http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html##module-\nsearch-path). Les barres obliques peuvent être utilisées comme séparateur de chemin quel que soit\nle système d'exploitation.\n\nExemples :\n\nImporter des variables | ${CURDIR}/variables.py | | \n---|---|---|--- \nImporter des variables | ${CURDIR}/../vars/env.py | arg1 | arg2 \nImporter des variables | fichier_from_pythonpath.py | |"
    },
    {
        "name": "Keyword Should Exist",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails unless the given keyword exists in the current scope.</p>\n<p>Fails also if there is more than one keyword with the same name. Works both with the short name (e.g. <code>Log</code>) and the full name (e.g. <code>BuiltIn.Log</code>).</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>See also <a href=\"#Variable%20Should%20Exist\" class=\"name\">Variable Should Exist</a>.</p>",
        "shortdoc": "Fails unless the given keyword exists in the current scope.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3359,
        "doc_fr": "Échoue à moins que le mot-clé donné n'existe dans la portée actuelle.\n\nÉchoue également s'il existe plusieurs mots-clés portant le même nom. Fonctionne à la fois\navec le nom court (par exemple, `Log`) et le nom complet (par exemple, `BuiltIn.Log`).\n\nLe message d'erreur par défaut peut être remplacé par l'argument `msg`.\n\nVoir aussi La variable doit exister."
    },
    {
        "name": "Length Should Be",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "length",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "length"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the length of the given item is correct.</p>\n<p>The length of the item is got using the <a href=\"#Get%20Length\" class=\"name\">Get Length</a> keyword. The default error message can be overridden with the <code>msg</code> argument.</p>",
        "shortdoc": "Verifies that the length of the given item is correct.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1448,
        "doc_fr": "Vérifie que la longueur de l'élément donné est correcte.\n\nLa longueur de l'élément est obtenue à l'aide du mot-clé Get Length. Le message d'erreur par défaut\npeut être remplacé par l'argument `msg`."
    },
    {
        "name": "Log",
        "args": [
            {
                "name": "message",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "message"
            },
            {
                "name": "level",
                "type": null,
                "defaultValue": "INFO",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "level=INFO"
            },
            {
                "name": "html",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "html=False"
            },
            {
                "name": "console",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "console=False"
            },
            {
                "name": "repr",
                "type": null,
                "defaultValue": "DEPRECATED",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "repr=DEPRECATED"
            },
            {
                "name": "formatter",
                "type": null,
                "defaultValue": "str",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "formatter=str"
            }
        ],
        "returnType": null,
        "doc": "<p>Logs the given message with the given level.</p>\n<p>Valid levels are TRACE, DEBUG, INFO (default), WARN and ERROR. In addition to that, there are pseudo log levels HTML and CONSOLE that both log messages using INFO.</p>\n<p>Messages below the current active log level are ignored. See <a href=\"#Set%20Log%20Level\" class=\"name\">Set Log Level</a> keyword and <code>--loglevel</code> command line option for more details about setting the level.</p>\n<p>Messages logged with the WARN or ERROR levels are automatically visible also in the console and in the Test Execution Errors section in the log file.</p>\n<p>If the <code>html</code> argument is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) or the HTML pseudo log level is used, the message is considered to be HTML and special characters such as <code>&lt;</code> are not escaped. For example, logging <code>&lt;img src=\"image.png\"&gt;</code> creates an image in this case, but otherwise the message is that exact string. When using the HTML pseudo level, the messages is logged using the INFO level.</p>\n<p>If the <code>console</code> argument is true or the CONSOLE pseudo level is used, the message is written both to the console and to the log file. When using the CONSOLE pseudo level, the message is logged using the INFO level. If the message should not be logged to the log file or there are special formatting needs, use the <a href=\"#Log%20To%20Console\" class=\"name\">Log To Console</a> keyword instead.</p>\n<p>The <code>formatter</code> argument controls how to format the string representation of the message. Possible values are <code>str</code> (default), <code>repr</code>, <code>ascii</code>, <code>len</code>, and <code>type</code>. They work similarly to Python built-in functions with same names. When using <code>repr</code>, bigger lists, dictionaries and other containers are also pretty-printed so that there is one item per row. For more details see <a href=\"#String%20representations\" class=\"name\">String representations</a>.</p>\n<p>The old way to control string representation was using the <code>repr</code> argument. This argument has been deprecated and <code>formatter=repr</code> should be used instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Log</td>\n<td>Hello, world!</td>\n<td></td>\n<td></td>\n<td># Normal INFO message.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>Warning, world!</td>\n<td>WARN</td>\n<td></td>\n<td># Warning.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>&lt;b&gt;Hello&lt;/b&gt;, world!</td>\n<td>html=yes</td>\n<td></td>\n<td># INFO message as HTML.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>&lt;b&gt;Hello&lt;/b&gt;, world!</td>\n<td>HTML</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>&lt;b&gt;Hello&lt;/b&gt;, world!</td>\n<td>DEBUG</td>\n<td>html=true</td>\n<td># DEBUG as HTML.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>Hello, console!</td>\n<td>console=yes</td>\n<td></td>\n<td># Log also to the console.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>Hello, console!</td>\n<td>CONSOLE</td>\n<td></td>\n<td># Log also to the console.</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>Null is \\x00</td>\n<td>formatter=repr</td>\n<td></td>\n<td># Log <code>'Null is \\x00'</code>.</td>\n</tr>\n</table>\n<p>See <a href=\"#Log%20Many\" class=\"name\">Log Many</a> if you want to log multiple messages in one go, and <a href=\"#Log%20To%20Console\" class=\"name\">Log To Console</a> if you only want to write to the console.</p>\n<p>Formatter options <code>type</code> and <code>len</code> are new in Robot Framework 5.0. The CONSOLE level is new in Robot Framework 6.1.</p>",
        "shortdoc": "Logs the given message with the given level.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3036,
        "doc_fr": "Enregistre le message donné avec le niveau donné.\n\nLes niveaux valides sont TRACE, DEBUG, INFO (par défaut), WARN et ERROR. En plus de cela, il existe des pseudo-niveaux de journalisation HTML et CONSOLE qui enregistrent tous les deux les messages\nà l'aide d'INFO.\n\nLes messages inférieurs au niveau de journalisation actif actuel sont ignorés. Voir le mot-clé Définir le niveau de journalisation\net l'option de ligne de commande `--loglevel` pour plus de détails sur la définition\ndu niveau.\n\nLes messages enregistrés avec les niveaux WARN ou ERROR sont également\nautomatiquement visibles dans la console et dans la section Erreurs d'exécution de test du fichier journal.\n\nSi l'argument `html` reçoit une valeur true (voir Arguments booléens) ou si le pseudo-niveau de journalisation\nHTML est utilisé, le message est considéré comme HTML et\nles caractères spéciaux tels que `<` ne sont pas échappés. Par exemple, la journalisation `<img\nsrc=\"image.png\">` crée une image dans ce cas, mais sinon le message est\ncette chaîne exacte. Lorsque vous utilisez le pseudo-niveau HTML, les messages sont enregistrés\nà l'aide du niveau INFO.\n\nSi l'argument `console` est vrai ou si le pseudo-niveau CONSOLE est utilisé, le\nmessage est écrit à la fois sur la console et dans le fichier journal. Lorsque vous utilisez le pseudo-niveau\nCONSOLE, le message est enregistré à l'aide du niveau INFO. Si le\nmessage ne doit pas être enregistré dans le fichier journal ou s'il existe des\nbesoins de formatage spéciaux, utilisez plutôt le mot-clé Log To Console.\n\nL'argument `formatter` contrôle la manière de formater la\nreprésentation de chaîne du message. Les valeurs possibles sont `str` (par défaut), `repr`, `ascii`, `len` et\n`type`. Elles fonctionnent de manière similaire aux fonctions intégrées Python portant les mêmes noms. Lorsque vous\nutilisez `repr`, des listes plus grandes, des dictionnaires et d'autres conteneurs sont également\nimprimés de manière à ce qu'il y ait un élément par ligne. Pour plus de détails, consultez Représentations de\nchaîne.\n\nL'ancienne façon de contrôler la représentation de chaîne consistait à utiliser l'argument `repr`.\nCet argument est obsolète et `formatter=repr` doit être utilisé à la place.\n\nExemples :\n\nLog | Bonjour, monde ! | | | # Message INFO normal. \n---|---|---|---|--- \nLog | Avertissement, monde ! | AVERTISSEMENT | | # Avertissement. \nLog | <b>Bonjour</b>, monde ! | html=yes | | # Message INFO au format HTML. \nLog | <b>Bonjour</b>, monde ! | HTML | | # Identique à ci-dessus. \nLog | <b>Bonjour</b>, monde ! | DEBUG | html=true | # DEBUG au format HTML. \nLog | Bonjour, console ! | console=yes | | # Se connecter également à la console. \nLog | Bonjour, console ! | CONSOLE | | # Se connecter également à la console. \nLog | Null est \\x00 | formatter=repr | | # Log `'Null est \\x00''. \n\nConsultez Log Many si vous souhaitez enregistrer plusieurs messages en une seule fois et Log To\nConsole si vous souhaitez uniquement écrire sur la console.\n\nLes options de formatage `type` et `len` sont nouvelles dans Robot Framework 5.0. Le niveau CONSOLE\nest nouveau dans Robot Framework 6.1."
    },
    {
        "name": "Log Many",
        "args": [
            {
                "name": "messages",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*messages"
            }
        ],
        "returnType": null,
        "doc": "<p>Logs the given messages as separate entries using the INFO level.</p>\n<p>Supports also logging list and dictionary variable items individually.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Log Many</td>\n<td>Hello</td>\n<td>${var}</td>\n</tr>\n<tr>\n<td>Log Many</td>\n<td>@{list}</td>\n<td>&amp;{dict}</td>\n</tr>\n</table>\n<p>See <a href=\"#Log\" class=\"name\">Log</a> and <a href=\"#Log%20To%20Console\" class=\"name\">Log To Console</a> keywords if you want to use alternative log levels, use HTML, or log to the console.</p>",
        "shortdoc": "Logs the given messages as separate entries using the INFO level.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3118,
        "doc_fr": "Enregistre les messages donnés sous forme d'entrées séparées à l'aide du niveau INFO.\n\nPrend également en charge la journalisation individuelle des éléments de liste et de variable de dictionnaire.\n\nExemples :\n\nLog Many | Hello | ${var} \n---|---|--- \nLog Many | @{list} | &{dict} \n\nConsultez les mots-clés Log et Log To Console si vous souhaitez utiliser des niveaux de journalisation alternatifs,\nutiliser HTML ou vous connecter à la console."
    },
    {
        "name": "Log To Console",
        "args": [
            {
                "name": "message",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "message"
            },
            {
                "name": "stream",
                "type": null,
                "defaultValue": "STDOUT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "stream=STDOUT"
            },
            {
                "name": "no_newline",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "no_newline=False"
            },
            {
                "name": "format",
                "type": null,
                "defaultValue": "",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "format="
            }
        ],
        "returnType": null,
        "doc": "<p>Logs the given message to the console.</p>\n<p>By default uses the standard output stream. Using the standard error stream is possible by giving the <code>stream</code> argument value <code>STDERR</code> (case-insensitive).</p>\n<p>By default appends a newline to the logged message. This can be disabled by giving the <code>no_newline</code> argument a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>\n<p>By default adds no alignment formatting. The <code>format</code> argument allows, for example, alignment and customized padding of the log message. Please see the <a href=\"https://docs.python.org/3/library/string.html#formatspec\">format specification</a> for detailed alignment possibilities. This argument is new in Robot Framework 5.0.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Log To Console</td>\n<td>Hello, console!</td>\n<td></td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>Hello, stderr!</td>\n<td>STDERR</td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>Message starts here and is</td>\n<td>no_newline=true</td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>continued without newline.</td>\n<td></td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>center message with * pad</td>\n<td>format=*^60</td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>30 spaces before msg starts</td>\n<td>format=&gt;30</td>\n</tr>\n</table>\n<p>This keyword does not log the message to the normal log file. Use <a href=\"#Log\" class=\"name\">Log</a> keyword, possibly with argument <code>console</code>, if that is desired.</p>",
        "shortdoc": "Logs the given message to the console.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3146,
        "doc_fr": "Enregistre le message donné sur la console.\n\nPar défaut, utilise le flux de sortie standard. L'utilisation du flux d'erreur standard est\npossible en donnant à l'argument `stream` la valeur `STDERR` (insensible à la casse).\n\nPar défaut, ajoute une nouvelle ligne au message enregistré. Cela peut être désactivé en\ndonnant à l'argument `no_newline` une valeur true (voir Arguments booléens).\n\nPar défaut, n'ajoute aucun formatage d'alignement. L'argument `format` permet, par\nexemple, l'alignement et le remplissage personnalisé du message de journal. Veuillez consulter la\n[spécification\nde\nformat](https://docs.python.org/3/library/string.html#formatspec) pour\ndes possibilités d'alignement détaillées. Cet argument est nouveau dans Robot Framework 5.0.\n\nExemples :\n\nLog To Console | Hello, console! | \n---|---|--- \nLog To Console | Hello, stderr! | STDERR \nLog To Console | Message begins here and is | no_newline=true \nLog To Console | continué sans nouvelle ligne. | ​​\nLog To Console | centrer le message avec * pad | format=*^60 \nLog To Console | 30 espaces avant le début du message | format=>30 \n\nCe mot-clé n'enregistre pas le message dans le fichier journal normal. Utilisez le mot-clé Log,\néventuellement avec l'argument `console`, si cela est souhaité."
    },
    {
        "name": "Log Variables",
        "args": [
            {
                "name": "level",
                "type": null,
                "defaultValue": "INFO",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "level=INFO"
            }
        ],
        "returnType": null,
        "doc": "<p>Logs all variables in the current scope with given log level.</p>",
        "shortdoc": "Logs all variables in the current scope with given log level.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1545,
        "doc_fr": "Enregistre toutes les variables dans la portée actuelle avec le niveau de journalisation donné."
    },
    {
        "name": "No Operation",
        "args": [],
        "returnType": null,
        "doc": "<p>Does absolutely nothing.</p>",
        "shortdoc": "Does absolutely nothing.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2970,
        "doc_fr": "Ne fait absolument rien."
    },
    {
        "name": "Pass Execution",
        "args": [
            {
                "name": "message",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "message"
            },
            {
                "name": "tags",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*tags"
            }
        ],
        "returnType": null,
        "doc": "<p>Skips rest of the current test, setup, or teardown with PASS status.</p>\n<p>This keyword can be used anywhere in the test data, but the place where used affects the behavior:</p>\n<ul>\n<li>When used in any setup or teardown (suite, test or keyword), passes that setup or teardown. Possible keyword teardowns of the started keywords are executed. Does not affect execution or statuses otherwise.</li>\n<li>When used in a test outside setup or teardown, passes that particular test case. Possible test and keyword teardowns are executed.</li>\n</ul>\n<p>Possible continuable failures before this keyword is used, as well as failures in executed teardowns, will fail the execution.</p>\n<p>It is mandatory to give a message explaining why execution was passed. By default the message is considered plain text, but starting it with <code>*HTML*</code> allows using HTML formatting.</p>\n<p>It is also possible to modify test tags passing tags after the message similarly as with <a href=\"#Fail\" class=\"name\">Fail</a> keyword. Tags starting with a hyphen (e.g. <code>-regression</code>) are removed and others added. Tags are modified using <a href=\"#Set%20Tags\" class=\"name\">Set Tags</a> and <a href=\"#Remove%20Tags\" class=\"name\">Remove Tags</a> internally, and the semantics setting and removing them are the same as with these keywords.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Pass Execution</td>\n<td>All features available in this version tested.</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Pass Execution</td>\n<td>Deprecated test.</td>\n<td>deprecated</td>\n<td>-regression</td>\n</tr>\n</table>\n<p>This keyword is typically wrapped to some other keyword, such as <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a>, to pass based on a condition. The most common case can be handled also with <a href=\"#Pass%20Execution%20If\" class=\"name\">Pass Execution If</a>:</p>\n<table border=\"1\">\n<tr>\n<td>Run Keyword If</td>\n<td>${rc} &lt; 0</td>\n<td>Pass Execution</td>\n<td>Negative values are cool.</td>\n</tr>\n<tr>\n<td>Pass Execution If</td>\n<td>${rc} &lt; 0</td>\n<td>Negative values are cool.</td>\n<td></td>\n</tr>\n</table>\n<p>Passing execution in the middle of a test, setup or teardown should be used with care. In the worst case it leads to tests that skip all the parts that could actually uncover problems in the tested application. In cases where execution cannot continue due to external factors, it is often safer to fail the test case and make it non-critical.</p>",
        "shortdoc": "Skips rest of the current test, setup, or teardown with PASS status.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2896,
        "doc_fr": "Saute le reste du test, de la configuration ou du démontage en cours avec le statut PASS.\n\nCe mot-clé peut être utilisé n'importe où dans les données de test, mais l'endroit où il est utilisé\naffecte le comportement :\n\n* Lorsqu'il est utilisé dans une configuration ou un démontage (suite, test ou mot-clé), il réussit cette configuration ou ce démontage. Les démontages possibles des mots-clés démarrés sont exécutés. N'affecte pas l'exécution ou les statuts autrement.\n* Lorsqu'il est utilisé dans un test en dehors de la configuration ou du démontage, il réussit ce cas de test particulier. Les démontages possibles des tests et des mots-clés sont exécutés.\n\nLes échecs continuables possibles avant que ce mot-clé ne soit utilisé, ainsi que les échecs\ndans les démontages exécutés, feront échouer l'exécution.\n\nIl est obligatoire de fournir un message expliquant pourquoi l'exécution a été réussie. Par\ndéfaut, le message est considéré comme du texte brut, mais le fait de le commencer par `*HTML*`\npermet d'utiliser le formatage HTML.\n\nIl est également possible de modifier les balises de test en passant des balises après le message\nde la même manière qu'avec le mot-clé Fail. Les balises commençant par un tiret (par exemple,\n`-regression`) sont supprimées et d'autres ajoutées. Les balises sont modifiées à l'aide de Set Tags\net Remove Tags en interne, et le paramétrage de la sémantique et leur suppression sont\nles mêmes qu'avec ces mots-clés.\n\nExemples :\n\nPass Execution | Toutes les fonctionnalités disponibles dans cette version ont été testées. | | \n---|---|---|--- \nPass Execution | Test obsolète. | obsolète | -regression \n\nCe mot-clé est généralement enveloppé dans un autre mot-clé, tel que Run Keyword\nIf, pour passer en fonction d'une condition. Le cas le plus courant peut également être traité\navec Pass Execution If :\n\nRun Keyword If | ${rc} < 0 | Pass Execution | Les valeurs négatives sont intéressantes. \n---|---|---|--- \nPass Execution If | ${rc} < 0 | Les valeurs négatives sont intéressantes. | \n\nLe passage de l'exécution au milieu d'un test, d'une configuration ou d'un démontage doit être utilisé\navec précaution. Dans le pire des cas, cela conduit à des tests qui ignorent toutes les parties qui\npourraient réellement révéler des problèmes dans l'application testée. Dans les cas où\nl'exécution ne peut pas continuer en raison de facteurs externes, il est souvent plus sûr de faire échouer\nle cas de test et de le rendre non critique."
    },
    {
        "name": "Pass Execution If",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "message",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "message"
            },
            {
                "name": "tags",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*tags"
            }
        ],
        "returnType": null,
        "doc": "<p>Conditionally skips rest of the current test, setup, or teardown with PASS status.</p>\n<p>A wrapper for <a href=\"#Pass%20Execution\" class=\"name\">Pass Execution</a> to skip rest of the current test, setup or teardown based the given <code>condition</code>. The condition is evaluated similarly as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword, and <code>message</code> and <code>*tags</code> have same semantics as with <a href=\"#Pass%20Execution\" class=\"name\">Pass Execution</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>FOR</td>\n<td>${var}</td>\n<td>IN</td>\n<td>@{VALUES}</td>\n</tr>\n<tr>\n<td></td>\n<td>Pass Execution If</td>\n<td>'${var}' == 'EXPECTED'</td>\n<td>Correct value was found</td>\n</tr>\n<tr>\n<td></td>\n<td>Do Something</td>\n<td>${var}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Conditionally skips rest of the current test, setup, or teardown with PASS status.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2948,
        "doc_fr": "Ignore conditionnellement le reste du test, de la configuration ou du démontage en cours avec le statut PASS\n.\n\nUn wrapper pour l'exécution de Pass pour ignorer le reste du test, de la configuration ou du démontage en cours en fonction de la `condition` donnée. La condition est évaluée de la même manière que\navec le mot-clé Should Be True, et `message` et `*tags` ont la même sémantique que\navec l'exécution de Pass.\n\nExemple :\n\nFOR | ${var} | IN | @{VALUES} \n---|---|---|--- \n| Pass Execution If | '${var}' == 'EXPECTED' | La valeur correcte a été trouvée \n| Do Something | ${var} | \nEND | | | \n\n"
    },
    {
        "name": "Regexp Escape",
        "args": [
            {
                "name": "patterns",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*patterns"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns each argument string escaped for use as a regular expression.</p>\n<p>This keyword can be used to escape strings to be used with <a href=\"#Should%20Match%20Regexp\" class=\"name\">Should Match Regexp</a> and <a href=\"#Should%20Not%20Match%20Regexp\" class=\"name\">Should Not Match Regexp</a> keywords.</p>\n<p>Escaping is done with Python's <code>re.escape()</code> function.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${escaped} =</td>\n<td>Regexp Escape</td>\n<td>${original}</td>\n</tr>\n<tr>\n<td>@{strings} =</td>\n<td>Regexp Escape</td>\n<td>@{strings}</td>\n</tr>\n</table>",
        "shortdoc": "Returns each argument string escaped for use as a regular expression.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3547,
        "doc_fr": "Renvoie chaque chaîne d'argument échappée pour être utilisée comme expression régulière.\n\nCe mot-clé peut être utilisé pour échapper des chaînes à utiliser avec les mots-clés Should Match Regexp\net Should Not Match Regexp.\n\nL'échappement est effectué avec la fonction `re.escape()` de Python.\n\nExemples :\n\n${escaped} = | Regexp Escape | ${original} \n---|---|--- \n@{strings} = | Regexp Escape | @{strings}"
    },
    {
        "name": "Reload Library",
        "args": [
            {
                "name": "name_or_instance",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name_or_instance"
            }
        ],
        "returnType": null,
        "doc": "<p>Rechecks what keywords the specified library provides.</p>\n<p>Can be called explicitly in the test data or by a library itself when keywords it provides have changed.</p>\n<p>The library can be specified by its name or as the active instance of the library. The latter is especially useful if the library itself calls this keyword as a method.</p>",
        "shortdoc": "Rechecks what keywords the specified library provides.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3220,
        "doc_fr": "Revérifie les mots-clés fournis par la bibliothèque spécifiée.\n\nPeut être appelé explicitement dans les données de test ou par une bibliothèque elle-même lorsque les mots-clés\nqu'elle fournit ont changé.\n\nLa bibliothèque peut être spécifiée par son nom ou comme instance active de la\nbibliothèque. Cette dernière option est particulièrement utile si la bibliothèque elle-même appelle ce\nmot-clé comme méthode."
    },
    {
        "name": "Remove Tags",
        "args": [
            {
                "name": "tags",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*tags"
            }
        ],
        "returnType": null,
        "doc": "<p>Removes given <code>tags</code> from the current test or all tests in a suite.</p>\n<p>Tags can be given exactly or using a pattern with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for more information.</p>\n<p>This keyword can affect either one test case or all test cases in a test suite similarly as <a href=\"#Set%20Tags\" class=\"name\">Set Tags</a> keyword.</p>\n<p>The current tags are available as a built-in variable <code>@{TEST TAGS}</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Tags</td>\n<td>mytag</td>\n<td>something-*</td>\n<td>?ython</td>\n</tr>\n</table>\n<p>See <a href=\"#Set%20Tags\" class=\"name\">Set Tags</a> if you want to add certain tags and <a href=\"#Fail\" class=\"name\">Fail</a> if you want to fail the test case after setting and/or removing tags.</p>",
        "shortdoc": "Removes given ``tags`` from the current test or all tests in a suite.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3705,
        "doc_fr": "Supprime les « tags » donnés du test actuel ou de tous les tests d'une suite.\n\nLes tags peuvent être donnés exactement ou en utilisant un modèle avec « * », « ? » et « [chars] »\nagissant comme des caractères génériques. Consultez la section Modèles Glob pour plus d'informations.\n\nCe mot-clé peut affecter soit un cas de test, soit tous les cas de test d'une suite de tests\nde la même manière que le mot-clé Set Tags.\n\nLes balises actuelles sont disponibles sous la forme d'une variable intégrée « @{TEST TAGS} ».\n\nExemple :\n\nSupprimer les balises | montag | quelque chose-* | ?ython \n---|---|---|--- \n\nConsultez Définir les balises si vous souhaitez ajouter certaines balises et Échec si vous souhaitez faire échouer le\ncas de test après avoir défini et/ou supprimé des balises."
    },
    {
        "name": "Repeat Keyword",
        "args": [
            {
                "name": "repeat",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "repeat"
            },
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Executes the specified keyword multiple times.</p>\n<p><code>name</code> and <code>args</code> define the keyword that is executed similarly as with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>. <code>repeat</code> specifies how many times (as a count) or how long time (as a timeout) the keyword should be executed.</p>\n<p>If <code>repeat</code> is given as count, it specifies how many times the keyword should be executed. <code>repeat</code> can be given as an integer or as a string that can be converted to an integer. If it is a string, it can have postfix <code>times</code> or <code>x</code> (case and space insensitive) to make the expression more explicit.</p>\n<p>If <code>repeat</code> is given as timeout, it must be in Robot Framework's time format (e.g. <code>1 minute</code>, <code>2 min 3 s</code>). Using a number alone (e.g. <code>1</code> or <code>1.5</code>) does not work in this context.</p>\n<p>If <code>repeat</code> is zero or negative, the keyword is not executed at all. This keyword fails immediately if any of the execution rounds fails.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Repeat Keyword</td>\n<td>5 times</td>\n<td>Go to Previous Page</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Repeat Keyword</td>\n<td>${var}</td>\n<td>Some Keyword</td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td>Repeat Keyword</td>\n<td>2 minutes</td>\n<td>Some Keyword</td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n</table>",
        "shortdoc": "Executes the specified keyword multiple times.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2275,
        "doc_fr": "Exécute le mot-clé spécifié plusieurs fois.\n\n`name` et `args` définissent le mot-clé qui est exécuté de la même manière qu'avec Run\nKeyword. `repeat` spécifie combien de fois (sous forme de nombre) ou combien de temps (sous forme de\ntimeout) le mot-clé doit être exécuté.\n\nSi `repeat` est donné sous forme de nombre, il spécifie combien de fois le mot-clé\ndoit être exécuté. `repeat` peut être donné sous forme d'entier ou de chaîne qui peut\nêtre convertie en entier. S'il s'agit d'une chaîne, elle peut avoir le suffixe `times` ou `x`\n(insensible à la casse et à l'espace) pour rendre l'expression plus explicite.\n\nSi `repeat` est donné sous forme de timeout, il doit être au format horaire de Robot Framework\n(par exemple `1 minute`, `2 min 3 s`). L'utilisation d'un nombre seul (par exemple `1` ou `1,5`) ne\nfonctionne pas dans ce contexte.\n\nSi `repeat` est nul ou négatif, le mot clé n'est pas exécuté du tout. Ce\nmot clé échoue immédiatement si l'un des cycles d'exécution échoue.\n\nExemples :\n\nMot clé Répéter | 5 fois | Aller à la page précédente | | \n---|---|---|---|--- \nMot clé Répéter | ${var} | Un mot clé | arg1 | arg2 \nMot clé Répéter | 2 minutes | Un mot clé | arg1 | arg2"
    },
    {
        "name": "Replace Variables",
        "args": [
            {
                "name": "text",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text"
            }
        ],
        "returnType": null,
        "doc": "<p>Replaces variables in the given text with their current values.</p>\n<p>If the text contains undefined variables, this keyword fails. If the given <code>text</code> contains only a single variable, its value is returned as-is and it can be any object. Otherwise, this keyword always returns a string.</p>\n<p>Example:</p>\n<p>The file <code>template.txt</code> contains <code>Hello ${NAME}!</code> and variable <code>${NAME}</code> has the value <code>Robot</code>.</p>\n<table border=\"1\">\n<tr>\n<td>${template} =</td>\n<td>Get File</td>\n<td>${CURDIR}/template.txt</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Replace Variables</td>\n<td>${template}</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${message}</td>\n<td>Hello Robot!</td>\n</tr>\n</table>",
        "shortdoc": "Replaces variables in the given text with their current values.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1611,
        "doc_fr": "Remplace les variables dans le texte donné par leurs valeurs actuelles.\n\nSi le texte contient des variables non définies, ce mot-clé échoue. Si le texte donné ne contient qu'une seule variable, sa valeur est renvoyée telle quelle et elle peut être n'importe quel objet. Sinon, ce mot-clé renvoie toujours une chaîne.\n\nExemple :\n\nLe fichier `template.txt` contient `Hello ${NAME}!` et la variable `${NAME}` a\nla valeur `Robot`.\n\n${template} = | Obtenir le fichier | ${CURDIR}/template.txt \n---|---|--- \n${message} = | Remplacer les variables | ${template} \nDoit être égal | ${message} | Bonjour Robot !"
    },
    {
        "name": "Reset Log Level",
        "args": [],
        "returnType": null,
        "doc": "<p>Resets the log level to the original value.</p>\n<p>The original log level is set from the command line with the <code>--loglevel</code> option and is INFO by default. The active log level can be changed using the <a href=\"#Set%20Log%20Level\" class=\"name\">Set Log Level</a> keyword.</p>\n<p>New in Robot Framework 7.0.</p>",
        "shortdoc": "Resets the log level to the original value.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3208,
        "doc_fr": "Réinitialise le niveau de journalisation à la valeur d'origine.\n\nLe niveau de journalisation d'origine est défini à partir de la ligne de commande avec l'option `--loglevel`\net est INFO par défaut. Le niveau de journalisation actif peut être modifié à l'aide du mot-clé\nSet Log Level.\n\nNouveau dans Robot Framework 7.0."
    },
    {
        "name": "Return From Keyword",
        "args": [
            {
                "name": "return_values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*return_values"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns from the enclosing user keyword.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>RETURN</code> statement that is recommended over this keyword. In the examples below, <code>Return From Keyword</code> can simply be replaced with <code>RETURN</code>. In addition to that, native <code>IF</code> syntax (new in RF 4.0) or inline <code>IF</code> syntax (new in RF 5.0) can be used instead of <code>Run Keyword If</code>. For example, the first example below could be written like this instead:</p>\n<pre>\nIF    ${rc} &lt; 0    RETURN\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>This keyword can be used to return from a user keyword with PASS status without executing it fully. It is also possible to return values similarly as with the <code>[Return]</code> setting. For more detailed information about working with the return values, see the User Guide.</p>\n<p>This keyword is typically wrapped to some other keyword, such as <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a>, to return based on a condition:</p>\n<pre>\nRun Keyword If    ${rc} &lt; 0    Return From Keyword\n</pre>\n<p>It is possible to use this keyword to return from a keyword also inside a for loop. That, as well as returning values, is demonstrated by the <span class=\"name\">Find Index</span> keyword in the following somewhat advanced example. Notice that it is often a good idea to move this kind of complicated logic into a library.</p>\n<pre>\n<b>***</b> Variables <b>***</b>\n@{LIST} =    foo    baz\n\n<b>***</b> Test Cases <b>***</b>\nExample\n    ${index} =    Find Index    baz    @{LIST}\n    Should Be Equal    ${index}    ${1}\n    ${index} =    Find Index    non existing    @{LIST}\n    Should Be Equal    ${index}    ${-1}\n\n<b>***</b> Keywords <b>***</b>\nFind Index\n   [Arguments]    ${element}    @{items}\n   ${index} =    Set Variable    ${0}\n   FOR    ${item}    IN    @{items}\n       Run Keyword If    '${item}' == '${element}'    Return From Keyword    ${index}\n       ${index} =    Set Variable    ${index + 1}\n   END\n   Return From Keyword    ${-1}\n</pre>\n<p>The most common use case, returning based on an expression, can be accomplished directly with <a href=\"#Return%20From%20Keyword%20If\" class=\"name\">Return From Keyword If</a>. See also <a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a> and <a href=\"#Run%20Keyword%20And%20Return%20If\" class=\"name\">Run Keyword And Return If</a>.</p>",
        "shortdoc": "Returns from the enclosing user keyword.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2748,
        "doc_fr": "Renvoie à partir du mot-clé utilisateur englobant.\n\n* * *\n\n**REMARQUE :** Robot Framework 5.0 a ajouté la prise en charge de l'instruction native `RETURN` qui\nest recommandée par rapport à ce mot-clé. Dans les exemples ci-dessous, `Return From Keyword`\npeut simplement être remplacé par `RETURN`. En plus de cela, la syntaxe native `IF`\n(nouveau dans RF 4.0) ou la syntaxe `IF` en ligne (nouveau dans RF 5.0) peut être utilisée à la place de\n`Run Keyword If`. Par exemple, le premier exemple ci-dessous pourrait être écrit comme\nceci :\n\nIF ${rc} < 0 RETURN\n\nCe mot-clé sera éventuellement obsolète et supprimé.\n\n* * *\n\nCe mot-clé peut être utilisé pour renvoyer à partir d'un mot-clé utilisateur avec le statut PASS\nsans l'exécuter complètement. Il est également possible de renvoyer des valeurs de la même manière\nqu'avec le paramètre `[Return]`. Pour des informations plus détaillées sur l'utilisation\ndes valeurs de retour, consultez le Guide de l'utilisateur.\n\nCe mot-clé est généralement enveloppé dans un autre mot-clé, tel que Run Keyword\nIf, pour renvoyer en fonction d'une condition :\n\nRun Keyword If ${rc} < 0 Return From Keyword\n\nIl est possible d'utiliser ce mot-clé pour renvoyer à partir d'un mot-clé également à l'intérieur d'une boucle for\n. Cela, ainsi que le renvoi de valeurs, est démontré par le mot-clé Find Index\ndans l'exemple quelque peu avancé suivant. Notez que c'est souvent une\nbonne idée de déplacer ce type de logique compliquée dans une bibliothèque.\n\n******* Variables *******\n@{LIST} = foo baz\n\n******* Cas de test *******\nExemple\n${index} = Rechercher l'index baz @{LIST}\nDoit être égal à ${index} ${1}\n${index} = Rechercher l'index non existant @{LIST}\nDoit être égal à ${index} ${-1}\n\n******* Mots-clés *******\nRechercher l'index\n[Arguments] ${element} @{items}\n${index} = Définir la variable ${0}\nPOUR ${item} DANS @{items}\nExécuter le mot-clé si '${item}' == '${element}' Renvoyer depuis le mot-clé ${index}\n${index} = Définir la variable ${index + 1}\nFIN\nRenvoyer depuis le mot-clé ${-1}\n\nLe cas d'utilisation le plus courant, le retour basé sur une expression, peut être\nréalisé directement avec Renvoyer depuis le mot-clé si. Voir également Exécuter le mot-clé et\nRetourner et Exécuter le mot-clé et retourner si."
    },
    {
        "name": "Return From Keyword If",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "return_values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*return_values"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns from the enclosing user keyword if <code>condition</code> is true.</p>\n<hr>\n<p><b>NOTE:</b> Robot Framework 5.0 added support for native <code>RETURN</code> statement and for inline <code>IF</code>, and that combination should be used instead of this keyword. For example, <code>Return From Keyword</code> usage in the example below could be replaced with</p>\n<pre>\nIF    '${item}' == '${element}'    RETURN    ${index}\n</pre>\n<p>This keyword will eventually be deprecated and removed.</p>\n<hr>\n<p>A wrapper for <a href=\"#Return%20From%20Keyword\" class=\"name\">Return From Keyword</a> to return based on the given condition. The condition is evaluated using the same semantics as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword.</p>\n<p>Given the same example as in <a href=\"#Return%20From%20Keyword\" class=\"name\">Return From Keyword</a>, we can rewrite the <span class=\"name\">Find Index</span> keyword as follows:</p>\n<pre>\n<b>***</b> Keywords <b>***</b>\nFind Index\n   [Arguments]    ${element}    @{items}\n   ${index} =    Set Variable    ${0}\n   FOR    ${item}    IN    @{items}\n       Return From Keyword If    '${item}' == '${element}'    ${index}\n       ${index} =    Set Variable    ${index + 1}\n   END\n   Return From Keyword    ${-1}\n</pre>\n<p>See also <a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a> and <a href=\"#Run%20Keyword%20And%20Return%20If\" class=\"name\">Run Keyword And Return If</a>.</p>",
        "shortdoc": "Returns from the enclosing user keyword if ``condition`` is true.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2813,
        "doc_fr": "Renvoie le mot-clé utilisateur englobant si « condition » est vrai.\n\n* * *\n\n**REMARQUE :** Robot Framework 5.0 a ajouté la prise en charge de l'instruction native « RETURN » et\nde « IF » en ligne, et cette combinaison doit être utilisée à la place de ce mot-clé.\nPar exemple, l'utilisation de « Return From Keyword » dans l'exemple ci-dessous pourrait être\nremplacée par\n\nIF '${item}' == '${element}' RETURN ${index}\n\nCe mot-clé sera éventuellement obsolète et supprimé.\n\n* * *\n\nUn wrapper pour le mot-clé Return From à renvoyer en fonction de la condition donnée. La\ncondition est évaluée à l'aide de la même sémantique qu'avec le mot-clé Should Be True\n.\n\nÉtant donné le même exemple que dans Return From Keyword, nous pouvons réécrire le mot-clé Find\nIndex comme suit :\n\n******* Keywords *******\nFind Index\n[Arguments] ${element} @{items}\n${index} = Set Variable ${0}\nFOR ${item} IN @{items}\nReturn From Keyword If '${item}' == '${element}' ${index}\n${index} = Set Variable ${index + 1}\nEND\nReturn From Keyword ${-1}\n\nVoir également Exécuter le mot-clé et retourner et Exécuter le mot-clé et retourner si."
    },
    {
        "name": "Run Keyword",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Executes the given keyword with the given arguments.</p>\n<p>Because the name of the keyword to execute is given as an argument, it can be a variable and thus set dynamically, e.g. from a return value of another keyword or from the command line.</p>",
        "shortdoc": "Executes the given keyword with the given arguments.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1904,
        "doc_fr": "Exécute le mot-clé donné avec les arguments donnés.\n\nÉtant donné que le nom du mot-clé à exécuter est donné comme argument, il peut être\nune variable et donc défini de manière dynamique, par exemple à partir d'une valeur de retour d'un autre\nmot-clé ou à partir de la ligne de commande.\n\n"
    },
    {
        "name": "Run Keyword And Continue On Failure",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the keyword and continues execution even if a failure occurs.</p>\n<p>The keyword name and arguments work as with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Run Keyword And Continue On Failure</td>\n<td>Fail</td>\n<td>This is a stupid example</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>This keyword is executed</td>\n<td></td>\n</tr>\n</table>\n<p>The execution is not continued if the failure is caused by invalid syntax, timeout, or fatal exception.</p>",
        "shortdoc": "Runs the keyword and continues execution even if a failure occurs.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2181,
        "doc_fr": "Exécute le mot-clé et continue l'exécution même en cas d'échec.\n\nLe nom du mot-clé et les arguments fonctionnent comme avec Exécuter le mot-clé.\n\nExemple :\n\nExécuter le mot-clé et continuer en cas d'échec | Échec | C'est un exemple stupide \n---|---|--- \nJournal | Ce mot-clé est exécuté | \n\nL'exécution n'est pas poursuivie si l'échec est causé par une syntaxe non valide,\nun dépassement de délai ou une exception fatale."
    },
    {
        "name": "Run Keyword And Expect Error",
        "args": [
            {
                "name": "expected_error",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected_error"
            },
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the keyword and checks that the expected error occurred.</p>\n<p>The keyword to execute and its arguments are specified using <code>name</code> and <code>*args</code> exactly like with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>.</p>\n<p>The expected error must be given in the same format as in Robot Framework reports. By default it is interpreted as a glob pattern with <code>*</code>, <code>?</code> and <code>[chars]</code> as wildcards, but that can be changed by using various prefixes explained in the table below. Prefixes are case-sensitive and they must be separated from the actual message with a colon and an optional space like <code>PREFIX: Message</code> or <code>PREFIX:Message</code>.</p>\n<table border=\"1\">\n<tr>\n<th>Prefix</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td><code>EQUALS</code></td>\n<td>Exact match. Especially useful if the error contains glob wildcards.</td>\n</tr>\n<tr>\n<td><code>STARTS</code></td>\n<td>Error must start with the specified error.</td>\n</tr>\n<tr>\n<td><code>REGEXP</code></td>\n<td>Regular expression match.</td>\n</tr>\n<tr>\n<td><code>GLOB</code></td>\n<td>Same as the default behavior.</td>\n</tr>\n</table>\n<p>See the <a href=\"#Pattern%20matching\" class=\"name\">Pattern matching</a> section for more information about glob patterns and regular expressions.</p>\n<p>If the expected error occurs, the error message is returned and it can be further processed or tested if needed. If there is no error, or the error does not match the expected error, this keyword fails.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Run Keyword And Expect Error</td>\n<td>My error</td>\n<td>Keyword</td>\n<td>arg</td>\n</tr>\n<tr>\n<td>Run Keyword And Expect Error</td>\n<td>ValueError: *</td>\n<td>Some Keyword</td>\n<td></td>\n</tr>\n<tr>\n<td>Run Keyword And Expect Error</td>\n<td>STARTS: ValueError:</td>\n<td>Some Keyword</td>\n<td></td>\n</tr>\n<tr>\n<td>Run Keyword And Expect Error</td>\n<td>EQUALS:No match for '//input[@type=\"text\"]'</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>Find Element</td>\n<td>//input[@type=\"text\"]</td>\n<td></td>\n</tr>\n<tr>\n<td>${msg} =</td>\n<td>Run Keyword And Expect Error</td>\n<td>*</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>Keyword</td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td>Log To Console</td>\n<td>${msg}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Errors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword.</p>\n<p><b>NOTE:</b> Regular expression matching used to require only the beginning of the error to match the given pattern. That was changed in Robot Framework 5.0 and nowadays the pattern must match the error fully. To match only the beginning, add <code>.*</code> at the end of the pattern like <code>REGEXP: Start.*</code>.</p>\n<p><b>NOTE:</b> Robot Framework 5.0 introduced native TRY/EXCEPT functionality that is generally recommended for error handling. It supports same pattern matching syntax as this keyword.</p>",
        "shortdoc": "Runs the keyword and checks that the expected error occurred.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2201,
        "doc_fr": "Exécute le mot-clé et vérifie que l'erreur attendue s'est produite.\n\nLe mot-clé à exécuter et ses arguments sont spécifiés à l'aide de `name` et\n`*args` exactement comme avec Run Keyword.\n\nL'erreur attendue doit être donnée dans le même format que dans les\nrapports de Robot Framework. Par défaut, elle est interprétée comme un modèle global avec `*`, `?` et\n`[chars]` comme caractères génériques, mais cela peut être modifié en utilisant divers\npréfixes expliqués dans le tableau ci-dessous. Les préfixes sont sensibles à la casse et doivent être\nséparés du message réel par deux points et un espace facultatif comme\n`PREFIX: Message` ou `PREFIX:Message`.\n\nPréfixe | Explication \n---|--- \n`EQUALS` | Correspondance exacte. Particulièrement utile si l'erreur contient des caractères génériques glob. \n`STARTS` | L'erreur doit commencer par l'erreur spécifiée. \n`REGEXP` | Correspondance d'expression régulière.\n`GLOB` | Même comportement que le comportement par défaut. \n\nVoir la section Correspondance de motifs pour plus d'informations sur les motifs glob et\nles expressions régulières.\n\nSi l'erreur attendue se produit, le message d'erreur est renvoyé et il peut être\ntraité ou testé ultérieurement si nécessaire. S'il n'y a pas d'erreur ou si l'erreur\nne correspond pas à l'erreur attendue, ce mot-clé échoue.\n\nExemples :\n\nExécuter le mot-clé et s'attendre à une erreur | Mon erreur | Mot-clé | arg \n---|---|---|--- \nExécuter le mot-clé et s'attendre à une erreur | ValueError: * | Some Keyword | \nExécuter le mot-clé et s'attendre à une erreur | STARTS: ValueError: | Some Keyword | \nExécuter le mot-clé et s'attendre à une erreur | EQUALS:Aucune correspondance pour '//input[@type=\"text\"]' | | \n... | Rechercher un élément | //input[@type=\"text\"] | \n${msg} = | Exécuter le mot-clé et s'attendre à une erreur | * | \n... | Mot-clé | arg1 | arg2 \nLog To Console | ${msg} | | \n\nLes erreurs causées par une syntaxe non valide, des dépassements de délai ou des exceptions fatales ne sont pas détectées\npar ce mot-clé.\n\n**REMARQUE :** la correspondance d'expression régulière nécessitait auparavant uniquement le\ndébut de l'erreur pour correspondre au modèle donné. Cela a été modifié dans Robot Framework 5.0\net de nos jours, le modèle doit correspondre entièrement à l'erreur. Pour correspondre uniquement au\ndébut, ajoutez `.*` à la fin du modèle comme `REGEXP: Start.*`.\n\n**REMARQUE :** Robot Framework 5.0 a introduit la fonctionnalité TRY/EXCEPT native qui\nest généralement recommandée pour la gestion des erreurs. Elle prend en charge la même syntaxe de\ncorrespondance de modèle que ce mot-clé."
    },
    {
        "name": "Run Keyword And Ignore Error",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the given keyword with the given arguments and ignores possible error.</p>\n<p>This keyword returns two values, so that the first is either string <code>PASS</code> or <code>FAIL</code>, depending on the status of the executed keyword. The second value is either the return value of the keyword or the received error message. See <a href=\"#Run%20Keyword%20And%20Return%20Status\" class=\"name\">Run Keyword And Return Status</a> If you are only interested in the execution status.</p>\n<p>The keyword name and arguments work as in <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>. See <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> for a usage example.</p>\n<p>Errors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Otherwise this keyword itself never fails.</p>\n<p><b>NOTE:</b> Robot Framework 5.0 introduced native TRY/EXCEPT functionality that is generally recommended for error handling.</p>",
        "shortdoc": "Runs the given keyword with the given arguments and ignores possible error.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2115,
        "doc_fr": "Exécute le mot-clé donné avec les arguments donnés et ignore les erreurs possibles.\n\nCe mot-clé renvoie deux valeurs, de sorte que la première est soit la chaîne `PASS` ou\n`FAIL`, selon l'état du mot-clé exécuté. La deuxième valeur est\nsoit la valeur de retour du mot-clé, soit le message d'erreur reçu. Voir Mot-clé\nd'exécution et état de retour si vous n'êtes intéressé que par l'état d'exécution.\n\nLe nom du mot-clé et les arguments fonctionnent comme dans Mot-clé d'exécution. Voir Mot-clé d'exécution si\npour un exemple d'utilisation.\n\nLes erreurs causées par une syntaxe non valide, des dépassements de délai ou des exceptions fatales ne sont pas\ncaptées par ce mot-clé. Sinon, ce mot-clé lui-même n'échoue jamais.\n\n**REMARQUE :** Robot Framework 5.0 a introduit une fonctionnalité TRY/EXCEPT native qui\nest généralement recommandée pour la gestion des erreurs."
    },
    {
        "name": "Run Keyword And Return",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the specified keyword and returns from the enclosing user keyword.</p>\n<p>The keyword to execute is defined with <code>name</code> and <code>*args</code> exactly like with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>. After running the keyword, returns from the enclosing user keyword and passes possible return value from the executed keyword further. Returning from a keyword has exactly same semantics as with <a href=\"#Return%20From%20Keyword\" class=\"name\">Return From Keyword</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a></td>\n<td><span class=\"name\">My Keyword</span></td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td># Above is equivalent to:</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><span class=\"name\">My Keyword</span></td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td><a href=\"#Return%20From%20Keyword\" class=\"name\">Return From Keyword</a></td>\n<td>${result}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Use <a href=\"#Run%20Keyword%20And%20Return%20If\" class=\"name\">Run Keyword And Return If</a> if you want to run keyword and return based on a condition.</p>",
        "shortdoc": "Runs the specified keyword and returns from the enclosing user keyword.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2852,
        "doc_fr": "Exécute le mot-clé spécifié et renvoie à partir du mot-clé utilisateur englobant.\n\nLe mot-clé à exécuter est défini avec `name` et `*args` exactement comme avec\nRun Keyword. Après avoir exécuté le mot-clé, renvoie à partir du mot-clé utilisateur englobant\net transmet la valeur de retour possible du mot-clé exécuté plus loin.\nLe retour à partir d'un mot-clé a exactement la même sémantique qu'avec Return From\nKeyword.\n\nExemple :\n\nRun Keyword And Return | My Keyword | arg1 | arg2 \n---|---|---|--- \n# Ci-dessus est équivalent à : | | | \n${result} = | My Keyword | arg1 | arg2 \nReturn From Keyword | ${result} | | \n\nUtilisez Run Keyword And Return If si vous souhaitez exécuter le mot-clé et renvoyer en fonction d'une\ncondition."
    },
    {
        "name": "Run Keyword And Return If",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the specified keyword and returns from the enclosing user keyword.</p>\n<p>A wrapper for <a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a> to run and return based on the given <code>condition</code>. The condition is evaluated using the same semantics as with <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20And%20Return%20If\" class=\"name\">Run Keyword And Return If</a></td>\n<td>${rc} &gt; 0</td>\n<td><span class=\"name\">My Keyword</span></td>\n<td>arg1</td>\n<td>arg2</td>\n<td></td>\n</tr>\n<tr>\n<td># Above is equivalent to:</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>${rc} &gt; 0</td>\n<td><a href=\"#Run%20Keyword%20And%20Return\" class=\"name\">Run Keyword And Return</a></td>\n<td><span class=\"name\">My Keyword </span></td>\n<td>arg1</td>\n<td>arg2</td>\n</tr>\n</table>\n<p>Use <a href=\"#Return%20From%20Keyword%20If\" class=\"name\">Return From Keyword If</a> if you want to return a certain value based on a condition.</p>",
        "shortdoc": "Runs the specified keyword and returns from the enclosing user keyword.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2878,
        "doc_fr": "Exécute le mot clé spécifié et renvoie le mot clé utilisateur englobant.\n\nUn wrapper pour Run Keyword And Return à exécuter et renvoyer en fonction de la\n`condition` donnée. La condition est évaluée à l'aide de la même sémantique qu'avec le mot clé\nShould Be True.\n\nExemple :\n\nRun Keyword And Return If | ${rc} > 0 | My Keyword | arg1 | arg2 | \n---|---|---|---|---|--- \n# Ci-dessus est équivalent à : | | | | | \nRun Keyword If | ${rc} > 0 | Run Keyword And Return | My Keyword | arg1 | arg2 \n\nUtilisez Return From Keyword If si vous souhaitez renvoyer une certaine valeur en fonction d'une\ncondition."
    },
    {
        "name": "Run Keyword And Return Status",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the given keyword with given arguments and returns the status as a Boolean value.</p>\n<p>This keyword returns Boolean <code>True</code> if the keyword that is executed succeeds and <code>False</code> if it fails. This is useful, for example, in combination with <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a>. If you are interested in the error message or return value, use <a href=\"#Run%20Keyword%20And%20Ignore%20Error\" class=\"name\">Run Keyword And Ignore Error</a> instead.</p>\n<p>The keyword name and arguments work as in <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${passed} =</td>\n<td><a href=\"#Run%20Keyword%20And%20Return%20Status\" class=\"name\">Run Keyword And Return Status</a></td>\n<td>Keyword</td>\n<td>args</td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>${passed}</td>\n<td>Another keyword</td>\n<td></td>\n</tr>\n</table>\n<p>Errors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Otherwise this keyword itself never fails.</p>",
        "shortdoc": "Runs the given keyword with given arguments and returns the status as a Boolean value.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2160,
        "doc_fr": "Exécute le mot-clé donné avec les arguments donnés et renvoie l'état sous forme de\nvaleur booléenne.\n\nCe mot-clé renvoie la valeur booléenne « True » si le mot-clé exécuté réussit\net « False » s'il échoue. Ceci est utile, par exemple, en combinaison avec Run\nKeyword If. Si vous êtes intéressé par le message d'erreur ou la valeur de retour, utilisez plutôt Run\nKeyword And Ignore Error.\n\nLe nom du mot-clé et les arguments fonctionnent comme dans Run Keyword.\n\nExemple :\n\n${passed} = | Run Keyword And Return Status | Keyword | args \n---|---|---|--- \nRun Keyword If | ${passed} | Another keyword | \n\nLes erreurs causées par une syntaxe non valide, des dépassements de délai ou des exceptions fatales ne sont pas détectées\npar ce mot-clé. Sinon, ce mot-clé lui-même n'échoue jamais."
    },
    {
        "name": "Run Keyword And Warn On Failure",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the specified keyword logs a warning if the keyword fails.</p>\n<p>This keyword is similar to <a href=\"#Run%20Keyword%20And%20Ignore%20Error\" class=\"name\">Run Keyword And Ignore Error</a> but if the executed keyword fails, the error message is logged as a warning to make it more visible. Returns status and possible return value or error message exactly like <a href=\"#Run%20Keyword%20And%20Ignore%20Error\" class=\"name\">Run Keyword And Ignore Error</a> does.</p>\n<p>Errors caused by invalid syntax, timeouts, or fatal exceptions are not caught by this keyword. Otherwise this keyword itself never fails.</p>\n<p>New in Robot Framework 4.0.</p>",
        "shortdoc": "Runs the specified keyword logs a warning if the keyword fails.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2141,
        "doc_fr": "Exécute le mot-clé spécifié et enregistre un avertissement si le mot-clé échoue.\n\nCe mot-clé est similaire à Run Keyword And Ignore Error mais si le mot-clé exécuté échoue, le message d'erreur est enregistré sous forme d'avertissement pour le rendre plus\nvisible. Renvoie l'état et la valeur de retour possible ou le message d'erreur exactement\ncomme le fait Run Keyword And Ignore Error.\n\nLes erreurs causées par une syntaxe non valide, des dépassements de délai ou des exceptions fatales ne sont pas\ncaptées par ce mot-clé. Sinon, ce mot-clé lui-même n'échoue jamais.\n\nNouveau dans Robot Framework 4.0."
    },
    {
        "name": "Run Keyword If",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the given keyword with the given arguments, if <code>condition</code> is true.</p>\n<p><b>NOTE:</b> Robot Framework 4.0 introduced built-in IF/ELSE support and using that is generally recommended over using this keyword.</p>\n<p>The given <code>condition</code> is evaluated in Python as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section, and <code>name</code> and <code>*args</code> have same semantics as with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>.</p>\n<p>Example, a simple if/else construct:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>'${status}' == 'OK'</td>\n<td>Some Action</td>\n<td>arg</td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>'${status}' != 'OK'</td>\n<td>Another Action</td>\n<td></td>\n</tr>\n</table>\n<p>In this example, only either <code>Some Action</code> or <code>Another Action</code> is executed, based on the value of the <code>${status}</code> variable.</p>\n<p>Variables used like <code>${variable}</code>, as in the examples above, are replaced in the expression before evaluation. Variables are also available in the evaluation namespace and can be accessed using special <code>$variable</code> syntax as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>$result is None or $result == 'FAIL'</td>\n<td>Keyword</td>\n</tr>\n</table>\n<p>This keyword supports also optional ELSE and ELSE IF branches. Both of them are defined in <code>*args</code> and must use exactly format <code>ELSE</code> or <code>ELSE IF</code>, respectively. ELSE branches must contain first the name of the keyword to execute and then its possible arguments. ELSE IF branches must first contain a condition, like the first argument to this keyword, and then the keyword to execute and its possible arguments. It is possible to have ELSE branch after ELSE IF and to have multiple ELSE IF branches. Nested <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> usage is not supported when using ELSE and/or ELSE IF branches.</p>\n<p>Given previous example, if/else construct can also be created like this:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>'${status}' == 'PASS'</td>\n<td>Some Action</td>\n<td>arg</td>\n<td>ELSE</td>\n<td>Another Action</td>\n</tr>\n</table>\n<p>The return value of this keyword is the return value of the actually executed keyword or Python <code>None</code> if no keyword was executed (i.e. if <code>condition</code> was false). Hence, it is recommended to use ELSE and/or ELSE IF branches to conditionally assign return values from keyword to variables (see <a href=\"#Set%20Variable%20If\" class=\"name\">Set Variable If</a> you need to set fixed values conditionally). This is illustrated by the example below:</p>\n<table border=\"1\">\n<tr>\n<td>${var1} =</td>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>${rc} == 0</td>\n<td>Some keyword returning a value</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>ELSE IF</td>\n<td>0 &lt; ${rc} &lt; 42</td>\n<td>Another keyword</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>ELSE IF</td>\n<td>${rc} &lt; 0</td>\n<td>Another keyword with args</td>\n<td>${rc}</td>\n<td>arg2</td>\n</tr>\n<tr>\n<td>...</td>\n<td>ELSE</td>\n<td>Final keyword to handle abnormal cases</td>\n<td>${rc}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${var2} =</td>\n<td><a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a></td>\n<td>${condition}</td>\n<td>Some keyword</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>In this example, ${var2} will be set to <code>None</code> if ${condition} is false.</p>\n<p>Notice that <code>ELSE</code> and <code>ELSE IF</code> control words must be used explicitly and thus cannot come from variables. If you need to use literal <code>ELSE</code> and <code>ELSE IF</code> strings as arguments, you can escape them with a backslash like <code>\\ELSE</code> and <code>\\ELSE IF</code>.</p>",
        "shortdoc": "Runs the given keyword with the given arguments, if ``condition`` is true.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2021,
        "doc_fr": "Exécute le mot-clé donné avec les arguments donnés, si `condition` est vrai.\n\n**REMARQUE :** Robot Framework 4.0 a introduit la prise en charge intégrée IF/ELSE et son utilisation\nqui est généralement recommandée par rapport à l'utilisation de ce mot-clé.\n\nLa `condition` donnée est évaluée en Python comme expliqué dans la section Évaluation\ndes expressions, et `name` et `*args` ont la même sémantique qu'avec Run\nKeyword.\n\nExemple, une construction if/else simple :\n\nRun Keyword If | '${status}' == 'OK' | Some Action | arg \n---|---|---|--- \nRun Keyword If | '${status}' != 'OK' | Another Action | \n\nDans cet exemple, seule `Some Action` ou `Another Action` est exécutée,\nen fonction de la valeur de la variable `${status}`.\n\nLes variables utilisées comme `${variable}`, comme dans les exemples ci-dessus, sont remplacées dans\nl'expression avant l'évaluation. Les variables sont également disponibles dans\nl'espace de noms d'évaluation et peuvent être consultées à l'aide de la syntaxe spéciale `$variable` comme\nexpliqué dans la section Évaluation des expressions.\n\nExemple :\n\nExécuter le mot-clé If | $result is None or $result == 'FAIL' | Mot-clé \n---|---|--- \n\nCe mot-clé prend également en charge les branches facultatives ELSE et ELSE IF. Les deux\nsont définies dans `*args` et doivent utiliser exactement le format `ELSE` ou `ELSE IF`,\nrespectivement. Les branches ELSE doivent contenir d'abord le nom du mot-clé à\nexécuter, puis ses arguments éventuels. Les branches ELSE IF doivent d'abord contenir une\ncondition, comme le premier argument de ce mot-clé, puis le mot-clé à\nexécuter et ses arguments éventuels. Il est possible d'avoir une branche ELSE après\nELSE IF et d'avoir plusieurs branches ELSE IF. L'utilisation du mot-clé imbriqué Run If n'est\npas prise en charge lors de l'utilisation des branches ELSE et/ou ELSE IF.\n\nÉtant donné l'exemple précédent, la construction if/else peut également être créée comme ceci :\n\nRun Keyword If | '${status}' == 'PASS' | Some Action | arg | ELSE | Another Action \n---|---|---|---|---|--- \n\nLa valeur de retour de ce mot-clé est la valeur de retour du mot-clé\neffectivement exécuté ou de Python `None` si aucun mot-clé n'a été exécuté (c'est-à-dire si `condition` était\nfalse). Par conséquent, il est recommandé d'utiliser les branches ELSE et/ou ELSE IF pour\nattribuer conditionnellement des valeurs de retour du mot-clé aux variables (voir Définir une variable\nSi vous devez définir des valeurs fixes de manière conditionnelle). Ceci est illustré par l'exemple\nci-dessous :\n\n${var1} = | Run Keyword If | ${rc} == 0 | Some keyword returning a value | | \n---|---|---|---|---|--- \n... | ELSE IF | 0 < ${rc} < 42 | Un autre mot-clé | | \n... | ELSE IF | ${rc} < 0 | Un autre mot-clé avec des arguments | ${rc} | arg2 \n... | ELSE | Mot-clé final pour gérer les cas anormaux | ${rc} | | \n${var2} = | Exécuter le mot-clé si | ${condition} | Un mot-clé | | \n\nDans cet exemple, ${var2} sera défini sur `None` si ${condition} est faux.\n\nNotez que les mots de contrôle `ELSE` et `ELSE IF` doivent être utilisés explicitement et\nne peuvent donc pas provenir de variables. Si vous devez utiliser des chaînes littérales `ELSE` et `ELSE\nIF` comme arguments, vous pouvez les échapper avec une barre oblique inverse comme `\\ELSE`\net `\\ELSE IF`."
    },
    {
        "name": "Run Keyword If All Tests Passed",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the given keyword with the given arguments, if all tests passed.</p>\n<p>This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
        "shortdoc": "Runs the given keyword with the given arguments, if all tests passed.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2558,
        "doc_fr": "Exécute le mot-clé donné avec les arguments donnés, si tous les tests ont réussi.\n\nCe mot-clé ne peut être utilisé que dans un démontage de suite. Essayer de l'utiliser ailleurs\nentraîne une erreur.\n\nSinon, ce mot-clé fonctionne exactement comme Run Keyword, consultez sa documentation\npour plus de détails."
    },
    {
        "name": "Run Keyword If Any Tests Failed",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the given keyword with the given arguments, if one or more tests failed.</p>\n<p>This keyword can only be used in a suite teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
        "shortdoc": "Runs the given keyword with the given arguments, if one or more tests failed.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2572,
        "doc_fr": "Exécute le mot-clé donné avec les arguments donnés, si un ou plusieurs tests ont échoué.\n\nCe mot-clé ne peut être utilisé que dans un démontage de suite. Essayer de l'utiliser ailleurs entraîne une erreur.\n\nSinon, ce mot-clé fonctionne exactement comme Run Keyword, consultez sa documentation\npour plus de détails."
    },
    {
        "name": "Run Keyword If Test Failed",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the given keyword with the given arguments, if the test failed.</p>\n<p>This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
        "shortdoc": "Runs the given keyword with the given arguments, if the test failed.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2510,
        "doc_fr": "Exécute le mot-clé donné avec les arguments donnés, si le test a échoué.\n\nCe mot-clé ne peut être utilisé que dans un test de démontage. Essayer de l'utiliser ailleurs\nentraîne une erreur.\n\nSinon, ce mot-clé fonctionne exactement comme Run Keyword, consultez sa documentation\npour plus de détails.\n\n"
    },
    {
        "name": "Run Keyword If Test Passed",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the given keyword with the given arguments, if the test passed.</p>\n<p>This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
        "shortdoc": "Runs the given keyword with the given arguments, if the test passed.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2524,
        "doc_fr": "Exécute le mot-clé donné avec les arguments donnés, si le test a réussi.\n\nCe mot-clé ne peut être utilisé que dans un test de suppression. Essayer de l'utiliser ailleurs\nentraîne une erreur.\n\nSinon, ce mot-clé fonctionne exactement comme Run Keyword, consultez sa documentation\npour plus de détails."
    },
    {
        "name": "Run Keyword If Timeout Occurred",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the given keyword if either a test or a keyword timeout has occurred.</p>\n<p>This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.</p>\n<p>Otherwise, this keyword works exactly like <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>, see its documentation for more details.</p>",
        "shortdoc": "Runs the given keyword if either a test or a keyword timeout has occurred.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2538,
        "doc_fr": "Exécute le mot-clé donné si un test ou un dépassement de délai de mot-clé s'est produit.\n\nCe mot-clé ne peut être utilisé que dans un test de suppression. Toute tentative d'utilisation\nailleurs entraîne une erreur.\n\nSinon, ce mot-clé fonctionne exactement comme Run Keyword, consultez sa documentation\npour plus de détails."
    },
    {
        "name": "Run Keyword Unless",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p><b>DEPRECATED since RF 5.0. Use Native IF/ELSE or <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> instead.</b></p>\n<p>Runs the given keyword with the given arguments if <code>condition</code> is false.</p>\n<p>See <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> for more information and an example. Notice that this keyword does not support ELSE or ELSE IF branches like <a href=\"#Run%20Keyword%20If\" class=\"name\">Run Keyword If</a> does.</p>",
        "shortdoc": "*DEPRECATED since RF 5.0. Use Native IF/ELSE or `Run Keyword If` instead.*",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2103,
        "deprecated": true,
        "doc_fr": "**OBSOLÈTE depuis RF 5.0. Utilisez plutôt IF/ELSE natif ou Run Keyword If.**\n\nExécute le mot clé donné avec les arguments donnés si `condition` est faux.\n\nVoir Run Keyword If pour plus d'informations et un exemple. Notez que ce\nmot clé ne prend pas en charge les branches ELSE ou ELSE IF comme Run Keyword If."
    },
    {
        "name": "Run Keywords",
        "args": [
            {
                "name": "keywords",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*keywords"
            }
        ],
        "returnType": null,
        "doc": "<p>Executes all the given keywords in a sequence.</p>\n<p>This keyword is mainly useful in setups and teardowns when they need to take care of multiple actions and creating a new higher level user keyword would be an overkill.</p>\n<p>By default all arguments are expected to be keywords to be executed.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td><span class=\"name\">Initialize database</span></td>\n<td><span class=\"name\">Start servers</span></td>\n<td><span class=\"name\">Clear logs</span></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td>${KW 1}</td>\n<td>${KW 2}</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td>@{KEYWORDS}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Keywords can also be run with arguments using upper case <code>AND</code> as a separator between keywords. The keywords are executed so that the first argument is the first keyword and proceeding arguments until the first <code>AND</code> are arguments to it. First argument after the first <code>AND</code> is the second keyword and proceeding arguments until the next <code>AND</code> are its arguments. And so on.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td><span class=\"name\">Initialize database</span></td>\n<td>db1</td>\n<td>AND</td>\n<td><span class=\"name\">Start servers</span></td>\n<td>server1</td>\n<td>server2</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td><span class=\"name\">Initialize database</span></td>\n<td>${DB NAME}</td>\n<td>AND</td>\n<td><span class=\"name\">Start servers</span></td>\n<td>@{SERVERS}</td>\n<td>AND</td>\n<td><span class=\"name\">Clear logs</span></td>\n</tr>\n<tr>\n<td><a href=\"#Run%20Keywords\" class=\"name\">Run Keywords</a></td>\n<td>${KW}</td>\n<td>AND</td>\n<td>@{KW WITH ARGS}</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Notice that the <code>AND</code> control argument must be used explicitly and cannot itself come from a variable. If you need to use literal <code>AND</code> string as argument, you can either use variables or escape it with a backslash like <code>\\AND</code>.</p>",
        "shortdoc": "Executes all the given keywords in a sequence.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1943,
        "doc_fr": "Exécute tous les mots-clés donnés dans une séquence.\n\nCe mot-clé est principalement utile dans les configurations et les démontages lorsqu'ils doivent prendre en charge\nplusieurs actions et que la création d'un nouveau mot-clé utilisateur de niveau\nsupérieur serait une exagération.\n\nPar défaut, tous les arguments doivent être des mots-clés à exécuter.\n\nExemples :\n\nExécuter les mots-clés | Initialiser la base de données | Démarrer les serveurs | Effacer les journaux \n---|---|---|--- \nExécuter les mots-clés | ${KW 1} | ${KW 2} | \nExécuter les mots-clés | @{KEYWORDS} | | \n\nLes mots-clés peuvent également être exécutés avec des arguments en utilisant la majuscule `AND` comme séparateur\nentre les mots-clés. Les mots-clés sont exécutés de sorte que le premier argument soit le\npremier mot-clé et les arguments suivants jusqu'au premier `AND` soient des arguments\npour celui-ci. Le premier argument après le premier `AND` est le deuxième mot-clé et les arguments suivants jusqu'au prochain `AND` sont ses arguments. Et ainsi de suite.\n\nExemples :\n\nExécuter les mots-clés | Initialiser la base de données | db1 | ET | Démarrer les serveurs | serveur1 | serveur2 | \n---|---|---|---|---|---|---|--- \nExécuter les mots-clés | Initialiser la base de données | ${DB NAME} | ET | Démarrer les serveurs | @{SERVERS} | ET | Effacer les journaux \nExécuter les mots-clés | ${KW} | ET | @{KW AVEC ARGS} | | | | \n\nNotez que l'argument de contrôle `AND` doit être utilisé explicitement et ne peut\npas provenir lui-même d'une variable. Si vous devez utiliser une chaîne `AND` littérale\ncomme argument, vous pouvez soit utiliser des variables, soit l'échapper avec une barre oblique inverse comme\n`\\AND`."
    },
    {
        "name": "Set Global Variable",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Makes a variable available globally in all tests and suites.</p>\n<p>Variables set with this keyword are globally available in all subsequent test suites, test cases and user keywords. Also variables created Variables sections are overridden. Variables assigned locally based on keyword return values or by using <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a>, <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> or <a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a> override these variables in that scope, but the global value is not changed in those cases.</p>\n<p>In practice setting variables with this keyword has the same effect as using command line options <code>--variable</code> and <code>--variablefile</code>. Because this keyword can change variables everywhere, it should be used with care.</p>\n<p>See <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a> for more information and usage examples. See also the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section for information why it is recommended to give the variable name in escaped format like <code>$name</code> or <code>\\${name}</code> instead of the normal <code>${name}</code>.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword.</p>",
        "shortdoc": "Makes a variable available globally in all tests and suites.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1815,
        "doc_fr": "Rend une variable disponible globalement dans tous les tests et suites.\n\nLes variables définies avec ce mot-clé sont disponibles globalement dans toutes les suites de tests, cas de test et mots-clés utilisateur ultérieurs. Les variables créées dans les sections Variables\nsont également remplacées. Les variables attribuées localement en fonction des valeurs de retour des mots-clés ou en utilisant Set Suite Variable, Set Test Variable ou Set Local Variable\nremplacent ces variables dans cette portée, mais la valeur globale n'est pas modifiée dans\nces cas.\n\nEn pratique, définir des variables avec ce mot-clé a le même effet que l'utilisation des options de ligne de commande `--variable` et `--variablefile`. Étant donné que ce mot-clé\npeut modifier les variables partout, il doit être utilisé avec précaution.\n\nVoir Set Suite Variable pour plus d'informations et des exemples d'utilisation. Voir également la section\nUtilisation de variables avec des mots-clés pour créer ou accéder à des variables\npour savoir pourquoi il est recommandé de donner le nom de la variable au format échappé\ncomme `$name` ou `\\${name}` au lieu du `${name}` normal.\n\n**REMARQUE :** la syntaxe « VAR » introduite dans Robot Framework 7.0 est\nrecommandée plutôt que ce mot-clé."
    },
    {
        "name": "Set Library Search Order",
        "args": [
            {
                "name": "search_order",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*search_order"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets the resolution order to use when a name matches multiple keywords.</p>\n<p>The library search order is used to resolve conflicts when a keyword name that is used matches multiple keyword implementations. The first library (or resource, see below) containing the keyword is selected and that keyword implementation used. If the keyword is not found from any library (or resource), execution fails the same way as when the search order is not set.</p>\n<p>When this keyword is used, there is no need to use the long <code>LibraryName.Keyword Name</code> notation.  For example, instead of having</p>\n<table border=\"1\">\n<tr>\n<td>MyLibrary.Keyword</td>\n<td>arg</td>\n</tr>\n<tr>\n<td>MyLibrary.Another Keyword</td>\n<td></td>\n</tr>\n<tr>\n<td>MyLibrary.Keyword</td>\n<td>xxx</td>\n</tr>\n</table>\n<p>you can have</p>\n<table border=\"1\">\n<tr>\n<td>Set Library Search Order</td>\n<td>MyLibrary</td>\n</tr>\n<tr>\n<td>Keyword</td>\n<td>arg</td>\n</tr>\n<tr>\n<td>Another Keyword</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyword</td>\n<td>xxx</td>\n</tr>\n</table>\n<p>This keyword can be used also to set the order of keywords in different resource files. In this case resource names must be given without paths or extensions like:</p>\n<table border=\"1\">\n<tr>\n<td>Set Library Search Order</td>\n<td>resource</td>\n<td>another_resource</td>\n</tr>\n</table>\n<p><b>NOTE:</b></p>\n<ul>\n<li>The search order is valid only in the suite where this keyword is used.</li>\n<li>Keywords in resources always have higher priority than keywords in libraries regardless the search order.</li>\n<li>The old order is returned and can be used to reset the search order later.</li>\n<li>Calling this keyword without arguments removes possible search order.</li>\n<li>Library and resource names in the search order are both case and space insensitive.</li>\n</ul>",
        "shortdoc": "Sets the resolution order to use when a name matches multiple keywords.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3317,
        "doc_fr": "Définit l'ordre de résolution à utiliser lorsqu'un nom correspond à plusieurs mots-clés.\n\nL'ordre de recherche de la bibliothèque est utilisé pour résoudre les conflits lorsqu'un nom de mot-clé\nutilisé correspond à plusieurs implémentations de mots-clés. La première bibliothèque (ou\nressource, voir ci-dessous) contenant le mot-clé est sélectionnée et cette implémentation de mot-clé\nest utilisée. Si le mot-clé n'est trouvé dans aucune bibliothèque (ou\nressource), l'exécution échoue de la même manière que lorsque l'ordre de recherche n'est pas défini.\n\nLorsque ce mot-clé est utilisé, il n'est pas nécessaire d'utiliser la notation longue\n`LibraryName.Keyword Name`. Par exemple, au lieu d'avoir\n\nMyLibrary.Keyword | arg \n---|--- \nMyLibrary.Another Keyword | \nMyLibrary.Keyword | xxx \n\nvous pouvez avoir\n\nSet Library Search Order | MyLibrary \n---|--- \nKeyword | arg \nAnother Keyword | \nKeyword | xxx \n\nCe mot-clé peut également être utilisé pour définir l'ordre des mots-clés dans différents\nfichiers de ressources. Dans ce cas, les noms de ressources doivent être fournis sans chemins ni\nextensions comme :\n\nDéfinir l'ordre de recherche de la bibliothèque | ressource | une autre_ressource \n---|---|--- \n\n**REMARQUE :**\n\n* L'ordre de recherche n'est valide que dans la suite où ce mot-clé est utilisé.\n* Les mots-clés dans les ressources ont toujours une priorité plus élevée que les mots-clés dans les bibliothèques, quel que soit l'ordre de recherche.\n* L'ancien ordre est renvoyé et peut être utilisé pour réinitialiser l'ordre de recherche ultérieurement.\n* L'appel de ce mot-clé sans arguments supprime l'ordre de recherche possible.\n* Les noms de bibliothèque et de ressource dans l'ordre de recherche sont tous deux insensibles à la casse et à l'espace."
    },
    {
        "name": "Set Local Variable",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Makes a variable available everywhere within the local scope.</p>\n<p>Variables set with this keyword are available within the local scope of the currently executed test case or in the local scope of the keyword in which they are defined. For example, if you set a variable in a user keyword, it is available only in that keyword. Other test cases or keywords will not see variables set with this keyword.</p>\n<p>This keyword is equivalent to a normal variable assignment based on a keyword return value. For example,</p>\n<pre>\n${var} =    <a href=\"#Set%20Variable\" class=\"name\">Set Variable</a>    value\n@{list} =    <a href=\"#Create%20List\" class=\"name\">Create List</a>    item1    item2    item3\n</pre>\n<p>are equivalent with</p>\n<pre>\n<a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a>    @var    value\n<a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a>    @list    item1    item2    item3\n</pre>\n<p>The main use case for this keyword is creating local variables in libraries.</p>\n<p>See <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a> for more information and usage examples. See also the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section for information why it is recommended to give the variable name in escaped format like <code>$name</code> or <code>\\${name}</code> instead of the normal <code>${name}</code>.</p>\n<p>See also <a href=\"#Set%20Global%20Variable\" class=\"name\">Set Global Variable</a> and <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a>.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword.</p>",
        "shortdoc": "Makes a variable available everywhere within the local scope.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1665,
        "doc_fr": "Rend une variable disponible partout dans la portée locale.\n\nLes variables définies avec ce mot-clé sont disponibles dans la portée locale du\ncas de test actuellement exécuté ou dans la portée locale du mot-clé dans\nlequel elles sont définies. Par exemple, si vous définissez une variable dans un mot-clé utilisateur, elle est\ndisponible uniquement dans ce mot-clé. Les autres cas de test ou mots-clés ne verront pas\nles variables définies avec ce mot-clé.\n\nCe mot-clé est équivalent à une affectation de variable normale basée sur une\nvaleur de retour de mot-clé. Par exemple,\n\n${var} = Set Variable value\n@{list} = Create List item1 item2 item3\n\nsont équivalents à\n\nSet Local Variable @var value\nSet Local Variable @list item1 item2 item3\n\nLe principal cas d'utilisation de ce mot-clé est la création de variables locales dans les bibliothèques.\n\nVoir Set Suite Variable pour plus d'informations et des exemples d'utilisation. Consultez également la section\nUtilisation de variables avec des mots-clés pour créer ou accéder à des variables\npour savoir pourquoi il est recommandé de donner le nom de la variable au format échappé\ncomme `$name` ou `\\${name}` au lieu du `${name}` normal.\n\nVoir également Définir une variable globale et Définir une variable de test.\n\n**REMARQUE :** la syntaxe `VAR` introduite dans Robot Framework 7.0 est\nrecommandée par rapport à ce mot-clé."
    },
    {
        "name": "Set Log Level",
        "args": [
            {
                "name": "level",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "level"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets the log threshold to the specified level.</p>\n<p>Messages below the level will not logged. The default logging level is INFO, but it can be overridden with the <code>--loglevel</code> command line option. The available levels are TRACE, DEBUG, INFO (default), WARN, ERROR and NONE (no logging).</p>\n<p>The old level is returned and can be used for setting the level back later. An alternative way to reset the level is using the dedicated <a href=\"#Reset%20Log%20Level\" class=\"name\">Reset Log Level</a> keyword.</p>",
        "shortdoc": "Sets the log threshold to the specified level.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3191,
        "doc_fr": "Définit le seuil de journalisation au niveau spécifié.\n\nLes messages inférieurs au niveau ne seront pas enregistrés. Le niveau de journalisation par défaut est INFO,\nmais il peut être remplacé par l'option de ligne de commande `--loglevel`. Les\nniveaux disponibles sont TRACE, DEBUG, INFO (par défaut), WARN, ERROR et NONE (pas de\njournalisation).\n\nL'ancien niveau est renvoyé et peut être utilisé pour rétablir le niveau ultérieurement. Une\nautre façon de réinitialiser le niveau consiste à utiliser le mot-clé dédié Reset Log Level\n."
    },
    {
        "name": "Set Suite Documentation",
        "args": [
            {
                "name": "doc",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "doc"
            },
            {
                "name": "append",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "append=False"
            },
            {
                "name": "top",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "top=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets documentation for the current test suite.</p>\n<p>By default, the possible existing documentation is overwritten, but this can be changed using the optional <code>append</code> argument similarly as with <a href=\"#Set%20Test%20Message\" class=\"name\">Set Test Message</a> keyword.</p>\n<p>This keyword sets the documentation of the current suite by default. If the optional <code>top</code> argument is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the documentation of the top level suite is altered instead.</p>\n<p>The documentation of the current suite is available as a built-in variable <code>${SUITE DOCUMENTATION}</code>.</p>",
        "shortdoc": "Sets documentation for the current test suite.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3637,
        "doc_fr": "Définit la documentation de la suite de tests actuelle.\n\nPar défaut, la documentation éventuellement existante est écrasée, mais elle peut\nêtre modifiée à l'aide de l'argument optionnel `append` de la même manière qu'avec le mot-clé Set Test\nMessage.\n\nCe mot-clé définit la documentation de la suite actuelle par défaut. Si l'argument optionnel `top` reçoit une valeur true (voir Arguments booléens), la\ndocumentation de la suite de niveau supérieur est modifiée à la place.\n\nLa documentation de la suite actuelle est disponible sous forme de variable intégrée\n`${SUITE DOCUMENTATION}`."
    },
    {
        "name": "Set Suite Metadata",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            },
            {
                "name": "append",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "append=False"
            },
            {
                "name": "top",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "top=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets metadata for the current test suite.</p>\n<p>By default, possible existing metadata values are overwritten, but this can be changed using the optional <code>append</code> argument similarly as with <a href=\"#Set%20Test%20Message\" class=\"name\">Set Test Message</a> keyword.</p>\n<p>This keyword sets the metadata of the current suite by default. If the optional <code>top</code> argument is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the metadata of the top level suite is altered instead.</p>\n<p>The metadata of the current suite is available as a built-in variable <code>${SUITE METADATA}</code> in a Python dictionary. Notice that modifying this variable directly has no effect on the actual metadata the suite has.</p>",
        "shortdoc": "Sets metadata for the current test suite.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3657,
        "doc_fr": "Définit les métadonnées de la suite de tests actuelle.\n\nPar défaut, les valeurs de métadonnées existantes sont écrasées, mais cela peut être\nmodifié à l'aide de l'argument facultatif `append` de la même manière qu'avec le mot-clé Set Test\nMessage.\n\nCe mot-clé définit les métadonnées de la suite actuelle par défaut. Si l'argument facultatif `top` reçoit une valeur true (voir Arguments booléens), les\nmétadonnées de la suite de niveau supérieur sont modifiées à la place.\n\nLes métadonnées de la suite actuelle sont disponibles sous la forme d'une variable intégrée `${SUITE\nMETADATA}` dans un dictionnaire Python. Notez que la modification directe de cette\nvariable n'a aucun effet sur les métadonnées réelles de la suite."
    },
    {
        "name": "Set Suite Variable",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Makes a variable available everywhere within the scope of the current suite.</p>\n<p>Variables set with this keyword are available everywhere within the scope of the currently executed test suite. Setting variables with this keyword thus has the same effect as creating them using the Variables section in the data file or importing them from variable files.</p>\n<p>Possible child test suites do not see variables set with this keyword by default, but that can be controlled by using <code>children=&lt;option&gt;</code> as the last argument. If the specified <code>&lt;option&gt;</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the variable is set also to the child suites. Parent and sibling suites will never see variables set with this keyword.</p>\n<p>The name of the variable can be given either as a normal variable name like <code>${NAME}</code> or in escaped format as <code>\\${NAME}</code> or <code>$NAME</code>. For the reasons explained in the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section, <b>using the escaped format is highly recommended</b>.</p>\n<p>Variable value can be specified using the same syntax as when variables are created in the Variables section. Same way as in that section, it is possible to create scalar values, lists and dictionaries. The type is got from the variable name prefix <code>$</code>, <code>@</code> and <code>&amp;</code>, respectively.</p>\n<p>If a variable already exists within the new scope, its value will be overwritten. If a variable already exists within the current scope, the value can be left empty and the variable within the new scope gets the value within the current scope.</p>\n<p>Examples:</p>\n<pre>\nSet Suite Variable    $SCALAR    Hello, world!\nSet Suite Variable    $SCALAR    Hello, world!    children=True\nSet Suite Variable    @LIST      First item       Second item\nSet Suite Variable    &amp;DICT      key=value        foo=bar\n${ID} =    Get ID\nSet Suite Variable    $ID\n</pre>\n<p>To override an existing value with an empty value, use built-in variables <code>${EMPTY}</code>, <code>@{EMPTY}</code> or <code>&amp;{EMPTY}</code>:</p>\n<pre>\nSet Suite Variable    $SCALAR    ${EMPTY}\nSet Suite Variable    @LIST      @{EMPTY}\nSet Suite Variable    &amp;DICT      &amp;{EMPTY}\n</pre>\n<p>See also <a href=\"#Set%20Global%20Variable\" class=\"name\">Set Global Variable</a>, <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> and <a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a>.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword. The basic usage is shown below and the Robot Framework User Guide explains the syntax in detail.</p>\n<pre>\nVAR    ${SCALAR}    Hello, world!                scope=SUITE\nVAR    @{LIST}      First item    Second item    scope=SUITE\nVAR    &amp;{DICT}      key=value     foo=bar        scope=SUITE\n</pre>",
        "shortdoc": "Makes a variable available everywhere within the scope of the current suite.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1746,
        "doc_fr": "Rend une variable disponible partout dans le cadre de la suite actuelle.\n\nLes variables définies avec ce mot-clé sont disponibles partout dans le cadre de la suite de tests\nen cours d'exécution. Définir des variables avec ce mot-clé a donc\nle même effet que de les créer à l'aide de la section Variables du\nfichier de données ou de les importer à partir de fichiers de variables.\n\nLes suites de tests enfants possibles ne voient pas les variables définies avec ce mot-clé par\ndéfaut, mais cela peut être contrôlé en utilisant `children=<option>` comme dernier\nargument. Si la valeur `<option>` spécifiée est true (voir les\narguments booléens), la variable est également définie sur les suites enfants. Les\nsuites parentes et sœurs ne verront jamais les variables définies avec ce mot-clé.\n\nLe nom de la variable peut être donné soit comme un nom de variable normal comme\n`${NAME}` ou dans un format échappé comme `\\${NAME}` ou `$NAME`. Pour les raisons\nexpliquées dans la section Utilisation de variables avec des mots-clés pour créer ou accéder à des\nvariables, **l'utilisation du format échappé est fortement recommandée**.\n\nLa valeur de la variable peut être spécifiée en utilisant la même syntaxe que lorsque les variables sont\ncréées dans la section Variables. De la même manière que dans cette section, il est\npossible de créer des valeurs scalaires, des listes et des dictionnaires. Le type est obtenu à partir du\npréfixe de nom de variable `$`, `@` et `&`, respectivement.\n\nSi une variable existe déjà dans la nouvelle portée, sa valeur sera\nécrasée. Si une variable existe déjà dans la portée actuelle, la valeur\npeut être laissée vide et la variable dans la nouvelle portée obtient la valeur dans\nla portée actuelle.\n\nExemples :\n\nDéfinir la variable de suite $SCALAR Bonjour le monde !\nDéfinir la variable de suite $SCALAR Bonjour le monde ! children=True\nSet Suite Variable @LIST Premier élément Second élément\nSet Suite Variable &DICT key=value foo=bar\n${ID} = Get ID\nSet Suite Variable $ID\n\nPour remplacer une valeur existante par une valeur vide, utilisez des variables intégrées\n`${EMPTY}`, `@{EMPTY}` ou `&{EMPTY}` :\n\nSet Suite Variable $SCALAR ${EMPTY}\nSet Suite Variable @LIST @{EMPTY}\nSet Suite Variable &DICT &{EMPTY}\n\nVoir également Set Global Variable, Set Test Variable et Set Local Variable.\n\n**REMARQUE :** La syntaxe `VAR` introduite dans Robot Framework 7.0 est recommandée\npar rapport à ce mot-clé. L'utilisation de base est indiquée ci-dessous et le Guide de l'utilisateur de Robot Framework\nexplique la syntaxe en détail.\n\nVAR ${SCALAR} Bonjour tout le monde ! portée=SUITE\nVAR @{LIST} Premier élément Second élément portée=SUITE\nVAR &{DICT} clé=valeur foo=bar portée=SUITE"
    },
    {
        "name": "Set Tags",
        "args": [
            {
                "name": "tags",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*tags"
            }
        ],
        "returnType": null,
        "doc": "<p>Adds given <code>tags</code> for the current test or all tests in a suite.</p>\n<p>When this keyword is used inside a test case, that test gets the specified tags and other tests are not affected.</p>\n<p>If this keyword is used in a suite setup, all test cases in that suite, recursively, gets the given tags. It is a failure to use this keyword in a suite teardown.</p>\n<p>The current tags are available as a built-in variable <code>@{TEST TAGS}</code>.</p>\n<p>See <a href=\"#Remove%20Tags\" class=\"name\">Remove Tags</a> if you want to remove certain tags and <a href=\"#Fail\" class=\"name\">Fail</a> if you want to fail the test case after setting and/or removing tags.</p>",
        "shortdoc": "Adds given ``tags`` for the current test or all tests in a suite.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3680,
        "doc_fr": "Ajoute les « tags » donnés pour le test actuel ou pour tous les tests d'une suite.\n\nLorsque ce mot-clé est utilisé dans un cas de test, ce test obtient les\ntags spécifiés et les autres tests ne sont pas affectés.\n\nSi ce mot-clé est utilisé dans une configuration de suite, tous les cas de test de cette suite,\nde manière récursive, obtiennent les balises données. L'utilisation de ce mot-clé dans\nun démontage de suite constitue un échec.\n\nLes balises actuelles sont disponibles sous la forme d'une variable intégrée `@{TEST TAGS}`.\n\nVoir Supprimer les balises si vous souhaitez supprimer certaines balises et Échec si vous souhaitez\nfaire échouer le cas de test après avoir défini et/ou supprimé des balises."
    },
    {
        "name": "Set Task Variable",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Makes a variable available everywhere within the scope of the current task.</p>\n<p>This is an alias for <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> that is more applicable when creating tasks, not tests.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword.</p>",
        "shortdoc": "Makes a variable available everywhere within the scope of the current task.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1734,
        "doc_fr": "Rend une variable disponible partout dans le cadre de la tâche en cours.\n\nIl s'agit d'un alias pour Set Test Variable qui est plus applicable lors de la création\nde tâches, et non de tests.\n\n**REMARQUE :** la syntaxe « VAR » introduite dans Robot Framework 7.0 est recommandée\npar rapport à ce mot-clé."
    },
    {
        "name": "Set Test Documentation",
        "args": [
            {
                "name": "doc",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "doc"
            },
            {
                "name": "append",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "append=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets documentation for the current test case.</p>\n<p>By default the possible existing documentation is overwritten, but this can be changed using the optional <code>append</code> argument similarly as with <a href=\"#Set%20Test%20Message\" class=\"name\">Set Test Message</a> keyword.</p>\n<p>The current test documentation is available as a built-in variable <code>${TEST DOCUMENTATION}</code>. This keyword can not be used in suite setup or suite teardown.</p>",
        "shortdoc": "Sets documentation for the current test case.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3618,
        "doc_fr": "Définit la documentation pour le cas de test actuel.\n\nPar défaut, la documentation éventuellement existante est écrasée, mais elle peut être\nmodifiée à l'aide de l'argument facultatif `append` de la même manière qu'avec le mot-clé Set Test\nMessage.\n\nLa documentation de test actuelle est disponible sous la forme d'une variable intégrée `${TEST\nDOCUMENTATION}`. Ce mot-clé ne peut pas être utilisé dans la configuration ou le\ndésinstallation d'une suite."
    },
    {
        "name": "Set Test Message",
        "args": [
            {
                "name": "message",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "message"
            },
            {
                "name": "append",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "append=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets message for the current test case.</p>\n<p>If the optional <code>append</code> argument is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the given <code>message</code> is added after the possible earlier message by joining the messages with a space.</p>\n<p>In test teardown this keyword can alter the possible failure message, but otherwise failures override messages set by this keyword. Notice that in teardown the message is available as a built-in variable <code>${TEST MESSAGE}</code>.</p>\n<p>It is possible to use HTML format in the message by starting the message with <code>*HTML*</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Set Test Message</td>\n<td>My message</td>\n<td></td>\n</tr>\n<tr>\n<td>Set Test Message</td>\n<td>is continued.</td>\n<td>append=yes</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${TEST MESSAGE}</td>\n<td>My message is continued.</td>\n</tr>\n<tr>\n<td>Set Test Message</td>\n<td><span class=\"name\">*</span>HTML<span class=\"name\">*</span> &lt;b&gt;Hello!&lt;/b&gt;</td>\n<td></td>\n</tr>\n</table>\n<p>This keyword can not be used in suite setup or suite teardown.</p>",
        "shortdoc": "Sets message for the current test case.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 3565,
        "doc_fr": "Définit le message pour le cas de test actuel.\n\nSi l'argument optionnel `append` reçoit une valeur true (voir les\narguments booléens), le `message` donné est ajouté après le message précédent possible en\njoignant les messages avec un espace.\n\nDans le démontage des tests, ce mot-clé peut modifier le message d'échec possible, mais\nsinon les échecs remplacent les messages définis par ce mot-clé. Notez que dans\nle démontage, le message est disponible en tant que variable intégrée `${TEST MESSAGE}`.\n\nIl est possible d'utiliser le format HTML dans le message en commençant le message par\n`*HTML*`.\n\nExemples :\n\nSet Test Message | My message | \n---|---|--- \nSet Test Message | is continuous. | append=yes \nShould Be Equal | ${TEST MESSAGE} | My message is continuous. \nSet Test Message | *HTML* <b>Hello!</b> | \n\nCe mot-clé ne peut pas être utilisé dans la configuration ou le démontage d'une suite."
    },
    {
        "name": "Set Test Variable",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Makes a variable available everywhere within the scope of the current test.</p>\n<p>Variables set with this keyword are available everywhere within the scope of the currently executed test case. For example, if you set a variable in a user keyword, it is available both in the test case level and also in all other user keywords used in the current test. Other test cases will not see variables set with this keyword. It is an error to call <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> outside the scope of a test (e.g. in a Suite Setup or Teardown).</p>\n<p>See <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a> for more information and usage examples. See also the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section for information why it is recommended to give the variable name in escaped format like <code>$name</code> or <code>\\${name}</code> instead of the normal <code>${name}</code>.</p>\n<p>When creating automated tasks, not tests, it is possible to use <a href=\"#Set%20Task%20Variable\" class=\"name\">Set Task Variable</a>. See also <a href=\"#Set%20Global%20Variable\" class=\"name\">Set Global Variable</a> and <a href=\"#Set%20Local%20Variable\" class=\"name\">Set Local Variable</a>.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is recommended over this keyword.</p>",
        "shortdoc": "Makes a variable available everywhere within the scope of the current test.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1705,
        "doc_fr": "Rend une variable disponible partout dans le cadre du test en cours.\n\nLes variables définies avec ce mot-clé sont disponibles partout dans le cadre du\ncas de test actuellement exécuté. Par exemple, si vous définissez une variable dans un\nmot-clé utilisateur, elle est disponible à la fois au niveau du cas de test et dans tous les autres\nmots-clés utilisateur utilisés dans le test en cours. Les autres cas de test ne verront pas\nles variables définies avec ce mot-clé. C'est une erreur d'appeler Set Test Variable\nen dehors du cadre d'un test (par exemple dans une configuration ou une suppression de suite).\n\nVoir Set Suite Variable pour plus d'informations et des exemples d'utilisation. Voir également la section\nUtilisation de variables avec des mots-clés création ou accès à des variables\npour savoir pourquoi il est recommandé de donner le nom de la variable au format échappé\ncomme `$name` ou `\\${name}` au lieu du `${name}` normal.\n\nLors de la création de tâches automatisées, et non de tests, il est possible d'utiliser Set Task\nVariable. Voir également Set Global Variable et Set Local Variable.\n\n**REMARQUE :** la syntaxe « VAR » introduite dans Robot Framework 7.0 est\nrecommandée plutôt que ce mot-clé."
    },
    {
        "name": "Set Variable",
        "args": [
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns the given values which can then be assigned to a variables.</p>\n<p>This keyword is mainly used for setting scalar variables. Additionally it can be used for converting a scalar variable containing a list to a list variable or to multiple scalar variables. It is recommended to use <a href=\"#Create%20List\" class=\"name\">Create List</a> when creating new lists.</p>\n<p>Examples:</p>\n<pre>\n${hi} =    Set Variable    Hello, world!\n${hi2} =    Set Variable    I said: ${hi}\n${var1}    ${var2} =    Set Variable    Hello    world\n@{list} =    Set Variable    ${list with some items}\n${item1}    ${item2} =    Set Variable    ${list with 2 items}\n</pre>\n<p>Variables created with this keyword are available only in the scope where they are created. See <a href=\"#Set%20Global%20Variable\" class=\"name\">Set Global Variable</a>, <a href=\"#Set%20Test%20Variable\" class=\"name\">Set Test Variable</a> and <a href=\"#Set%20Suite%20Variable\" class=\"name\">Set Suite Variable</a> for information on how to set variables so that they are available also in a larger scope.</p>\n<p><b>NOTE:</b> The <code>VAR</code> syntax introduced in Robot Framework 7.0 is generally recommended over this keyword. The basic usage is shown below and the Robot Framework User Guide explains the syntax in detail.</p>\n<pre>\nVAR    ${hi}     Hello, world!\nVAR    ${hi2}    I said: ${hi}\n</pre>",
        "shortdoc": "Returns the given values which can then be assigned to a variables.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1630,
        "doc_fr": "Renvoie les valeurs données qui peuvent ensuite être affectées à des variables.\n\nCe mot-clé est principalement utilisé pour définir des variables scalaires. De plus, il peut\nêtre utilisé pour convertir une variable scalaire contenant une liste en une variable de liste\nou en plusieurs variables scalaires. Il est recommandé d'utiliser Créer une liste lors\nde la création de nouvelles listes.\n\nExemples :\n\n${hi} = Définir la variable Bonjour tout le monde !\n${hi2} = Définir la variable J'ai dit : ${hi}\n${var1} ${var2} = Définir la variable Bonjour tout le monde\n@{liste} = Définir la variable ${liste avec quelques éléments}\n${item1} ${item2} = Définir la variable ${liste avec 2 éléments}\n\nLes variables créées avec ce mot-clé ne sont disponibles que dans la portée où elles\nsont créées. Voir Définir une variable globale, Définir une variable de test et Définir une variable de suite\npour plus d'informations sur la façon de définir des variables afin qu'elles soient également disponibles dans une\nportée plus large.\n\n**REMARQUE :** La syntaxe « VAR » introduite dans Robot Framework 7.0 est généralement\nrecommandée par rapport à ce mot-clé. L'utilisation de base est indiquée ci-dessous et le Guide de l'utilisateur de Robot\nFramework explique la syntaxe en détail.\n\nVAR ${hi} Bonjour tout le monde !\nVAR ${hi2} J'ai dit : ${hi}"
    },
    {
        "name": "Set Variable If",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets variable based on the given condition.</p>\n<p>The basic usage is giving a condition and two values. The given condition is first evaluated the same way as with the <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> keyword. If the condition is true, then the first value is returned, and otherwise the second value is returned. The second value can also be omitted, in which case it has a default value None. This usage is illustrated in the examples below, where <code>${rc}</code> is assumed to be zero.</p>\n<table border=\"1\">\n<tr>\n<td>${var1} =</td>\n<td>Set Variable If</td>\n<td>${rc} == 0</td>\n<td>zero</td>\n<td>nonzero</td>\n</tr>\n<tr>\n<td>${var2} =</td>\n<td>Set Variable If</td>\n<td>${rc} &gt; 0</td>\n<td>value1</td>\n<td>value2</td>\n</tr>\n<tr>\n<td>${var3} =</td>\n<td>Set Variable If</td>\n<td>${rc} &gt; 0</td>\n<td>whatever</td>\n<td></td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${var1} = 'zero'\n${var2} = 'value2'\n${var3} = None\n</pre>\n<p>It is also possible to have 'else if' support by replacing the second value with another condition, and having two new values after it. If the first condition is not true, the second is evaluated and one of the values after it is returned based on its truth value. This can be continued by adding more conditions without a limit.</p>\n<table border=\"1\">\n<tr>\n<td>${var} =</td>\n<td>Set Variable If</td>\n<td>${rc} == 0</td>\n<td>zero</td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} &gt; 0</td>\n<td>greater than zero</td>\n<td>less then zero</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${var} =</td>\n<td>Set Variable If</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} == 0</td>\n<td>zero</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} == 1</td>\n<td>one</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} == 2</td>\n<td>two</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} &gt; 2</td>\n<td>greater than two</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>${rc} &lt; 0</td>\n<td>less than zero</td>\n<td></td>\n</tr>\n</table>\n<p>Use <a href=\"#Get%20Variable%20Value\" class=\"name\">Get Variable Value</a> if you need to set variables dynamically based on whether a variable exist or not.</p>",
        "shortdoc": "Sets variable based on the given condition.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2450,
        "doc_fr": "Définit une variable en fonction de la condition donnée.\n\nL'utilisation de base consiste à donner une condition et deux valeurs. La condition donnée est\nd'abord évaluée de la même manière qu'avec le mot-clé Should Be True. Si la\ncondition est vraie, la première valeur est renvoyée, et sinon la deuxième\nvaleur est renvoyée. La deuxième valeur peut également être omise, auquel cas elle a\nune valeur par défaut None. Cette utilisation est illustrée dans les exemples ci-dessous, où\n`${rc}` est supposé être zéro.\n\n${var1} = | Set Variable If | ${rc} == 0 | zero | nonzero \n---|---|---|---|--- \n${var2} = | Set Variable If | ${rc} > 0 | value1 | value2 \n${var3} = | Set Variable If | ${rc} > 0 | whatever | \n\n=>\n\n${var1} = 'zero'\n${var2} = 'value2'\n${var3} = None\n\nIl est également possible d'avoir la prise en charge de 'else if' en remplaçant la deuxième valeur\npar une autre condition, et en ayant deux nouvelles valeurs après celle-ci. Si la première\ncondition n'est pas vraie, la seconde est évaluée et l'une des valeurs qui la suivent\nest renvoyée en fonction de sa valeur de vérité. Cela peut être poursuivi en ajoutant d'autres\nconditions sans limite.\n\n${var} = | Set Variable If | ${rc} == 0 | zero \n---|---|---|--- \n... | ${rc} > 0 | greater than zero | less than zero \n| | | \n${var} = | Set Variable If | | \n... | ${rc} == 0 | zero | \n... | ${rc} == 1 | one | \n... | ${rc} == 2 | two | \n... | ${rc} > 2 | supérieur à deux | \n... | ${rc} < 0 | inférieur à zéro | \n\nUtilisez Obtenir la valeur de la variable si vous devez définir des variables de manière dynamique\nen fonction de l'existence ou non d'une variable."
    },
    {
        "name": "Should Be Empty",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the given item is empty.</p>\n<p>The length of the item is got using the <a href=\"#Get%20Length\" class=\"name\">Get Length</a> keyword. The default error message can be overridden with the <code>msg</code> argument.</p>",
        "shortdoc": "Verifies that the given item is empty.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1460,
        "doc_fr": "Vérifie que l'élément donné est vide.\n\nLa longueur de l'élément est obtenue à l'aide du mot-clé Get Length. Le message d'erreur par défaut\npeut être remplacé par l'argument `msg`."
    },
    {
        "name": "Should Be Equal",
        "args": [
            {
                "name": "first",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "first"
            },
            {
                "name": "second",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "second"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "formatter",
                "type": null,
                "defaultValue": "str",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "formatter=str"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the given objects are unequal.</p>\n<p>Optional <code>msg</code>, <code>values</code> and <code>formatter</code> arguments specify how to construct the error message if this keyword fails:</p>\n<ul>\n<li>If <code>msg</code> is not given, the error message is <code>&lt;first&gt; != &lt;second&gt;</code>.</li>\n<li>If <code>msg</code> is given and <code>values</code> gets a true value (default), the error message is <code>&lt;msg&gt;: &lt;first&gt; != &lt;second&gt;</code>.</li>\n<li>If <code>msg</code> is given and <code>values</code> gets a false value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the error message is simply <code>&lt;msg&gt;</code>.</li>\n<li><code>formatter</code> controls how to format the values. Possible values are <code>str</code> (default), <code>repr</code> and <code>ascii</code>, and they work similarly as Python built-in functions with same names. See <a href=\"#String%20representations\" class=\"name\">String representations</a> for more details.</li>\n</ul>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, comparison is done case-insensitively. If both arguments are multiline strings, this keyword uses <a href=\"#Multiline%20string%20comparison\" class=\"name\">multiline string comparison</a>.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>expected</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>expected</td>\n<td>Custom error message</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>expected</td>\n<td>Custom message</td>\n<td>values=False</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${x}</td>\n<td>expected</td>\n<td>ignore_case=True</td>\n<td>formatter=repr</td>\n</tr>\n</table>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
        "shortdoc": "Fails if the given objects are unequal.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 584,
        "doc_fr": "Échoue si les objets donnés ne sont pas égaux.\n\nLes arguments facultatifs `msg`, `values` et `formatter` spécifient comment construire\nle message d'erreur si ce mot-clé échoue :\n\n* Si `msg` n'est pas fourni, le message d'erreur est `<first> != <second>`.\n* Si `msg` est fourni et que `values` obtient une valeur true (par défaut), le message d'erreur est `<msg>: <first> != <second>`.\n* Si `msg` est fourni et que `values` obtient une valeur false (voir Arguments booléens), le message d'erreur est simplement `<msg>`.\n\nSi `ignore_case` reçoit une valeur true (voir les arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée sans distinction de casse. Si les deux\narguments sont des chaînes multilignes, ce mot-clé utilise la\ncomparaison de chaînes multilignes.\n\nSi `strip_spaces` reçoit une valeur true (voir les arguments booléens) et que les deux\narguments sont des chaînes, la\ncomparaison est effectuée sans espaces de début et de fin. Si `strip_spaces` reçoit une valeur de chaîne `LEADING` ou `TRAILING`\n(insensible à la casse), la\ncomparaison est effectuée sans espaces de début ou de fin,\nrespectivement.\n\nSi `collapse_spaces` reçoit une valeur true (voir les arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée avec tous les espaces blancs remplacés\npar un seul caractère d'espace.\n\nExemples :\n\nDoit être égal | ${x} | attendu | | \n---|---|---|---|--- \nDoit être égal | ${x} | attendu | Message d'erreur personnalisé | \nDoit être égal | ${x} | attendu | Message personnalisé | valeurs=Faux \nDoit être égal | ${x} | attendu | ignore_case=Vrai | formatter=repr \n\n`strip_spaces` est nouveau dans Robot Framework 4.0 et `collapse_spaces` est nouveau dans\nRobot Framework 4.1."
    },
    {
        "name": "Should Be Equal As Integers",
        "args": [
            {
                "name": "first",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "first"
            },
            {
                "name": "second",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "second"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "base",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "base=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if objects are unequal after converting them to integers.</p>\n<p>See <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> for information how to convert integers from other bases than 10 using <code>base</code> argument or <code>0b/0o/0x</code> prefixes.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>42</td>\n<td>${42}</td>\n<td>Error message</td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>ABCD</td>\n<td>abcd</td>\n<td>base=16</td>\n</tr>\n<tr>\n<td>Should Be Equal As Integers</td>\n<td>0b1011</td>\n<td>11</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Fails if objects are unequal after converting them to integers.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 741,
        "doc_fr": "Échoue si les objets sont inégaux après leur conversion en entiers.\n\nVoir Convertir en entier pour plus d'informations sur la conversion d'entiers à partir d'autres\nbases que 10 en utilisant l'argument `base` ou les préfixes `0b/0o/0x`.\n\nVoir Devrait être égal pour une explication sur la façon de remplacer le message d'erreur\npar défaut par `msg` et `values`.\n\nExemples :\n\nDoit être égal en nombres entiers | 42 | ${42} | Message d'erreur \n---|---|---|--- \nDoit être égal en nombres entiers | ABCD | abcd | base=16 \nDoit être égal en nombres entiers | 0b1011 | 11 | \n\n"
    },
    {
        "name": "Should Be Equal As Numbers",
        "args": [
            {
                "name": "first",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "first"
            },
            {
                "name": "second",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "second"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "precision",
                "type": null,
                "defaultValue": "6",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "precision=6"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if objects are unequal after converting them to real numbers.</p>\n<p>The conversion is done with <a href=\"#Convert%20To%20Number\" class=\"name\">Convert To Number</a> keyword using the given <code>precision</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be Equal As Numbers</td>\n<td>${x}</td>\n<td>1.1</td>\n<td></td>\n<td># Passes if ${x} is 1.1</td>\n</tr>\n<tr>\n<td>Should Be Equal As Numbers</td>\n<td>1.123</td>\n<td>1.1</td>\n<td>precision=1</td>\n<td># Passes</td>\n</tr>\n<tr>\n<td>Should Be Equal As Numbers</td>\n<td>1.123</td>\n<td>1.4</td>\n<td>precision=0</td>\n<td># Passes</td>\n</tr>\n<tr>\n<td>Should Be Equal As Numbers</td>\n<td>112.3</td>\n<td>75</td>\n<td>precision=-2</td>\n<td># Passes</td>\n</tr>\n</table>\n<p>As discussed in the documentation of <a href=\"#Convert%20To%20Number\" class=\"name\">Convert To Number</a>, machines generally cannot store floating point numbers accurately. Because of this limitation, comparing floats for equality is problematic and a correct approach to use depends on the context. This keyword uses a very naive approach of rounding the numbers before comparing them, which is both prone to rounding errors and does not work very well if numbers are really big or small. For more information about comparing floats, and ideas on how to implement your own context specific comparison algorithm, see <a href=\"http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\">http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/</a>.</p>\n<p>If you want to avoid possible problems with floating point numbers, you can implement custom keywords using Python's <a href=\"http://docs.python.org/library/decimal.html\">decimal</a> or <a href=\"http://docs.python.org/library/fractions.html\">fractions</a> modules.</p>\n<p>See <a href=\"#Should%20Not%20Be%20Equal%20As%20Numbers\" class=\"name\">Should Not Be Equal As Numbers</a> for a negative version of this keyword and <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>",
        "shortdoc": "Fails if objects are unequal after converting them to real numbers.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 778,
        "doc_fr": "Échoue si les objets sont inégaux après les avoir convertis en nombres réels.\n\nLa conversion est effectuée avec le mot-clé Convert To Number en utilisant la\n`precision` donnée.\n\nExemples :\n\nDoit être égal à des nombres | ${x} | 1,1 | | # Réussi si ${x} est 1,1 \n---|---|---|---|--- \nDoit être égal à des nombres | 1,123 | 1,1 | precision=1 | # Réussi \nDoit être égal à des nombres | 1,123 | 1,4 | precision=0 | # Réussi \nDoit être égal à des nombres | 112,3 | 75 | precision=-2 | # Réussi \n\nComme indiqué dans la documentation de Convert To Number, les machines\nne peuvent généralement pas stocker les nombres à virgule flottante avec précision. En raison de cette limitation,\ncomparer les nombres flottants pour l'égalité est problématique et une approche correcte à utiliser\ndépend du contexte. Ce mot-clé utilise une approche très naïve consistant à arrondir\nles nombres avant de les comparer, ce qui est à la fois sujet à des erreurs d'arrondi et\nne fonctionne pas très bien si les nombres sont vraiment grands ou petits. Pour plus\nd'informations sur la comparaison des nombres flottants et des idées sur la façon d'implémenter votre propre\nalgorithme de comparaison spécifique au contexte, consultez\n<http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-\nnumbers-2012-edition/>.\n\nSi vous souhaitez éviter d'éventuels problèmes avec les nombres à virgule flottante, vous\npouvez implémenter des mots-clés personnalisés à l'aide des modules\n[decimal](http://docs.python.org/library/decimal.html) ou\n[fractions](http://docs.python.org/library/fractions.html) de Python.\n\nVoir Ne doit pas être égal à des nombres pour une version négative de ce mot-clé et\nDoit être égal pour une explication sur la façon de remplacer le message d'erreur par défaut\npar `msg` et `values`."
    },
    {
        "name": "Should Be Equal As Strings",
        "args": [
            {
                "name": "first",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "first"
            },
            {
                "name": "second",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "second"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "formatter",
                "type": null,
                "defaultValue": "str",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "formatter=str"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if objects are unequal after converting them to strings.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code>, <code>values</code> and <code>formatter</code>.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), comparison is done case-insensitively. If both arguments are multiline strings, this keyword uses <a href=\"#Multiline%20string%20comparison\" class=\"name\">multiline string comparison</a>.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Strings are always <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">NFC normalized</a>.</p>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
        "shortdoc": "Fails if objects are unequal after converting them to strings.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 857,
        "doc_fr": "Échoue si les objets sont inégaux après leur conversion en chaînes.\n\nVoir Devrait être égal pour une explication sur la façon de remplacer le message d'erreur\npar défaut par `msg`, `values` et `formatter`.\n\nSi `ignore_case` reçoit une valeur true (voir Arguments booléens), la\ncomparaison est effectuée sans tenir compte de la casse. Si les deux arguments sont des chaînes multilignes, ce mot-clé\nutilise la comparaison de chaînes multilignes.\n\nSi `strip_spaces` reçoit une valeur true (voir Arguments booléens) et que les\ndeux arguments sont des chaînes, la comparaison est effectuée sans espaces de\ndébut et de fin. Si `strip_spaces` reçoit une valeur de chaîne `LEADING` ou `TRAILING`\n(insensible à la casse), la\ncomparaison est effectuée sans espaces de début et de fin,\nrespectivement.\n\nSi `collapse_spaces` reçoit une valeur true (voir les arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée avec tous les espaces blancs remplacés\npar un seul caractère espace.\n\nLes chaînes sont toujours [NFC\nnormalisées](https://en.wikipedia.org/wiki/Unicode_equivalence).\n\n`strip_spaces` est nouveau dans Robot Framework 4.0 et `collapse_spaces` est nouveau dans\nRobot Framework 4.1."
    },
    {
        "name": "Should Be True",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the given condition is not true.</p>\n<p>If <code>condition</code> is a string (e.g. <code>${rc} &lt; 10</code>), it is evaluated as a Python expression as explained in <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> and the keyword status is decided based on the result. If a non-string item is given, the status is got directly from its <a href=\"http://docs.python.org/library/stdtypes.html#truth\">truth value</a>.</p>\n<p>The default error message (<code>&lt;condition&gt; should be true</code>) is not very informative, but it can be overridden with the <code>msg</code> argument.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be True</td>\n<td>${rc} &lt; 10</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>'${status}' == 'PASS'</td>\n<td># Strings must be quoted</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${number}</td>\n<td># Passes if ${number} is not zero</td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>${list}</td>\n<td># Passes if ${list} is not empty</td>\n</tr>\n</table>\n<p>Variables used like <code>${variable}</code>, as in the examples above, are replaced in the expression before evaluation. Variables are also available in the evaluation namespace, and can be accessed using special <code>$variable</code> syntax as explained in the <a href=\"#Evaluating%20expressions\" class=\"name\">Evaluating expressions</a> section.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Be True</td>\n<td>$rc &lt; 10</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be True</td>\n<td>$status == 'PASS'</td>\n<td># Expected string must be quoted</td>\n</tr>\n</table>",
        "shortdoc": "Fails if the given condition is not true.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 553,
        "doc_fr": "Échoue si la condition donnée n'est pas vraie.\n\nSi `condition` est une chaîne (par exemple `${rc} < 10`), elle est évaluée comme une\nexpression Python comme expliqué dans Évaluation des expressions et le mot-clé status est\ndécidé en fonction du résultat. Si un élément non-chaîne est donné, le statut est obtenu\ndirectement à partir de sa [valeur\nvérité](http://docs.python.org/library/stdtypes.html#truth).\n\nLe message d'erreur par défaut (`<condition> should be true`) n'est pas\ntrès informatif, mais il peut être remplacé par l'argument `msg`.\n\nExemples :\n\nDoit être vrai | ${rc} < 10 | \n---|---|--- \nDoit être vrai | '${status}' == 'PASS' | # Les chaînes doivent être entre guillemets \nDoit être vrai | ${number} | # Passe si ${number} n'est pas nul \nDoit être vrai | ${liste} | # Passe si ${liste} n'est pas vide \n\nLes variables utilisées comme `${variable}`, comme dans les exemples ci-dessus, sont remplacées dans\nl'expression avant l'évaluation. Les variables sont également disponibles dans\nl'espace de noms d'évaluation et sont accessibles à l'aide de la syntaxe spéciale `$variable` comme\nexpliqué dans la section Évaluation des expressions.\n\nExemples :\n\nDoit être vrai | $rc < 10 | \n---|---|--- \nDoit être vrai | $status == 'PASS' | # La chaîne attendue doit être entre guillemets"
    },
    {
        "name": "Should Contain",
        "args": [
            {
                "name": "container",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "container"
            },
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>container</code> does not contain <code>item</code> one or more times.</p>\n<p>Works with strings, lists, bytes, and anything that supports Python's <code>in</code> operator.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with arguments <code>msg</code> and <code>values</code>.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and compared items are strings, it indicates that comparison should be case-insensitive. If the <code>container</code> is a list-like object, string items in it are compared case-insensitively.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>If the <code>container</code> is bytes and the <code>item</code> is a string, the <code>item</code> is automatically converted to bytes. Conversion is done using the ISO-8859-1 encoding that maps each Unicode code point directly to a matching byte.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Contain</td>\n<td>${output}</td>\n<td>PASS</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Contain</td>\n<td>${some list}</td>\n<td>value</td>\n<td>msg=Failure!</td>\n<td>values=False</td>\n</tr>\n<tr>\n<td>Should Contain</td>\n<td>${some list}</td>\n<td>value</td>\n<td>ignore_case=True</td>\n<td></td>\n</tr>\n</table>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0, <code>collapse_spaces</code> is new in Robot Framework 4.1 and automatically converting <code>item</code> to bytes is new in Robot Framework 7.1.</p>",
        "shortdoc": "Fails if ``container`` does not contain ``item`` one or more times.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1041,
        "doc_fr": "Échoue si `container` ne contient pas `item` une ou plusieurs fois.\n\nFonctionne avec des chaînes, des listes, des octets et tout ce qui prend en charge l'opérateur `in` de Python.\n\nVoir Should Be Equal pour une explication sur la façon de remplacer le message d'erreur par défaut\navec les arguments `msg` et `values`.\n\nSi `ignore_case` reçoit une valeur true (voir Arguments booléens) et que les\néléments comparés sont des chaînes, cela indique que la comparaison doit être insensible à la casse.\nSi `container` est un objet de type liste, les éléments de chaîne qu'il contient sont comparés insensiblement à la casse.\n\nSi `strip_spaces` reçoit une valeur true (voir Arguments booléens) et que les\ndeux arguments sont des chaînes, la comparaison est effectuée sans espaces de début et de fin. Si `strip_spaces` reçoit une valeur de chaîne `LEADING` ou `TRAILING`\n(insensible à la casse), la comparaison est effectuée sans espaces de début ou de fin,\nrespectivement.\n\nSi `collapse_spaces` reçoit une valeur true (voir arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée avec tous les espaces blancs remplacés\npar un seul caractère d'espace.\n\nSi le `container` est des octets et que `item` est une chaîne, l'`item` est\nautomatiquement converti en octets. La conversion est effectuée à l'aide du\ncodage ISO-8859-1 qui mappe chaque point de code Unicode directement à un octet correspondant.\n\nExemples :\n\nDoit contenir | ${output} | PASS | | \n---|---|---|---|--- \nDoit contenir | ${some list} | value | msg=Échec ! | valeurs=Faux\nDoit contenir | ${une liste} | valeur | ignore_case=True | \n\n`strip_spaces` est nouveau dans Robot Framework 4.0, `collapse_spaces` est nouveau dans\nRobot Framework 4.1 et la conversion automatique de `item` en octets est nouvelle dans\nRobot Framework 7.1."
    },
    {
        "name": "Should Contain Any",
        "args": [
            {
                "name": "container",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "container"
            },
            {
                "name": "items",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*items"
            },
            {
                "name": "configuration",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_NAMED",
                "required": false,
                "repr": "**configuration"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>container</code> does not contain any of the <code>*items</code>.</p>\n<p>Works with strings, lists, and anything that supports Python's <code>in</code> operator.</p>\n<p>Supports additional configuration parameters <code>msg</code>, <code>values</code>, <code>ignore_case</code> and <code>strip_spaces</code>, and <code>collapse_spaces</code> which have exactly the same semantics as arguments with same names have with <a href=\"#Should%20Contain\" class=\"name\">Should Contain</a>. These arguments must always be given using <code>name=value</code> syntax after all <code>items</code>.</p>\n<p>Note that possible equal signs in <code>items</code> must be escaped with a backslash (e.g. <code>foo\\=bar</code>) to avoid them to be passed in as <code>**configuration</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Contain Any</td>\n<td>${string}</td>\n<td>substring 1</td>\n<td>substring 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Contain Any</td>\n<td>${list}</td>\n<td>item 1</td>\n<td>item 2</td>\n<td>item 3</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Contain Any</td>\n<td>${list}</td>\n<td>item 1</td>\n<td>item 2</td>\n<td>item 3</td>\n<td>ignore_case=True</td>\n</tr>\n<tr>\n<td>Should Contain Any</td>\n<td>${list}</td>\n<td>@{items}</td>\n<td>msg=Custom message</td>\n<td>values=False</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Fails if ``container`` does not contain any of the ``*items``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1110,
        "doc_fr": "Échoue si `container` ne contient aucun des `*items`.\n\nFonctionne avec des chaînes, des listes et tout ce qui prend en charge l'opérateur `in` de Python.\n\nPrend en charge les paramètres de configuration supplémentaires `msg`, `values`, `ignore_case`\net `strip_spaces`, et `collapse_spaces` qui ont exactement la même\nsémantique que les arguments portant le même nom avec Should Contain. Ces\narguments doivent toujours être donnés en utilisant la syntaxe `name=value` après tous les `items`.\n\nNotez que les signes égaux possibles dans `items` doivent être échappés avec une barre oblique inverse\n(par exemple `foo\\=bar`) pour éviter qu'ils ne soient transmis en tant que `**configuration`.\n\nExemples :\n\nShould Contain Any | ${string} | substring 1 | substring 2 | | \n---|---|---|---|---|--- \nDoit contenir n'importe quel | ${list} | élément 1 | élément 2 | élément 3 | \nDoit contenir n'importe quel | ${list} | élément 1 | élément 2 | élément 3 | ignore_case=True \nDoit contenir n'importe quel | ${list} | @{items} | msg=Message personnalisé | valeurs=Faux |"
    },
    {
        "name": "Should Contain X Times",
        "args": [
            {
                "name": "container",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "container"
            },
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "count",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "count"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>container</code> does not contain <code>item</code> <code>count</code> times.</p>\n<p>Works with strings, lists and all objects that <a href=\"#Get%20Count\" class=\"name\">Get Count</a> works with. The default error message can be overridden with <code>msg</code> and the actual count is always logged.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and compared items are strings, it indicates that comparison should be case-insensitive. If the <code>container</code> is a list-like object, string items in it are compared case-insensitively.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Contain X Times</td>\n<td>${output}</td>\n<td>hello</td>\n<td>2</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Contain X Times</td>\n<td>${some list}</td>\n<td>value</td>\n<td>3</td>\n<td>ignore_case=True</td>\n</tr>\n</table>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
        "shortdoc": "Fails if ``container`` does not contain ``item`` ``count`` times.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1227,
        "doc_fr": "Échoue si `container` ne contient pas `item` `count` fois.\n\nFonctionne avec des chaînes, des listes et tous les objets avec lesquels Get Count fonctionne. Le\nmessage d'erreur par défaut peut être remplacé par `msg` et le nombre réel est\ntoujours enregistré.\n\nSi `ignore_case` reçoit une valeur true (voir les arguments booléens) et que les\néléments comparés sont des chaînes, cela indique que la comparaison doit être insensible à la casse.\nSi `container` est un objet de type liste, les éléments de chaîne qu'il contient sont\ncomparés sans tenir compte de la casse.\n\nSi `strip_spaces` reçoit une valeur true (voir les arguments booléens) et que les\ndeux arguments sont des chaînes, la comparaison est effectuée sans espaces de\ndébut et de fin. Si `strip_spaces` reçoit une valeur de chaîne `LEADING` ou `TRAILING`\n(insensible à la casse), la comparaison est effectuée sans espaces de\ndébut ou de fin, respectivement.\n\nSi `collapse_spaces` reçoit une valeur true (voir arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée avec tous les espaces blancs remplacés\npar un seul caractère espace.\n\nExemples :\n\nDoit contenir X fois | ${output} | hello | 2 | \n---|---|---|---|--- \nDoit contenir X fois | ${some list} | value | 3 | ignore_case=True \n\n`strip_spaces` est nouveau dans Robot Framework 4.0 et `collapse_spaces` est nouveau dans\nRobot Framework 4.1."
    },
    {
        "name": "Should End With",
        "args": [
            {
                "name": "str1",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "str1"
            },
            {
                "name": "str2",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "str2"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the string <code>str1</code> does not end with the string <code>str2</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>, as well as for semantics of the <code>ignore_case</code>, <code>strip_spaces</code>, and <code>collapse_spaces</code> options.</p>",
        "shortdoc": "Fails if the string ``str1`` does not end with the string ``str2``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 963,
        "doc_fr": "Échoue si la chaîne `str1` ne se termine pas par la chaîne `str2`.\n\nVoir Should Be Equal pour une explication sur la façon de remplacer le message d'erreur par défaut\navec `msg` et `values`, ainsi que pour la sémantique des options\n`ignore_case`, `strip_spaces` et `collapse_spaces`."
    },
    {
        "name": "Should Match",
        "args": [
            {
                "name": "string",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "string"
            },
            {
                "name": "pattern",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "pattern"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the given <code>string</code> does not match the given <code>pattern</code>.</p>\n<p>Pattern matching is similar as matching files in a shell with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for more information.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and compared items are strings, it indicates that comparison should be case-insensitive.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>",
        "shortdoc": "Fails if the given ``string`` does not match the given ``pattern``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1323,
        "doc_fr": "Échoue si la chaîne donnée ne correspond pas au motif donné.\n\nLa recherche de motifs est similaire à la recherche de fichiers dans un shell avec `*`, `?` et\n`[chars]` agissant comme caractères génériques. Consultez la section Motifs Glob pour plus\nd'informations.\n\nSi `ignore_case` reçoit une valeur true (voir Arguments booléens) et que les\néléments comparés sont des chaînes, cela indique que la comparaison doit être insensible à la casse.\n\nConsultez Devraient être égaux pour une explication sur la façon de remplacer le\nmessage d'erreur par défaut par `msg` et `values`."
    },
    {
        "name": "Should Match Regexp",
        "args": [
            {
                "name": "string",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "string"
            },
            {
                "name": "pattern",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "pattern"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "flags",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "flags=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>string</code> does not match <code>pattern</code> as a regular expression.</p>\n<p>See the <a href=\"#Regular%20expressions\" class=\"name\">Regular expressions</a> section for more information about regular expressions and how to use then in Robot Framework test data.</p>\n<p>Notice that the given pattern does not need to match the whole string. For example, the pattern <code>ello</code> matches the string <code>Hello world!</code>. If a full match is needed, the <code>^</code> and <code>$</code> characters can be used to denote the beginning and end of the string, respectively. For example, <code>^ello$</code> only matches the exact string <code>ello</code>.</p>\n<p>Possible flags altering how the expression is parsed (e.g. <code>re.IGNORECASE</code>, <code>re.MULTILINE</code>) can be given using the <code>flags</code> argument (e.g. <code>flags=IGNORECASE | MULTILINE</code>) or embedded to the pattern (e.g. <code>(?im)pattern</code>).</p>\n<p>If this keyword passes, it returns the portion of the string that matched the pattern. Additionally, the possible captured groups are returned.</p>\n<p>See the <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> keyword for an explanation on how to override the default error message with the <code>msg</code> and <code>values</code> arguments.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Match Regexp</td>\n<td>${output}</td>\n<td>\\\\d{6}</td>\n<td># Output contains six numbers</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Match Regexp</td>\n<td>${output}</td>\n<td>^\\\\d{6}$</td>\n<td># Six numbers and nothing more</td>\n<td></td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Should Match Regexp</td>\n<td>Foo: 42</td>\n<td>foo: \\\\d+</td>\n<td>flags=IGNORECASE</td>\n</tr>\n<tr>\n<td>${ret} =</td>\n<td>Should Match Regexp</td>\n<td>Foo: 42</td>\n<td>(?i)foo: \\\\d+</td>\n<td></td>\n</tr>\n<tr>\n<td>${match}</td>\n<td>${group1}</td>\n<td>${group2} =</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>Should Match Regexp</td>\n<td>Bar: 43</td>\n<td>(Foo|Bar): (\\\\d+)</td>\n<td></td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${ret} = 'Foo: 42'\n${match} = 'Bar: 43'\n${group1} = 'Bar'\n${group2} = '43'\n</pre>\n<p>The <code>flags</code> argument is new in Robot Framework 6.0.</p>",
        "shortdoc": "Fails if ``string`` does not match ``pattern`` as a regular expression.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1342,
        "doc_fr": "Échoue si `string` ne correspond pas à `pattern` en tant qu'expression régulière.\n\nVoir la section Expressions régulières pour plus d'informations sur les expressions\nrégulières et comment les utiliser dans les données de test de Robot Framework.\n\nNotez que le modèle donné n'a pas besoin de correspondre à la chaîne entière. Par\nexemple, le modèle `ello` correspond à la chaîne `Hello world!`. Si une correspondance\ncomplète est nécessaire, les caractères `^` et `$` peuvent être utilisés pour indiquer le\ndébut et la fin de la chaîne, respectivement. Par exemple, `^ello$` ne correspond qu'à la\nchaîne exacte `ello`.\n\nLes indicateurs possibles modifiant la façon dont l'expression est analysée (par exemple `re.IGNORECASE`, `re.MULTILINE`) peuvent être donnés à l'aide de l'argument `flags` (par exemple `flags=IGNORECASE | MULTILINE`) ou intégrés au modèle (par exemple `(?im)pattern`).\n\nSi ce mot-clé est réussi, il renvoie la partie de la chaîne qui correspond au\nmodèle. De plus, les groupes capturés possibles sont renvoyés.\n\nVoir le mot-clé Should Be Equal pour une explication sur la façon de remplacer le\nmessage d'erreur par défaut avec les arguments `msg` et `values`.\n\nExemples :\n\nDoit correspondre à Regexp | ${output} | \\\\\\d{6} | # La sortie contient six nombres | \n---|---|---|---|--- \nDoit correspondre à Regexp | ${output} | ^\\\\\\d{6}$ | # Six nombres et rien de plus | \n${ret} = | Doit correspondre à Regexp | Foo : 42 | foo : \\\\\\d+ | flags=IGNORECASE \n${ret} = | Doit correspondre à Regexp | Foo : 42 | (?i)foo : \\\\\\d+ | \n${match} | ${group1} | ${group2} = | | \n... | Doit correspondre à Regexp | Bar : 43 | (Foo|Bar) : (\\\\\\d+) | \n\n=>\n\n${ret} = 'Foo : 42'\n${match} = 'Bar : 43'\n${group1} = 'Bar'\n${group2} = '43'\n\nL'argument `flags` est nouveau dans Robot Framework 6.0."
    },
    {
        "name": "Should Not Be Empty",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the given item is not empty.</p>\n<p>The length of the item is got using the <a href=\"#Get%20Length\" class=\"name\">Get Length</a> keyword. The default error message can be overridden with the <code>msg</code> argument.</p>",
        "shortdoc": "Verifies that the given item is not empty.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1469,
        "doc_fr": "Vérifie que l'élément donné n'est pas vide.\n\nLa longueur de l'élément est obtenue à l'aide du mot-clé Get Length. Le message d'erreur par défaut\npeut être remplacé par l'argument `msg`."
    },
    {
        "name": "Should Not Be Equal",
        "args": [
            {
                "name": "first",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "first"
            },
            {
                "name": "second",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "second"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the given objects are equal.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, comparison is done case-insensitively.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
        "shortdoc": "Fails if the given objects are equal.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 684,
        "doc_fr": "Échoue si les objets donnés sont égaux.\n\nVoir Devraient être égaux pour une explication sur la façon de remplacer le message d'erreur\npar défaut par `msg` et `values`.\n\nSi `ignore_case` reçoit une valeur true (voir les arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée sans distinction de casse.\n\nSi `strip_spaces` reçoit une valeur true (voir les arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée sans espaces de début et de fin.\nSi `strip_spaces` reçoit une valeur de chaîne `LEADING` ou `TRAILING`\n(insensible à la casse), la comparaison est effectuée sans espaces de début ou de fin,\nrespectivement.\n\nSi `collapse_spaces` reçoit une valeur true (voir les arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée avec tous les espaces blancs remplacés\npar un seul caractère espace.\n\n`strip_spaces` est nouveau dans Robot Framework 4.0 et `collapse_spaces` est nouveau dans\nRobot Framework 4.1."
    },
    {
        "name": "Should Not Be Equal As Integers",
        "args": [
            {
                "name": "first",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "first"
            },
            {
                "name": "second",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "second"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "base",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "base=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if objects are equal after converting them to integers.</p>\n<p>See <a href=\"#Convert%20To%20Integer\" class=\"name\">Convert To Integer</a> for information how to convert integers from other bases than 10 using <code>base</code> argument or <code>0b/0o/0x</code> prefixes.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal%20As%20Integers\" class=\"name\">Should Be Equal As Integers</a> for some usage examples.</p>",
        "shortdoc": "Fails if objects are equal after converting them to integers.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 724,
        "doc_fr": "Échoue si les objets sont égaux après les avoir convertis en entiers.\n\nVoir Convertir en entier pour plus d'informations sur la conversion d'entiers à partir d'autres\nbases que 10 à l'aide de l'argument `base` ou des préfixes `0b/0o/0x`.\n\nVoir Devrait être égal pour une explication sur la façon de remplacer le message d'erreur\npar défaut par `msg` et `values`.\n\nVoir Devrait être égal en tant qu'entiers pour quelques exemples d'utilisation."
    },
    {
        "name": "Should Not Be Equal As Numbers",
        "args": [
            {
                "name": "first",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "first"
            },
            {
                "name": "second",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "second"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "precision",
                "type": null,
                "defaultValue": "6",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "precision=6"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if objects are equal after converting them to real numbers.</p>\n<p>The conversion is done with <a href=\"#Convert%20To%20Number\" class=\"name\">Convert To Number</a> keyword using the given <code>precision</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal%20As%20Numbers\" class=\"name\">Should Be Equal As Numbers</a> for examples on how to use <code>precision</code> and why it does not always work as expected. See also <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>",
        "shortdoc": "Fails if objects are equal after converting them to real numbers.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 761,
        "doc_fr": "Échoue si les objets sont égaux après les avoir convertis en nombres réels.\n\nLa conversion est effectuée avec le mot-clé Convert To Number en utilisant la\n`precision` donnée.\n\nVoir Should Be Equal As Numbers pour des exemples sur la façon d'utiliser `precision` et pourquoi\ncela ne fonctionne pas toujours comme prévu. Voir également Should Be Equal pour une\nexplication sur la façon de remplacer le message d'erreur par défaut par `msg` et\n`values`."
    },
    {
        "name": "Should Not Be Equal As Strings",
        "args": [
            {
                "name": "first",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "first"
            },
            {
                "name": "second",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "second"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if objects are equal after converting them to strings.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), comparison is done case-insensitively.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Strings are always <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\">NFC normalized</a>.</p>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
        "shortdoc": "Fails if objects are equal after converting them to strings.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 816,
        "doc_fr": "Échoue si les objets sont égaux après les avoir convertis en chaînes.\n\nVoir Devraient être égaux pour une explication sur la façon de remplacer le message d'erreur\npar défaut par `msg` et `values`.\n\nSi `ignore_case` reçoit une valeur true (voir Arguments booléens), la\ncomparaison est effectuée sans distinction de casse.\n\nSi `strip_spaces` reçoit une valeur true (voir Arguments booléens) et que les\ndeux arguments sont des chaînes, la\ncomparaison est effectuée sans espaces de début et de fin.\nSi `strip_spaces` reçoit une valeur de chaîne `LEADING` ou `TRAILING`\n(insensible à la casse), la\ncomparaison est effectuée sans espaces de début ou de fin,\nrespectivement.\n\nSi `collapse_spaces` reçoit une valeur true (voir Arguments booléens) et que les\ndeux arguments sont des chaînes, la comparaison est effectuée avec tous les espaces blancs remplacés\npar un seul caractère espace.\n\nLes chaînes sont toujours [NFC\nnormalisées](https://en.wikipedia.org/wiki/Unicode_equivalence).\n\n`strip_spaces` est une nouveauté dans Robot Framework 4.0 et `collapse_spaces` est une nouveauté dans\nRobot Framework 4.1."
    },
    {
        "name": "Should Not Be True",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the given condition is true.</p>\n<p>See <a href=\"#Should%20Be%20True\" class=\"name\">Should Be True</a> for details about how <code>condition</code> is evaluated and how <code>msg</code> can be used to override the default error message.</p>",
        "shortdoc": "Fails if the given condition is true.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 544,
        "doc_fr": "Échoue si la condition donnée est vraie.\n\nVoir Should Be True pour plus de détails sur la façon dont `condition` est évaluée et comment\n`msg` peut être utilisé pour remplacer le message d'erreur par défaut."
    },
    {
        "name": "Should Not Contain",
        "args": [
            {
                "name": "container",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "container"
            },
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>container</code> contains <code>item</code> one or more times.</p>\n<p>Works with strings, lists, and anything that supports Python's <code>in</code> operator.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with arguments <code>msg</code> and <code>values</code>. <code>ignore_case</code> has exactly the same semantics as with <a href=\"#Should%20Contain\" class=\"name\">Should Contain</a>.</p>\n<p>If <code>strip_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done without leading and trailing spaces. If <code>strip_spaces</code> is given a string value <code>LEADING</code> or <code>TRAILING</code> (case-insensitive), the comparison is done without leading or trailing spaces, respectively.</p>\n<p>If <code>collapse_spaces</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) and both arguments are strings, the comparison is done with all white spaces replaced by a single space character.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Not Contain</td>\n<td>${some list}</td>\n<td>value</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Contain</td>\n<td>${output}</td>\n<td>FAILED</td>\n<td>ignore_case=True</td>\n</tr>\n</table>\n<p><code>strip_spaces</code> is new in Robot Framework 4.0 and <code>collapse_spaces</code> is new in Robot Framework 4.1.</p>",
        "shortdoc": "Fails if ``container`` contains ``item`` one or more times.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 984,
        "doc_fr": "Échoue si `container` contient `item` une ou plusieurs fois.\n\nFonctionne avec des chaînes, des listes et tout ce qui prend en charge l'opérateur `in` de Python.\n\nVoir Should Be Equal pour une explication sur la façon de remplacer le message d'erreur\npar défaut avec les arguments `msg` et `values`. `ignore_case` a exactement la même\nsémantique que Should Contain.\n\nSi `strip_spaces` reçoit une valeur true (voir Arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée sans espaces de début et de fin.\nSi `strip_spaces` reçoit une valeur de chaîne `LEADING` ou `TRAILING`\n(insensible à la casse), la comparaison est effectuée sans espaces de début ou de fin,\nrespectivement.\n\nSi `collapse_spaces` reçoit une valeur true (voir arguments booléens) et que les deux\narguments sont des chaînes, la comparaison est effectuée avec tous les espaces blancs remplacés\npar un seul caractère espace.\n\nExemples :\n\nNe doit pas contenir | ${une liste} | valeur | \n---|---|---|--- \nNe doit pas contenir | ${output} | ÉCHEC | ignore_case=True \n\n`strip_spaces` est nouveau dans Robot Framework 4.0 et `collapse_spaces` est nouveau dans\nRobot Framework 4.1."
    },
    {
        "name": "Should Not Contain Any",
        "args": [
            {
                "name": "container",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "container"
            },
            {
                "name": "items",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*items"
            },
            {
                "name": "configuration",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_NAMED",
                "required": false,
                "repr": "**configuration"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>container</code> contains one or more of the <code>*items</code>.</p>\n<p>Works with strings, lists, and anything that supports Python's <code>in</code> operator.</p>\n<p>Supports additional configuration parameters <code>msg</code>, <code>values</code>, <code>ignore_case</code> and <code>strip_spaces</code>, and <code>collapse_spaces</code> which have exactly the same semantics as arguments with same names have with <a href=\"#Should%20Contain\" class=\"name\">Should Contain</a>. These arguments must always be given using <code>name=value</code> syntax after all <code>items</code>.</p>\n<p>Note that possible equal signs in <code>items</code> must be escaped with a backslash (e.g. <code>foo\\=bar</code>) to avoid them to be passed in as <code>**configuration</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Not Contain Any</td>\n<td>${string}</td>\n<td>substring 1</td>\n<td>substring 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Contain Any</td>\n<td>${list}</td>\n<td>item 1</td>\n<td>item 2</td>\n<td>item 3</td>\n<td></td>\n</tr>\n<tr>\n<td>Should Not Contain Any</td>\n<td>${list}</td>\n<td>item 1</td>\n<td>item 2</td>\n<td>item 3</td>\n<td>ignore_case=True</td>\n</tr>\n<tr>\n<td>Should Not Contain Any</td>\n<td>${list}</td>\n<td>@{items}</td>\n<td>msg=Custom message</td>\n<td>values=False</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Fails if ``container`` contains one or more of the ``*items``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1169,
        "doc_fr": "Échoue si `container` contient un ou plusieurs des `*items`.\n\nFonctionne avec des chaînes, des listes et tout ce qui prend en charge l'opérateur `in` de Python.\n\nPrend en charge les paramètres de configuration supplémentaires `msg`, `values`, `ignore_case`\net `strip_spaces`, et `collapse_spaces` qui ont exactement la même\nsémantique que les arguments portant le même nom avec Should Contain. Ces\narguments doivent toujours être donnés en utilisant la syntaxe `name=value` après tous les `items`.\n\nNotez que les signes égaux possibles dans `items` doivent être échappés avec une barre oblique inverse\n(par exemple `foo\\=bar`) pour éviter qu'ils ne soient transmis en tant que `**configuration`.\n\nExemples :\n\nShould Not Contain Any | ${string} | substring 1 | substring 2 | | \n---|---|---|---|---|--- \nNe devrait contenir aucun | ${list} | élément 1 | élément 2 | élément 3 | \nNe devrait contenir aucun | ${list} | élément 1 | élément 2 | élément 3 | ignore_case=True \nNe devrait contenir aucun | ${list} | @{items} | msg=Message personnalisé | valeurs=Faux |"
    },
    {
        "name": "Should Not End With",
        "args": [
            {
                "name": "str1",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "str1"
            },
            {
                "name": "str2",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "str2"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the string <code>str1</code> ends with the string <code>str2</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>, as well as for semantics of the <code>ignore_case</code>, <code>strip_spaces</code>, and <code>collapse_spaces</code> options.</p>",
        "shortdoc": "Fails if the string ``str1`` ends with the string ``str2``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 941,
        "doc_fr": "Échoue si la chaîne « str1 » se termine par la chaîne « str2 ».\n\nVoir Should Be Equal pour une explication sur la façon de remplacer le message d'erreur par défaut\npar « msg » et « values », ainsi que pour la sémantique des options\n« ignore_case », « strip_spaces » et « collapse_spaces »."
    },
    {
        "name": "Should Not Match",
        "args": [
            {
                "name": "string",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "string"
            },
            {
                "name": "pattern",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "pattern"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the given <code>string</code> matches the given <code>pattern</code>.</p>\n<p>Pattern matching is similar as matching files in a shell with <code>*</code>, <code>?</code> and <code>[chars]</code> acting as wildcards. See the <a href=\"#Glob%20patterns\" class=\"name\">Glob patterns</a> section for more information.</p>\n<p>If <code>ignore_case</code> is given a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the comparison is case-insensitive.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <span class=\"name\">`values</span>.</p>",
        "shortdoc": "Fails if the given ``string`` matches the given ``pattern``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1305,
        "doc_fr": "Échoue si la chaîne donnée correspond au motif donné.\n\nLa correspondance de motifs est similaire à la correspondance de fichiers dans un shell avec `*`, `?` et\n`[chars]` agissant comme caractères génériques. Consultez la section Motifs Glob pour plus\nd'informations.\n\nSi `ignore_case` reçoit une valeur true (voir Arguments booléens), la\ncomparaison est insensible à la casse.\n\nConsultez Devrait être égal pour une explication sur la façon de remplacer le\nmessage d'erreur par défaut par `msg` et `values."
    },
    {
        "name": "Should Not Match Regexp",
        "args": [
            {
                "name": "string",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "string"
            },
            {
                "name": "pattern",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "pattern"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "flags",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "flags=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>string</code> matches <code>pattern</code> as a regular expression.</p>\n<p>See <a href=\"#Should%20Match%20Regexp\" class=\"name\">Should Match Regexp</a> for more information about arguments.</p>",
        "shortdoc": "Fails if ``string`` matches ``pattern`` as a regular expression.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1391,
        "doc_fr": "Échoue si « string » correspond à « pattern » en tant qu'expression régulière.\n\nVoir Doit correspondre à Regexp pour plus d'informations sur les arguments."
    },
    {
        "name": "Should Not Start With",
        "args": [
            {
                "name": "str1",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "str1"
            },
            {
                "name": "str2",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "str2"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the string <code>str1</code> starts with the string <code>str2</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>, as well as for semantics of the <code>ignore_case</code>, <code>strip_spaces</code>, and <code>collapse_spaces</code> options.</p>",
        "shortdoc": "Fails if the string ``str1`` starts with the string ``str2``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 898,
        "doc_fr": "Échoue si la chaîne « str1 » commence par la chaîne « str2 ».\n\nVoir Should Be Equal pour une explication sur la façon de remplacer le message d'erreur par défaut\npar « msg » et « values », ainsi que pour la sémantique des options\n« ignore_case », « strip_spaces » et « collapse_spaces »."
    },
    {
        "name": "Should Start With",
        "args": [
            {
                "name": "str1",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "str1"
            },
            {
                "name": "str2",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "str2"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            },
            {
                "name": "strip_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "strip_spaces=False"
            },
            {
                "name": "collapse_spaces",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "collapse_spaces=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the string <code>str1</code> does not start with the string <code>str2</code>.</p>\n<p>See <a href=\"#Should%20Be%20Equal\" class=\"name\">Should Be Equal</a> for an explanation on how to override the default error message with <code>msg</code> and <code>values</code>, as well as for semantics of the <code>ignore_case</code>, <code>strip_spaces</code>, and <code>collapse_spaces</code> options.</p>",
        "shortdoc": "Fails if the string ``str1`` does not start with the string ``str2``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 920,
        "doc_fr": "Échoue si la chaîne `str1` ne commence pas par la chaîne `str2`.\n\nVoir Should Be Equal pour une explication sur la façon de remplacer le message d'erreur par défaut\navec `msg` et `values`, ainsi que pour la sémantique des options\n`ignore_case`, `strip_spaces` et `collapse_spaces`."
    },
    {
        "name": "Skip",
        "args": [
            {
                "name": "msg",
                "type": null,
                "defaultValue": "Skipped with Skip keyword.",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=Skipped with Skip keyword."
            }
        ],
        "returnType": null,
        "doc": "<p>Skips the rest of the current test.</p>\n<p>Skips the remaining keywords in the current test and sets the given message to the test. If the test has teardown, it will be executed.</p>",
        "shortdoc": "Skips the rest of the current test.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2593,
        "doc_fr": "Ignore le reste du test en cours.\n\nIgnore les mots-clés restants dans le test en cours et définit le message donné\nsur le test. Si le test comporte un démontage, il sera exécuté."
    },
    {
        "name": "Skip If",
        "args": [
            {
                "name": "condition",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Skips the rest of the current test if the <code>condition</code> is True.</p>\n<p>Skips the remaining keywords in the current test and sets the given message to the test. If <code>msg</code> is not given, the <code>condition</code> will be used as the message. If the test has teardown, it will be executed.</p>\n<p>If the <code>condition</code> evaluates to False, does nothing.</p>",
        "shortdoc": "Skips the rest of the current test if the ``condition`` is True.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2601,
        "doc_fr": "Ignore le reste du test en cours si la « condition » est vraie.\n\nIgnore les mots-clés restants dans le test en cours et définit le message donné\nsur le test. Si « msg » n'est pas donné, la « condition » sera utilisée comme message.\nSi le test comporte un démontage, il sera exécuté.\n\nSi la « condition » est évaluée à False, ne fait rien."
    },
    {
        "name": "Sleep",
        "args": [
            {
                "name": "time_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "time_"
            },
            {
                "name": "reason",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "reason=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Pauses the test executed for the given time.</p>\n<p><code>time</code> may be either a number or a time string. Time strings are in a format such as <code>1 day 2 hours 3 minutes 4 seconds 5milliseconds</code> or <code>1d 2h 3m 4s 5ms</code>, and they are fully explained in an appendix of Robot Framework User Guide. Providing a value without specifying minutes or seconds, defaults to seconds. Optional <span class=\"name\">reason</span> can be used to explain why sleeping is necessary. Both the time slept and the reason are logged.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Sleep</td>\n<td>42</td>\n<td></td>\n</tr>\n<tr>\n<td>Sleep</td>\n<td>1.5</td>\n<td></td>\n</tr>\n<tr>\n<td>Sleep</td>\n<td>2 minutes 10 seconds</td>\n<td></td>\n</tr>\n<tr>\n<td>Sleep</td>\n<td>10s</td>\n<td>Wait for a reply</td>\n</tr>\n</table>",
        "shortdoc": "Pauses the test executed for the given time.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2973,
        "doc_fr": "Met en pause le test exécuté pendant la durée donnée.\n\n`time` peut être un nombre ou une chaîne de temps. Les chaînes de temps sont au format\ntel que `1 jour 2 heures 3 minutes 4 secondes 5 millisecondes` ou `1j 2h 3m 4s\n5ms`, et elles sont entièrement expliquées dans une annexe du Guide de l'utilisateur de Robot Framework. En fournissant une valeur sans spécifier de minutes ou de secondes, la valeur par défaut est\nsecondes. Une raison facultative peut être utilisée pour expliquer pourquoi il est nécessaire de dormir.\nLe temps de sommeil et la raison sont enregistrés.\n\nExemples :\n\nSleep | 42 | \n---|---|--- \nSleep | 1.5 | \nSleep | 2 minutes 10 secondes | \nSleep | 10s | Attendre une réponse"
    },
    {
        "name": "Variable Should Exist",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails unless the given variable exists within the current scope.</p>\n<p>The name of the variable can be given either as a normal variable name like <code>${name}</code> or in escaped format like <code>$name</code> or <code>\\${name}</code>. For the reasons explained in the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section, using the escaped format is recommended.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>See also <a href=\"#Variable%20Should%20Not%20Exist\" class=\"name\">Variable Should Not Exist</a> and <a href=\"#Keyword%20Should%20Exist\" class=\"name\">Keyword Should Exist</a>.</p>",
        "shortdoc": "Fails unless the given variable exists within the current scope.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1570,
        "doc_fr": "Échoue à moins que la variable donnée n'existe dans la portée actuelle.\n\nLe nom de la variable peut être donné soit sous la forme d'un nom de variable normal comme\n`${name}` ou sous la forme d'un format échappé comme `$name` ou `\\${name}`. Pour les raisons\nexpliquées dans la section Utilisation de variables avec des mots-clés pour créer ou accéder à des variables\n, il est recommandé d'utiliser le format échappé.\n\nLe message d'erreur par défaut peut être remplacé par l'argument `msg`.\n\nVoir également La variable ne doit pas exister et Le mot-clé doit exister."
    },
    {
        "name": "Variable Should Not Exist",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the given variable exists within the current scope.</p>\n<p>The name of the variable can be given either as a normal variable name like <code>${name}</code> or in escaped format like <code>$name</code> or <code>\\${name}</code>. For the reasons explained in the <a href=\"#Using%20variables%20with%20keywords%20creating%20or%20accessing%20variables\" class=\"name\">Using variables with keywords creating or accessing variables</a> section, using the escaped format is recommended.</p>\n<p>The default error message can be overridden with the <code>msg</code> argument.</p>\n<p>See also <a href=\"#Variable%20Should%20Exist\" class=\"name\">Variable Should Exist</a> and <a href=\"#Keyword%20Should%20Exist\" class=\"name\">Keyword Should Exist</a>.</p>",
        "shortdoc": "Fails if the given variable exists within the current scope.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 1590,
        "doc_fr": "Échoue si la variable donnée existe dans la portée actuelle.\n\nLe nom de la variable peut être donné soit sous la forme d'un nom de variable normal comme\n`${name}` ou sous la forme d'un format échappé comme `$name` ou `\\${name}`. Pour les raisons\nexpliquées dans la section Utilisation de variables avec des mots-clés pour créer ou accéder à des variables\n, il est recommandé d'utiliser le format échappé.\n\nLe message d'erreur par défaut peut être remplacé par l'argument `msg`.\n\nVoir également La variable doit exister et Le mot-clé doit exister."
    },
    {
        "name": "Wait Until Keyword Succeeds",
        "args": [
            {
                "name": "retry",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "retry"
            },
            {
                "name": "retry_interval",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "retry_interval"
            },
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            }
        ],
        "returnType": null,
        "doc": "<p>Runs the specified keyword and retries if it fails.</p>\n<p><code>name</code> and <code>args</code> define the keyword that is executed similarly as with <a href=\"#Run%20Keyword\" class=\"name\">Run Keyword</a>. How long to retry running the keyword is defined using <code>retry</code> argument either as timeout or count. <code>retry_interval</code> is the time to wait between execution attempts.</p>\n<p>If <code>retry</code> is given as timeout, it must be in Robot Framework's time format (e.g. <code>1 minute</code>, <code>2 min 3 s</code>, <code>4.5</code>) that is explained in an appendix of Robot Framework User Guide. If it is given as count, it must have <code>times</code> or <code>x</code> postfix (e.g. <code>5 times</code>, <code>10 x</code>). <code>retry_interval</code> must always be given in Robot Framework's time format.</p>\n<p>By default, <code>retry_interval</code> is the time to wait <i>after</i> a keyword has failed. For example, if the first run takes 2 seconds and the retry interval is 3 seconds, the second run starts 5 seconds after the first run started. If <code>retry_interval</code> start with prefix <code>strict:</code>, the execution time of the previous keyword is subtracted from the retry time. With the earlier example the second run would thus start 3 seconds after the first run started. A warning is logged if keyword execution time is longer than a strict interval.</p>\n<p>If the keyword does not succeed regardless of retries, this keyword fails. If the executed keyword passes, its return value is returned.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Wait Until Keyword Succeeds</td>\n<td>2 min</td>\n<td>5 sec</td>\n<td>My keyword</td>\n<td>argument</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait Until Keyword Succeeds</td>\n<td>3x</td>\n<td>200ms</td>\n<td>My keyword</td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td>Wait Until Keyword Succeeds</td>\n<td>3x</td>\n<td>strict: 200ms</td>\n<td>My keyword</td>\n</tr>\n</table>\n<p>All normal failures are caught by this keyword. Errors caused by invalid syntax, test or keyword timeouts, or fatal exceptions (caused e.g. by <a href=\"#Fatal%20Error\" class=\"name\">Fatal Error</a>) are not caught.</p>\n<p>Running the same keyword multiple times inside this keyword can create lots of output and considerably increase the size of the generated output files. It is possible to remove unnecessary keywords from the outputs using the <code>--remove-keywords WUKS</code> command line option.</p>\n<p>Support for \"strict\" retry interval is new in Robot Framework 4.1.</p>",
        "shortdoc": "Runs the specified keyword and retries if it fails.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/BuiltIn.py",
        "lineno": 2353,
        "doc_fr": "Exécute le mot-clé spécifié et réessaye en cas d'échec.\n\n`name` et `args` définissent le mot-clé qui est exécuté de la même manière qu'avec Run\nKeyword. Le temps nécessaire pour réessayer d'exécuter le mot-clé est défini à l'aide de l'argument `retry`\nsoit comme timeout, soit comme count. `retry_interval` est le temps d'attente\nentre les tentatives d'exécution.\n\nSi `retry` est donné comme timeout, il doit être au format horaire de Robot Framework\n(par exemple `1 minute`, `2 min 3 s`, `4.5`) qui est expliqué dans une annexe du\nGuide de l'utilisateur de Robot Framework. S'il est donné comme count, il doit avoir le suffixe `times` ou\n`x` (par exemple `5 times`, `10 x`). `retry_interval` doit toujours être donné au format horaire de\nRobot Framework.\n\nPar défaut, `retry_interval` est le temps d'attente _après_ l'échec d'un mot-clé.\nPar exemple, si la première exécution dure 2 secondes et que l'intervalle de nouvelle tentative est de 3\nsecondes, la deuxième exécution démarre 5 secondes après le début de la première exécution. Si\n`retry_interval` commence par le préfixe `strict:`, le temps d'exécution du\nmot-clé précédent est soustrait du temps de nouvelle tentative. Avec l'exemple précédent\nla deuxième exécution démarrerait donc 3 secondes après le début de la première exécution. Un\navertissement est enregistré si le temps d'exécution du mot-clé est plus long qu'un intervalle strict.\n\nSi le mot-clé ne réussit pas indépendamment des nouvelles tentatives, ce mot-clé échoue. Si\nle mot-clé exécuté réussit, sa valeur de retour est renvoyée.\n\nExemples :\n\nAttendre que le mot-clé réussisse | 2 min | 5 sec | Mon mot-clé | argument \n---|---|---|---|--- \n${result} = | Attendre que le mot-clé réussisse | 3x | 200 ms | Mon mot-clé \n${result} = | Attendre que le mot-clé réussisse | 3x | strict: 200ms | Mon mot-clé \n\nTous les échecs normaux sont détectés par ce mot-clé. Les erreurs causées par une syntaxe\nnon valide, des dépassements de délai de test ou de mot-clé ou des exceptions fatales (causées par exemple par une\nerreur fatale) ne sont pas détectées.\n\nL'exécution du même mot-clé plusieurs fois à l'intérieur de ce mot-clé peut créer beaucoup de\nsorties et augmenter considérablement la taille des fichiers de sortie générés. Il est\npossible de supprimer les mots-clés inutiles des sorties à l'aide de l'option de ligne de commande `--remove-\nkeywords WUKS`.\n\nLa prise en charge de l'intervalle de nouvelle tentative « strict » est une nouveauté dans Robot Framework 4.1."
    }
]