[
    {
        "name": "Append To List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Adds <code>values</code> to the end of <code>list</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Append To List</td>\n<td>${L1}</td>\n<td>xxx</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Append To List</td>\n<td>${L2}</td>\n<td>x</td>\n<td>y</td>\n<td>z</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L1} = ['a', 'xxx']\n${L2} = ['a', 'b', 'x', 'y', 'z']\n</pre>",
        "shortdoc": "Adds ``values`` to the end of ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 40,
        "doc_fr": "Ajoute `values` à la fin de `list`.\n\nExemple :\n\nAjouter à la liste | ${L1} | xxx | | \n---|---|---|---|--- \nAjouter à la liste | ${L2} | x | y | z \n\n=>\n\n${L1} = ['a', 'xxx']\n${L2} = ['a', 'b', 'x', 'y', 'z']"
    },
    {
        "name": "Combine Lists",
        "args": [
            {
                "name": "lists",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*lists"
            }
        ],
        "returnType": null,
        "doc": "<p>Combines the given <code>lists</code> together and returns the result.</p>\n<p>The given lists are not altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Combine Lists</td>\n<td>${L1}</td>\n<td>${L2}</td>\n<td></td>\n</tr>\n<tr>\n<td>${y} =</td>\n<td>Combine Lists</td>\n<td>${L1}</td>\n<td>${L2}</td>\n<td>${L1}</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = ['a', 'a', 'b']\n${y} = ['a', 'a', 'b', 'a']\n${L1} and ${L2} are not changed.\n</pre>",
        "shortdoc": "Combines the given ``lists`` together and returns the result.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 78,
        "doc_fr": "Combine les listes données et renvoie le résultat.\n\nLes listes données ne sont pas modifiées par ce mot-clé.\n\nExemple :\n\n${x} = | Combiner les listes | ${L1} | ${L2} | \n---|---|---|---|--- \n${y} = | Combiner les listes | ${L1} | ${L2} | ${L1} \n\n=>\n\n${x} = ['a', 'a', 'b']\n${y} = ['a', 'a', 'b', 'a']\n${L1} et ${L2} ne sont pas modifiés."
    },
    {
        "name": "Convert To Dictionary",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given <code>item</code> to a Python <code>dict</code> type.</p>\n<p>Mainly useful for converting other mappings to normal dictionaries. This includes converting Robot Framework's own <code>DotDict</code> instances that it uses if variables are created using the <code>&amp;{var}</code> syntax.</p>\n<p>Use <span class=\"name\">Create Dictionary</span> from the BuiltIn library for constructing new dictionaries.</p>",
        "shortdoc": "Converts the given ``item`` to a Python ``dict`` type.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 506,
        "doc_fr": "Convertit l'élément `item` donné en un type Python `dict`.\n\nPrincipalement utile pour convertir d'autres mappages en dictionnaires normaux. Cela\ninclut la conversion des propres instances `DotDict` de Robot Framework qu'il utilise si\ndes variables sont créées à l'aide de la syntaxe `&{var}`.\n\nUtilisez Create Dictionary de la bibliothèque BuiltIn pour construire de nouveaux\ndictionnaires."
    },
    {
        "name": "Convert To List",
        "args": [
            {
                "name": "item",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "item"
            }
        ],
        "returnType": null,
        "doc": "<p>Converts the given <code>item</code> to a Python <code>list</code> type.</p>\n<p>Mainly useful for converting tuples and other iterable to lists. Use <span class=\"name\">Create List</span> from the BuiltIn library for constructing new lists.</p>",
        "shortdoc": "Converts the given ``item`` to a Python ``list`` type.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 32,
        "doc_fr": "Convertit l'élément donné en un type de liste Python.\n\nPrincipalement utile pour convertir des tuples et autres itérables en listes. Utilisez Create\nList de la bibliothèque BuiltIn pour construire de nouvelles listes."
    },
    {
        "name": "Copy Dictionary",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "deepcopy",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "deepcopy=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns a copy of the given dictionary.</p>\n<p>By default, returns a new dictionary with same items as in the original. Set the <code>deepcopy</code> argument to a true value if also items should be copied.</p>\n<p>The given dictionary is never altered by this keyword.</p>",
        "shortdoc": "Returns a copy of the given dictionary.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 601,
        "doc_fr": "Renvoie une copie du dictionnaire donné.\n\nPar défaut, renvoie un nouveau dictionnaire avec les mêmes éléments que dans l'original. Définissez\nl'argument `deepcopy` sur une valeur true si des éléments doivent également être copiés.\n\nLe dictionnaire donné n'est jamais modifié par ce mot-clé."
    },
    {
        "name": "Copy List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "deepcopy",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "deepcopy=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns a copy of the given list.</p>\n<p>By default, returns a new list with same items as in the original. Set the <code>deepcopy</code> argument to a true value if also items should be copied.</p>\n<p>The given list is never altered by this keyword.</p>",
        "shortdoc": "Returns a copy of the given list.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 266,
        "doc_fr": "Renvoie une copie de la liste donnée.\n\nPar défaut, renvoie une nouvelle liste avec les mêmes éléments que dans l'original. Définissez l'argument `deepcopy` sur une valeur true si des éléments doivent également être copiés.\n\nLa liste donnée n'est jamais modifiée par ce mot-clé."
    },
    {
        "name": "Count Values In List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            },
            {
                "name": "start",
                "type": null,
                "defaultValue": "0",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "start=0"
            },
            {
                "name": "end",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "end=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns the number of occurrences of the given <code>value</code> in <code>list</code>.</p>\n<p>The search can be narrowed to the selected sublist by the <code>start</code> and <code>end</code> indexes having the same semantics as with <a href=\"#Get%20Slice%20From%20List\" class=\"name\">Get Slice From List</a> keyword. The given list is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Count Values In List</td>\n<td>${L3}</td>\n<td>b</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = 1\n${L3} is not changed\n</pre>",
        "shortdoc": "Returns the number of occurrences of the given ``value`` in ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 228,
        "doc_fr": "Renvoie le nombre d'occurrences de la valeur donnée dans la liste.\n\nLa recherche peut être restreinte à la sous-liste sélectionnée par les index `start` et `end`\nayant la même sémantique qu'avec le mot-clé Get Slice From List. La\nliste donnée n'est jamais modifiée par ce mot-clé.\n\nExemple :\n\n${x} = | Count Values ​​In List | ${L3} | b \n---|---|---|--- \n\n=>\n\n${x} = 1\n${L3} n'est pas modifié"
    },
    {
        "name": "Dictionaries Should Be Equal",
        "args": [
            {
                "name": "dict1",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dict1"
            },
            {
                "name": "dict2",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dict2"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_keys",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_keys=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the given dictionaries are not equal.</p>\n<p>First the equality of dictionaries' keys is checked and after that all the key value pairs. If there are differences between the values, those are listed in the error message. The types of the dictionaries do not need to be same.</p>\n<p><code>ignore_keys</code> can be used to provide a list of keys to ignore in the comparison. It can be an actual list or a Python list literal. This option is new in Robot Framework 6.1. It works recursively with nested dictionaries starting from Robot Framework 7.0.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Dictionaries Should Be Equal</td>\n<td>${dict}</td>\n<td>${expected}</td>\n<td></td>\n</tr>\n<tr>\n<td>Dictionaries Should Be Equal</td>\n<td>${dict}</td>\n<td>${expected}</td>\n<td>ignore_keys=${ignored}</td>\n</tr>\n<tr>\n<td>Dictionaries Should Be Equal</td>\n<td>${dict}</td>\n<td>${expected}</td>\n<td>ignore_keys=['key1', 'key2']</td>\n</tr>\n</table>\n<p>See <a href=\"#Lists%20Should%20Be%20Equal\" class=\"name\">Lists Should Be Equal</a> for more information about configuring the error message with <code>msg</code> and <code>values</code> arguments.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if the given dictionaries are not equal.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 785,
        "doc_fr": "Échoue si les dictionnaires donnés ne sont pas égaux.\n\nTout d'abord, l'égalité des clés des dictionnaires est vérifiée, puis toutes les paires clé-valeur. S'il existe des différences entre les valeurs, celles-ci sont répertoriées dans\nle message d'erreur. Les types des dictionnaires n'ont pas besoin d'être identiques.\n\n`ignore_keys` peut être utilisé pour fournir une liste de clés à ignorer dans la\ncomparaison. Il peut s'agir d'une liste réelle ou d'un littéral de liste Python. Cette option est\nnouvelle dans Robot Framework 6.1. Elle fonctionne de manière récursive avec les dictionnaires imbriqués\nà partir de Robot Framework 7.0.\n\nExemples :\n\nLes dictionnaires doivent être égaux | ${dict} | ${expected} | \n---|---|---|--- \nLes dictionnaires doivent être égaux | ${dict} | ${expected} | ignore_keys=${ignored} \nLes dictionnaires doivent être égaux | ${dict} | ${expected} | ignore_keys=['key1', 'key2'] \n\nVoir Les listes doivent être égales pour plus d'informations sur la configuration du message\nd'erreur avec les arguments `msg` et `values`.\n\nL'argument `ignore_case` peut être utilisé pour rendre la comparaison insensible à la casse.\nVoir la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "Dictionary Should Contain Item",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "key",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "key"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>An item of <code>key</code> / <code>value</code> must be found in a <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "An item of ``key`` / ``value`` must be found in a ``dictionary``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 732,
        "doc_fr": "Un élément de `key` / `value` doit être trouvé dans un `dictionary`.\n\nUtilisez l'argument `msg` pour remplacer le message d'erreur par défaut.\n\nL'argument `ignore_case` peut être utilisé pour rendre la comparaison insensible à la casse.\nConsultez la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "Dictionary Should Contain Key",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "key",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "key"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>key</code> is not found from <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if ``key`` is not found from ``dictionary``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 698,
        "doc_fr": "Échoue si `key` n'est pas trouvé dans `dictionary`.\n\nUtilisez l'argument `msg` pour remplacer le message d'erreur par défaut.\n\nL'argument `ignore_case` peut être utilisé pour rendre la comparaison insensible à la casse.\nVoir la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "Dictionary Should Contain Sub Dictionary",
        "args": [
            {
                "name": "dict1",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dict1"
            },
            {
                "name": "dict2",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dict2"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails unless all items in <code>dict2</code> are found from <code>dict1</code>.</p>\n<p>See <a href=\"#Lists%20Should%20Be%20Equal\" class=\"name\">Lists Should Be Equal</a> for more information about configuring the error message with <code>msg</code> and <code>values</code> arguments.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails unless all items in ``dict2`` are found from ``dict1``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 841,
        "doc_fr": "Échoue à moins que tous les éléments de « dict2 » soient trouvés dans « dict1 ».\n\nVoir Les listes doivent être égales pour plus d'informations sur la configuration du message\nd'erreur avec les arguments « msg » et « values ».\n\nL'argument « ignore_case » peut être utilisé pour rendre la comparaison insensible à la casse.\nVoir la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "Dictionary Should Contain Value",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>value</code> is not found from <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if ``value`` is not found from ``dictionary``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 751,
        "doc_fr": "Échoue si « value » n'est pas trouvé dans « dictionary ».\n\nUtilisez l'argument « msg » pour remplacer le message d'erreur par défaut.\n\nL'argument « ignore_case » peut être utilisé pour rendre la comparaison insensible à la casse.\nConsultez la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "Dictionary Should Not Contain Key",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "key",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "key"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>key</code> is found from <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if ``key`` is found from ``dictionary``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 715,
        "doc_fr": "Échoue si `key` est trouvé dans `dictionary`.\n\nUtilisez l'argument `msg` pour remplacer le message d'erreur par défaut.\n\nL'argument `ignore_case` peut être utilisé pour rendre la comparaison insensible à la casse.\nVoir la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "Dictionary Should Not Contain Value",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>value</code> is found from <code>dictionary</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if ``value`` is found from ``dictionary``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 768,
        "doc_fr": "Échoue si `value` est trouvé dans `dictionary`.\n\nUtilisez l'argument `msg` pour remplacer le message d'erreur par défaut.\n\nL'argument `ignore_case` peut être utilisé pour rendre la comparaison insensible à la casse.\nVoir la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0.\n\n"
    },
    {
        "name": "Get Dictionary Items",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "sort_keys",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "sort_keys=True"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns items of the given <code>dictionary</code> as a list.</p>\n<p>Uses <a href=\"#Get%20Dictionary%20Keys\" class=\"name\">Get Dictionary Keys</a> to get keys and then returns corresponding items. By default, keys are sorted and items returned in that order, but this can be changed by giving <code>sort_keys</code> a false value.</p>\n<p>Items are returned as a flat list so that first item is a key, second item is a corresponding value, third item is the second key, and so on.</p>\n<p>The given <code>dictionary</code> is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${sorted} =</td>\n<td>Get Dictionary Items</td>\n<td>${D3}</td>\n<td></td>\n</tr>\n<tr>\n<td>${unsorted} =</td>\n<td>Get Dictionary Items</td>\n<td>${D3}</td>\n<td>sort_keys=False</td>\n</tr>\n</table>",
        "shortdoc": "Returns items of the given ``dictionary`` as a list.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 653,
        "doc_fr": "Renvoie les éléments du `dictionary` donné sous forme de liste.\n\nUtilise Get Dictionary Keys pour obtenir les clés, puis renvoie les éléments correspondants. Par\ndéfaut, les clés sont triées et les éléments renvoyés dans cet ordre, mais cela peut être\nmodifié en donnant à `sort_keys` une valeur false.\n\nLes éléments sont renvoyés sous forme de liste plate de sorte que le premier élément est une clé, le deuxième élément est\nune valeur correspondante, le troisième élément est la deuxième clé, et ainsi de suite.\n\nLe `dictionary` donné n'est jamais modifié par ce mot-clé.\n\nExemple :\n\n${sorted} = | Get Dictionary Items | ${D3} | \n---|---|---|--- \n${unsorted} = | Get Dictionary Items | ${D3} | sort_keys=False"
    },
    {
        "name": "Get Dictionary Keys",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "sort_keys",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "sort_keys=True"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns keys of the given <code>dictionary</code> as a list.</p>\n<p>By default, keys are returned in sorted order (assuming they are sortable), but they can be returned in the original order by giving <code>sort_keys</code> a false value.</p>\n<p>The given <code>dictionary</code> is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${sorted} =</td>\n<td>Get Dictionary Keys</td>\n<td>${D3}</td>\n<td></td>\n</tr>\n<tr>\n<td>${unsorted} =</td>\n<td>Get Dictionary Keys</td>\n<td>${D3}</td>\n<td>sort_keys=False</td>\n</tr>\n</table>",
        "shortdoc": "Returns keys of the given ``dictionary`` as a list.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 615,
        "doc_fr": "Renvoie les clés du `dictionary` donné sous forme de liste.\n\nPar défaut, les clés sont renvoyées dans l'ordre trié (en supposant qu'elles soient triables),\nmais elles peuvent être renvoyées dans l'ordre d'origine en donnant à `sort_keys` une\nvaleur false.\n\nLe `dictionary` donné n'est jamais modifié par ce mot-clé.\n\nExemple :\n\n${sorted} = | Obtenir les clés du dictionnaire | ${D3} | \n---|---|---|--- \n${unsorted} = | Obtenir les clés du dictionnaire | ${D3} | sort_keys=False"
    },
    {
        "name": "Get Dictionary Values",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "sort_keys",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "sort_keys=True"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns values of the given <code>dictionary</code> as a list.</p>\n<p>Uses <a href=\"#Get%20Dictionary%20Keys\" class=\"name\">Get Dictionary Keys</a> to get keys and then returns corresponding values. By default, keys are sorted and values returned in that order, but this can be changed by giving <code>sort_keys</code> a false value.</p>\n<p>The given <code>dictionary</code> is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${sorted} =</td>\n<td>Get Dictionary Values</td>\n<td>${D3}</td>\n<td></td>\n</tr>\n<tr>\n<td>${unsorted} =</td>\n<td>Get Dictionary Values</td>\n<td>${D3}</td>\n<td>sort_keys=False</td>\n</tr>\n</table>",
        "shortdoc": "Returns values of the given ``dictionary`` as a list.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 636,
        "doc_fr": "Renvoie les valeurs du `dictionary` donné sous forme de liste.\n\nUtilise Get Dictionary Keys pour obtenir les clés, puis renvoie les valeurs correspondantes. Par\ndéfaut, les clés sont triées et les valeurs renvoyées dans cet ordre, mais cela peut être\nmodifié en donnant à `sort_keys` une valeur false.\n\nLe `dictionary` donné n'est jamais modifié par ce mot-clé.\n\nExemple :\n\n${sorted} = | Get Dictionary Values ​​| ${D3} | \n---|---|---|--- \n${unsorted} = | Get Dictionary Values ​​| ${D3} | sort_keys=False"
    },
    {
        "name": "Get From Dictionary",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "key",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "key"
            },
            {
                "name": "default",
                "type": null,
                "defaultValue": "",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "default="
            }
        ],
        "returnType": null,
        "doc": "<p>Returns a value from the given <code>dictionary</code> based on the given <code>key</code>.</p>\n<p>If the given <code>key</code> cannot be found from the <code>dictionary</code>, this keyword fails. If optional <code>default</code> value is given, it will be returned instead of failing.</p>\n<p>The given dictionary is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${value} =</td>\n<td>Get From Dictionary</td>\n<td>${D3}</td>\n<td>b</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${value} = 2\n</pre>\n<p>Support for <code>default</code> is new in Robot Framework 6.0.</p>",
        "shortdoc": "Returns a value from the given ``dictionary`` based on the given ``key``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 674,
        "doc_fr": "Renvoie une valeur du `dictionary` donné en fonction de la `key` donnée.\n\nSi la `key` donnée ne peut pas être trouvée dans le `dictionary`, ce mot-clé échoue.\nSi une valeur facultative `default` est donnée, elle sera renvoyée au lieu d'échouer.\n\nLe dictionnaire donné n'est jamais modifié par ce mot-clé.\n\nExemple :\n\n${value} = | Get From Dictionary | ${D3} | b \n---|---|---|--- \n\n=>\n\n${value} = 2\n\nLa prise en charge de `default` est une nouveauté dans Robot Framework 6.0."
    },
    {
        "name": "Get From List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "index",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "index"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns the value specified with an <code>index</code> from <code>list</code>.</p>\n<p>The given list is never altered by this keyword.</p>\n<p>Index <code>0</code> means the first position, <code>1</code> the second, and so on. Similarly, <code>-1</code> is the last position, <code>-2</code> the second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.</p>\n<p>Examples (including Python equivalents in comments):</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Get From List</td>\n<td>${L5}</td>\n<td>0</td>\n<td># L5[0]</td>\n</tr>\n<tr>\n<td>${y} =</td>\n<td>Get From List</td>\n<td>${L5}</td>\n<td>-2</td>\n<td># L5[-2]</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = 'a'\n${y} = 'd'\n${L5} is not changed\n</pre>",
        "shortdoc": "Returns the value specified with an ``index`` from ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 173,
        "doc_fr": "Renvoie la valeur spécifiée avec un `index` de `list`.\n\nLa liste donnée n'est jamais modifiée par ce mot-clé.\n\nL'index `0` signifie la première position, `1` la deuxième, et ainsi de suite. De même, `-1`\nest la dernière position, `-2` l'avant-dernière, et ainsi de suite. L'utilisation d'un index qui\nn'existe pas dans la liste provoque une erreur. L'index peut être soit un entier\nsoit une chaîne qui peut être convertie en entier.\n\nExemples (y compris les équivalents Python dans les commentaires) :\n\n${x} = | Obtenir à partir de la liste | ${L5} | 0 | # L5[0] \n---|---|---|---|--- \n${y} = | Obtenir à partir de la liste | ${L5} | -2 | # L5[-2] \n\n=>\n\n${x} = 'a'\n${y} = 'd'\n${L5} n'est pas modifié"
    },
    {
        "name": "Get Index From List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            },
            {
                "name": "start",
                "type": null,
                "defaultValue": "0",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "start=0"
            },
            {
                "name": "end",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "end=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns the index of the first occurrence of the <code>value</code> on the list.</p>\n<p>The search can be narrowed to the selected sublist by the <code>start</code> and <code>end</code> indexes having the same semantics as with <a href=\"#Get%20Slice%20From%20List\" class=\"name\">Get Slice From List</a> keyword. In case the value is not found, -1 is returned. The given list is never altered by this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Get Index From List</td>\n<td>${L5}</td>\n<td>d</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = 3\n${L5} is not changed\n</pre>",
        "shortdoc": "Returns the index of the first occurrence of the ``value`` on the list.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 244,
        "doc_fr": "Renvoie l'index de la première occurrence de la valeur dans la liste.\n\nLa recherche peut être restreinte à la sous-liste sélectionnée par les index `start` et `end`\nayant la même sémantique qu'avec le mot-clé Get Slice From List. Si la valeur n'est pas trouvée, -1 est renvoyé. La liste donnée n'est jamais modifiée par\nce mot-clé.\n\nExemple :\n\n${x} = | Get Index From List | ${L5} | d \n---|---|---|--- \n\n=>\n\n${x} = 3\n${L5} n'est pas modifié"
    },
    {
        "name": "Get Match Count",
        "args": [
            {
                "name": "list",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list"
            },
            {
                "name": "pattern",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "pattern"
            },
            {
                "name": "case_insensitive",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "case_insensitive: bool | None = None"
            },
            {
                "name": "whitespace_insensitive",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "whitespace_insensitive: bool | None = None"
            },
            {
                "name": "ignore_case",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case: bool = False"
            },
            {
                "name": "ignore_whitespace",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_whitespace: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns the count of matches to <code>pattern</code> in <code>list</code>.</p>\n<p>For more information on <code>pattern</code>, <code>case_insensitive/ignore_case</code>, and <code>whitespace_insensitive/ignore_whitespace</code>, see <a href=\"#Should%20Contain%20Match\" class=\"name\">Should Contain Match</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${count}=</td>\n<td>Get Match Count</td>\n<td>${list}</td>\n<td>a*</td>\n<td># ${count} will be the count of strings beginning with 'a'</td>\n<td></td>\n</tr>\n<tr>\n<td>${count}=</td>\n<td>Get Match Count</td>\n<td>${list}</td>\n<td>regexp=a.*</td>\n<td># ${matches} will be the count of strings beginning with 'a' (regexp version)</td>\n<td></td>\n</tr>\n<tr>\n<td>${count}=</td>\n<td>Get Match Count</td>\n<td>${list}</td>\n<td>a*</td>\n<td>case_insensitive=${True}</td>\n<td># ${matches} will be the count of strings beginning with 'a' or 'A'</td>\n</tr>\n</table>",
        "shortdoc": "Returns the count of matches to ``pattern`` in ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 1070,
        "doc_fr": "Renvoie le nombre de correspondances à `pattern` dans `list`.\n\nPour plus d'informations sur `pattern`, `case_insensitive/ignore_case` et\n`whitespace_insensitive/ignore_whitespace`, voir Doit contenir une correspondance.\n\nExemples :\n\n${count}= | Obtenir le nombre de correspondances | ${list} | a* | # ${count} sera le nombre de chaînes commençant par 'a' | \n---|---|---|---|---|--- \n${count}= | Obtenir le nombre de correspondances | ${list} | regexp=a.* | # ${matches} sera le nombre de chaînes commençant par 'a' (version regexp) | \n${count}= | Obtenir le nombre de correspondances | ${list} | a* | case_insensitive=${True} | # ${matches} sera le nombre de chaînes commençant par 'a' ou 'A'\n\n"
    },
    {
        "name": "Get Matches",
        "args": [
            {
                "name": "list",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list"
            },
            {
                "name": "pattern",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "pattern"
            },
            {
                "name": "case_insensitive",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "case_insensitive: bool | None = None"
            },
            {
                "name": "whitespace_insensitive",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "whitespace_insensitive: bool | None = None"
            },
            {
                "name": "ignore_case",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case: bool = False"
            },
            {
                "name": "ignore_whitespace",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_whitespace: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns a list of matches to <code>pattern</code> in <code>list</code>.</p>\n<p>For more information on <code>pattern</code>, <code>case_insensitive/ignore_case</code>, and <code>whitespace_insensitive/ignore_whitespace</code>, see <a href=\"#Should%20Contain%20Match\" class=\"name\">Should Contain Match</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${matches}=</td>\n<td>Get Matches</td>\n<td>${list}</td>\n<td>a*</td>\n<td># ${matches} will contain any string beginning with 'a'</td>\n<td></td>\n</tr>\n<tr>\n<td>${matches}=</td>\n<td>Get Matches</td>\n<td>${list}</td>\n<td>regexp=a.*</td>\n<td># ${matches} will contain any string beginning with 'a' (regexp version)</td>\n<td></td>\n</tr>\n<tr>\n<td>${matches}=</td>\n<td>Get Matches</td>\n<td>${list}</td>\n<td>a*</td>\n<td>ignore_case=True</td>\n<td># ${matches} will contain any string beginning with 'a' or 'A'</td>\n</tr>\n</table>",
        "shortdoc": "Returns a list of matches to ``pattern`` in ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 1050,
        "doc_fr": "Renvoie une liste de correspondances à `pattern` dans `list`.\n\nPour plus d'informations sur `pattern`, `case_insensitive/ignore_case` et\n`whitespace_insensitive/ignore_whitespace`, voir Doit contenir une correspondance.\n\nExemples :\n\n${matches}= | Obtenir les correspondances | ${list} | a* | # ${matches} contiendra toute chaîne commençant par 'a' | \n---|---|---|---|---|--- \n${matches}= | Obtenir les correspondances | ${list} | regexp=a.* | # ${matches} contiendra toute chaîne commençant par 'a' (version regexp) | \n${matches}= | Obtenir les correspondances | ${list} | a* | ignore_case=True | # ${matches} contiendra toute chaîne commençant par 'a' ou 'A'"
    },
    {
        "name": "Get Slice From List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "start",
                "type": null,
                "defaultValue": "0",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "start=0"
            },
            {
                "name": "end",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "end=None"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns a slice of the given list between <code>start</code> and <code>end</code> indexes.</p>\n<p>The given list is never altered by this keyword.</p>\n<p>If both <code>start</code> and <code>end</code> are given, a sublist containing values from <code>start</code> to <code>end</code> is returned. This is the same as <code>list[start:end]</code> in Python. To get all items from the beginning, use 0 as the start value, and to get all items until and including the end, use <code>None</code> (default) as the end value.</p>\n<p>Using <code>start</code> or <code>end</code> not found on the list is the same as using the largest (or smallest) available index.</p>\n<p>Examples (incl. Python equivalents in comments):</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Get Slice From List</td>\n<td>${L5}</td>\n<td>2</td>\n<td>4</td>\n<td># L5[2:4]</td>\n</tr>\n<tr>\n<td>${y} =</td>\n<td>Get Slice From List</td>\n<td>${L5}</td>\n<td>1</td>\n<td></td>\n<td># L5[1:None]</td>\n</tr>\n<tr>\n<td>${z} =</td>\n<td>Get Slice From List</td>\n<td>${L5}</td>\n<td>end=-2</td>\n<td></td>\n<td># L5[0:-2]</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = ['c', 'd']\n${y} = ['b', 'c', 'd', 'e']\n${z} = ['a', 'b', 'c']\n${L5} is not changed\n</pre>",
        "shortdoc": "Returns a slice of the given list between ``start`` and ``end`` indexes.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 198,
        "doc_fr": "Renvoie une tranche de la liste donnée entre les index `start` et `end`.\n\nLa liste donnée n'est jamais modifiée par ce mot-clé.\n\nSi `start` et `end` sont tous deux donnés, une sous-liste contenant les valeurs de `start`\nà `end` est renvoyée. C'est la même chose que `list[start:end]` en Python. Pour obtenir\ntous les éléments depuis le début, utilisez 0 comme valeur de départ, et pour obtenir tous les éléments\njusqu'à la fin incluse, utilisez `None` (par défaut) comme valeur de fin.\n\nL'utilisation de `start` ou `end` non trouvé dans la liste revient à utiliser le plus grand\n(ou le plus petit) index disponible.\n\nExemples (y compris les équivalents Python dans les commentaires) :\n\n${x} = | Obtenir une tranche de la liste | ${L5} | 2 | 4 | # L5[2:4] \n---|---|---|---|---|--- \n${y} = | Obtenir une tranche de la liste | ${L5} | 1 | | # L5[1:None] \n${z} = | Obtenir une tranche de la liste | ${L5} | end=-2 | | # L5[0:-2] \n\n=>\n\n${x} = ['c', 'd']\n${y} = ['b', 'c', 'd', 'e']\n${z} = ['a', 'b', 'c']\n${L5} n'est pas modifié"
    },
    {
        "name": "Insert Into List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "index",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "index"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            }
        ],
        "returnType": null,
        "doc": "<p>Inserts <code>value</code> into <code>list</code> to the position specified with <code>index</code>.</p>\n<p>Index <code>0</code> adds the value into the first position, <code>1</code> to the second, and so on. Inserting from right works with negative indices so that <code>-1</code> is the second last position, <code>-2</code> third last, and so on. Use <a href=\"#Append%20To%20List\" class=\"name\">Append To List</a> to add items to the end of the list.</p>\n<p>If the absolute value of the index is greater than the length of the list, the value is added at the end (positive index) or the beginning (negative index). An index can be given either as an integer or a string that can be converted to an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Insert Into List</td>\n<td>${L1}</td>\n<td>0</td>\n<td>xxx</td>\n</tr>\n<tr>\n<td>Insert Into List</td>\n<td>${L2}</td>\n<td>${-1}</td>\n<td>xxx</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L1} = ['xxx', 'a']\n${L2} = ['a', 'xxx', 'b']\n</pre>",
        "shortdoc": "Inserts ``value`` into ``list`` to the position specified with ``index``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 54,
        "doc_fr": "Insère `value` dans `list` à la position spécifiée avec `index`.\n\nL'index `0` ajoute la valeur à la première position, `1` à la seconde, et ainsi de suite. L'insertion à partir de la droite fonctionne avec des indices négatifs de sorte que `-1` soit l'avant-dernière\nposition, `-2` l'avant-dernière, et ainsi de suite. Utilisez Ajouter à la liste pour ajouter\ndes éléments à la fin de la liste.\n\nSi la valeur absolue de l'index est supérieure à la longueur de la liste, la\nvaleur est ajoutée à la fin (index positif) ou au début (index négatif).\nUn index peut être donné sous forme d'entier ou de chaîne pouvant être\nconvertie en entier.\n\nExemple :\n\nInsérer dans la liste | ${L1} | 0 | xxx \n---|---|---|--- \nInsérer dans la liste | ${L2} | ${-1} | xxx \n\n=>\n\n${L1} = ['xxx', 'a']\n${L2} = ['a', 'xxx', 'b']"
    },
    {
        "name": "Keep In Dictionary",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "keys",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*keys"
            }
        ],
        "returnType": null,
        "doc": "<p>Keeps the given <code>keys</code> in the <code>dictionary</code> and removes all other.</p>\n<p>If the given <code>key</code> cannot be found from the <code>dictionary</code>, it is ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Keep In Dictionary</td>\n<td>${D5}</td>\n<td>b</td>\n<td>x</td>\n<td>d</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${D5} = {'b': 2, 'd': 4}\n</pre>",
        "shortdoc": "Keeps the given ``keys`` in the ``dictionary`` and removes all other.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 586,
        "doc_fr": "Conserve les « clés » données dans le « dictionnaire » et supprime toutes les autres.\n\nSi la « clé » donnée ne peut pas être trouvée dans le « dictionnaire », elle est ignorée.\n\nExemple :\n\nConserver dans le dictionnaire | ${D5} | b | x | d \n---|---|---|---|--- \n\n=>\n\n${D5} = {'b': 2, 'd': 4}"
    },
    {
        "name": "List Should Contain Sub List",
        "args": [
            {
                "name": "list1",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list1"
            },
            {
                "name": "list2",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list2"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if not all elements in <code>list2</code> are found in <code>list1</code>.</p>\n<p>The order of values and the number of values are not taken into account.</p>\n<p>See <a href=\"#Lists%20Should%20Be%20Equal\" class=\"name\">Lists Should Be Equal</a> for more information about configuring the error message with <code>msg</code> and <code>values</code> arguments.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if not all elements in ``list2`` are found in ``list1``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 440,
        "doc_fr": "Échoue si tous les éléments de `list2` ne se trouvent pas dans `list1`.\n\nL'ordre des valeurs et le nombre de valeurs ne sont pas pris en compte.\n\nVoir Les listes doivent être égales pour plus d'informations sur la configuration du message\nd'erreur avec les arguments `msg` et `values`.\n\nL'argument `ignore_case` peut être utilisé pour rendre la comparaison insensible à la casse.\nVoir la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "List Should Contain Value",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the <code>value</code> is not found from <code>list</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if the ``value`` is not found from ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 306,
        "doc_fr": "Échoue si la valeur « value » n'est pas trouvée dans la liste.\n\nUtilisez l'argument « msg » pour remplacer le message d'erreur par défaut.\n\nL'argument « ignore_case » peut être utilisé pour rendre la comparaison insensible à la casse.\nConsultez la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "List Should Not Contain Duplicates",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if any element in the <code>list</code> is found from it more than once.</p>\n<p>The default error message lists all the elements that were found from the <code>list</code> multiple times, but it can be overridden by giving a custom <code>msg</code>. All multiple times found items and their counts are also logged.</p>\n<p>This keyword works with all iterables that can be converted to a list. The original iterable is never altered.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if any element in the ``list`` is found from it more than once.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 334,
        "doc_fr": "Échoue si un élément de la liste est trouvé plus d'une fois.\n\nLe message d'erreur par défaut répertorie tous les éléments qui ont été trouvés dans la liste plusieurs fois, mais il peut être remplacé en donnant un message personnalisé. Tous les éléments trouvés plusieurs fois et leur nombre sont également enregistrés.\n\nCe mot-clé fonctionne avec tous les itérables qui peuvent être convertis en liste. L'itérable d'origine n'est jamais modifié.\n\nL'argument `ignore_case` peut être utilisé pour rendre la comparaison insensible à la casse.\nVoir la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "List Should Not Contain Value",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if the <code>value</code> is found from <code>list</code>.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if the ``value`` is found from ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 320,
        "doc_fr": "Échoue si la valeur est trouvée dans la liste.\n\nUtilisez l'argument msg pour remplacer le message d'erreur par défaut.\n\nL'argument ignore_case peut être utilisé pour rendre la comparaison insensible à la casse.\nConsultez la section Ignorer la casse pour plus de détails. Cette option est nouvelle dans Robot\nFramework 7.0."
    },
    {
        "name": "Lists Should Be Equal",
        "args": [
            {
                "name": "list1",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list1"
            },
            {
                "name": "list2",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list2"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values=True"
            },
            {
                "name": "names",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "names=None"
            },
            {
                "name": "ignore_order",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_order=False"
            },
            {
                "name": "ignore_case",
                "type": null,
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case=False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if given lists are unequal.</p>\n<p>The keyword first verifies that the lists have equal lengths, and then it checks are all their values equal. Possible differences between the values are listed in the default error message like <code>Index 4: ABC != Abc</code>. The types of the lists do not need to be the same. For example, Python tuple and list with same content are considered equal.</p>\n<p>The error message can be configured using <code>msg</code> and <code>values</code> arguments:</p>\n<ul>\n<li>If <code>msg</code> is not given, the default error message is used.</li>\n<li>If <code>msg</code> is given and <code>values</code> gets a value considered true (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>), the error message starts with the given <code>msg</code> followed by a newline and the default message.</li>\n<li>If <code>msg</code> is given and <code>values</code>  is not given a true value, the error message is just the given <code>msg</code>.</li>\n</ul>\n<p>The optional <code>names</code> argument can be used for naming the indices shown in the default error message. It can either be a list of names matching the indices in the lists or a dictionary where keys are indices that need to be named. It is not necessary to name all indices. When using a dictionary, keys can be either integers or strings that can be converted to integers.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>${names} =</td>\n<td>Create List</td>\n<td>First Name</td>\n<td>Family Name</td>\n<td>Email</td>\n</tr>\n<tr>\n<td>Lists Should Be Equal</td>\n<td>${people1}</td>\n<td>${people2}</td>\n<td>names=${names}</td>\n<td></td>\n</tr>\n<tr>\n<td>${names} =</td>\n<td>Create Dictionary</td>\n<td>0=First Name</td>\n<td>2=Email</td>\n<td></td>\n</tr>\n<tr>\n<td>Lists Should Be Equal</td>\n<td>${people1}</td>\n<td>${people2}</td>\n<td>names=${names}</td>\n<td></td>\n</tr>\n</table>\n<p>If the items in index 2 would differ in the above examples, the error message would contain a row like <code>Index 2 (email): name@foo.com != name@bar.com</code>.</p>\n<p>The optional <code>ignore_order</code> argument can be used to ignore the order of the elements in the lists. Using it requires items to be sortable. This option works recursively with nested lists starting from Robot Framework 7.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${list1} =</td>\n<td>Create List</td>\n<td>apple</td>\n<td>cherry</td>\n<td>banana</td>\n</tr>\n<tr>\n<td>${list2} =</td>\n<td>Create List</td>\n<td>cherry</td>\n<td>banana</td>\n<td>apple</td>\n</tr>\n<tr>\n<td>Lists Should Be Equal</td>\n<td>${list1}</td>\n<td>${list2}</td>\n<td>ignore_order=True</td>\n<td></td>\n</tr>\n</table>\n<p>The <code>ignore_case</code> argument can be used to make comparison case-insensitive. See the <a href=\"#Ignore%20case\" class=\"name\">Ignore case</a> section for more details. This option is new in Robot Framework 7.0.</p>",
        "shortdoc": "Fails if given lists are unequal.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 361,
        "doc_fr": "Échoue si les listes données sont inégales.\n\nLe mot-clé vérifie d'abord que les listes ont des longueurs égales, puis vérifie si toutes leurs valeurs sont égales. Les différences possibles entre les valeurs sont\nrépertoriées dans le message d'erreur par défaut comme `Index 4: ABC != Abc`. Les types des\nlistes n'ont pas besoin d'être identiques. Par exemple, un tuple Python et une liste avec\nle même contenu sont considérés comme égaux.\n\nLe message d'erreur peut être configuré à l'aide des arguments `msg` et `values` :\n\n* Si `msg` n'est pas donné, le message d'erreur par défaut est utilisé.\n* Si `msg` est donné et que `values` obtient une valeur considérée comme vraie (voir les arguments booléens), le message d'erreur commence par le `msg` donné suivi d'une nouvelle ligne et du message par défaut.\n* Si `msg` est donné et que `values` ne reçoit pas de valeur vraie, le message d'erreur est simplement le `msg` donné.\n\nL'argument optionnel `names` peut être utilisé pour nommer les index affichés dans le\nmessage d'erreur par défaut. Il peut s'agir soit d'une liste de noms correspondant aux index\ndans les listes, soit d'un dictionnaire où les clés sont des index qui doivent être nommés. Il\nn'est pas nécessaire de nommer tous les index. Lorsque vous utilisez un dictionnaire, les clés peuvent être\nsoit des entiers, soit des chaînes qui peuvent être converties en entiers.\n\nExemples :\n\n${names} = | Créer une liste | Prénom | Nom de famille | E-mail \n---|---|---|---|--- \nLes listes doivent être égales | ${people1} | ${people2} | names=${names} | \n${names} = | Créer un dictionnaire | 0=Prénom | 2=E-mail | \nLes listes doivent être égales | ${people1} | ${people2} | names=${names} | \n\nSi les éléments de l'index 2 diffèrent dans les exemples ci-dessus, le message d'erreur\ncontiendra une ligne comme `Index 2 (email): name@foo.com != name@bar.com`.\n\nL'argument facultatif `ignore_order` peut être utilisé pour ignorer l'ordre des\néléments dans les listes. Son utilisation nécessite que les éléments soient triables. Cette option\nfonctionne de manière récursive avec les listes imbriquées à partir de Robot Framework 7.0.\n\nExemple :\n\n${list1} = | Créer une liste | pomme | cerise | banane \n---|---|---|---|--- \n${list2} = | Créer une liste | cerise | banane | pomme \nLes listes doivent être égales | ${list1} | ${list2} | ignore_order=True | \n\nL'argument `ignore_case` peut être utilisé pour rendre la comparaison insensible à la casse.\nVoir la section Ignorer la casse pour plus de détails. Cette option est une nouveauté dans Robot\nFramework 7.0."
    },
    {
        "name": "Log Dictionary",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "level",
                "type": null,
                "defaultValue": "INFO",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "level=INFO"
            }
        ],
        "returnType": null,
        "doc": "<p>Logs the size and contents of the <code>dictionary</code> using given <code>level</code>.</p>\n<p>Valid levels are TRACE, DEBUG, INFO (default), and WARN.</p>\n<p>If you only want to log the size, use keyword <span class=\"name\">Get Length</span> from the BuiltIn library.</p>",
        "shortdoc": "Logs the size and contents of the ``dictionary`` using given ``level``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 859,
        "doc_fr": "Enregistre la taille et le contenu du « dictionnaire » en utilisant le « niveau » donné.\n\nLes niveaux valides sont TRACE, DEBUG, INFO (par défaut) et WARN.\n\nSi vous souhaitez uniquement enregistrer la taille, utilisez le mot-clé Get Length de la bibliothèque\nintégrée."
    },
    {
        "name": "Log List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "level",
                "type": null,
                "defaultValue": "INFO",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "level=INFO"
            }
        ],
        "returnType": null,
        "doc": "<p>Logs the length and contents of the <code>list</code> using given <code>level</code>.</p>\n<p>Valid levels are TRACE, DEBUG, INFO (default), and WARN.</p>\n<p>If you only want to the length, use keyword <span class=\"name\">Get Length</span> from the BuiltIn library.</p>",
        "shortdoc": "Logs the length and contents of the ``list`` using given ``level``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 462,
        "doc_fr": "Enregistre la longueur et le contenu de la liste en utilisant le niveau donné.\n\nLes niveaux valides sont TRACE, DEBUG, INFO (par défaut) et WARN.\n\nSi vous ne voulez connaître que la longueur, utilisez le mot-clé Get Length de la bibliothèque BuiltIn."
    },
    {
        "name": "Pop From Dictionary",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "key",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "key"
            },
            {
                "name": "default",
                "type": null,
                "defaultValue": "",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "default="
            }
        ],
        "returnType": null,
        "doc": "<p>Pops the given <code>key</code> from the <code>dictionary</code> and returns its value.</p>\n<p>By default the keyword fails if the given <code>key</code> cannot be found from the <code>dictionary</code>. If optional <code>default</code> value is given, it will be returned instead of failing.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${val}=</td>\n<td>Pop From Dictionary</td>\n<td>${D3}</td>\n<td>b</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${val} = 2\n${D3} = {'a': 1, 'c': 3}\n</pre>",
        "shortdoc": "Pops the given ``key`` from the ``dictionary`` and returns its value.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 567,
        "doc_fr": "Extrait la clé donnée du dictionnaire et renvoie sa valeur.\n\nPar défaut, le mot-clé échoue si la clé donnée ne peut pas être trouvée dans le\ndictionnaire. Si une valeur facultative par défaut est donnée, elle sera renvoyée\nau lieu d'échouer.\n\nExemple :\n\n${val}= | Extraire du dictionnaire | ${D3} | b \n---|---|---|--- \n\n=>\n\n${val} = 2\n${D3} = {'a': 1, 'c': 3}\n\n"
    },
    {
        "name": "Remove Duplicates",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            }
        ],
        "returnType": null,
        "doc": "<p>Returns a list without duplicates based on the given <code>list</code>.</p>\n<p>Creates and returns a new list that contains all items in the given list so that one item can appear only once. Order of the items in the new list is the same as in the original except for missing duplicates. Number of the removed duplicates is logged.</p>",
        "shortdoc": "Returns a list without duplicates based on the given ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 156,
        "doc_fr": "Renvoie une liste sans doublons basée sur la liste donnée.\n\nCrée et renvoie une nouvelle liste qui contient tous les éléments de la liste donnée afin\nqu'un élément ne puisse apparaître qu'une seule fois. L'ordre des éléments de la nouvelle liste est le\nmême que dans l'original, à l'exception des doublons manquants. Le nombre de\ndoublons supprimés est enregistré."
    },
    {
        "name": "Remove From Dictionary",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "keys",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*keys"
            }
        ],
        "returnType": null,
        "doc": "<p>Removes the given <code>keys</code> from the <code>dictionary</code>.</p>\n<p>If the given <code>key</code> cannot be found from the <code>dictionary</code>, it is ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Remove From Dictionary</td>\n<td>${D3}</td>\n<td>b</td>\n<td>x</td>\n<td>y</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${D3} = {'a': 1, 'c': 3}\n</pre>",
        "shortdoc": "Removes the given ``keys`` from the ``dictionary``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 548,
        "doc_fr": "Supprime les « clés » données du « dictionnaire ».\n\nSi la « clé » donnée ne peut pas être trouvée dans le « dictionnaire », elle est ignorée.\n\nExemple :\n\nSupprimer du dictionnaire | ${D3} | b | x | y \n---|---|---|---|--- \n\n=>\n\n${D3} = {'a': 1, 'c': 3}"
    },
    {
        "name": "Remove From List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "index",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "index"
            }
        ],
        "returnType": null,
        "doc": "<p>Removes and returns the value specified with an <code>index</code> from <code>list</code>.</p>\n<p>Index <code>0</code> means the first position, <code>1</code> the second and so on. Similarly, <code>-1</code> is the last position, <code>-2</code> the second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x} =</td>\n<td>Remove From List</td>\n<td>${L2}</td>\n<td>0</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${x} = 'a'\n${L2} = ['b']\n</pre>",
        "shortdoc": "Removes and returns the value specified with an ``index`` from ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 135,
        "doc_fr": "Supprime et renvoie la valeur spécifiée avec un `index` de `list`.\n\nL'index `0` désigne la première position, `1` la seconde et ainsi de suite. De même, `-1`\nest la dernière position, `-2` l'avant-dernière, et ainsi de suite. L'utilisation d'un index qui\nn'existe pas dans la liste provoque une erreur. L'index peut être soit un entier\nsoit une chaîne qui peut être convertie en entier.\n\nExemple :\n\n${x} = | Supprimer de la liste | ${L2} | 0 \n---|---|---|--- \n\n=>\n\n${x} = 'a'\n${L2} = ['b']"
    },
    {
        "name": "Remove Values From List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "values",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values"
            }
        ],
        "returnType": null,
        "doc": "<p>Removes all occurrences of given <code>values</code> from <code>list</code>.</p>\n<p>It is not an error if a value does not exist in the list at all.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Remove Values From List</td>\n<td>${L4}</td>\n<td>a</td>\n<td>c</td>\n<td>e</td>\n<td>f</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L4} = ['b', 'd']\n</pre>",
        "shortdoc": "Removes all occurrences of given ``values`` from ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 120,
        "doc_fr": "Supprime toutes les occurrences des « valeurs » données de la « liste ».\n\nCe n'est pas une erreur si une valeur n'existe pas du tout dans la liste.\n\nExemple :\n\nSupprimer les valeurs de la liste | ${L4} | a | c | e | f \n---|---|---|---|---|--- \n\n=>\n\n${L4} = ['b', 'd']"
    },
    {
        "name": "Reverse List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            }
        ],
        "returnType": null,
        "doc": "<p>Reverses the given list in place.</p>\n<p>Note that the given list is changed and nothing is returned. Use <a href=\"#Copy%20List\" class=\"name\">Copy List</a> first, if you need to keep also the original order.</p>\n<table border=\"1\">\n<tr>\n<td>Reverse List</td>\n<td>${L3}</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L3} = ['c', 'b', 'a']\n</pre>",
        "shortdoc": "Reverses the given list in place.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 280,
        "doc_fr": "Inverse la liste donnée en place.\n\nNotez que la liste donnée est modifiée et que rien n'est renvoyé. Utilisez d'abord Copier la liste\nsi vous devez également conserver l'ordre d'origine.\n\nReverse List | ${L3} \n---|--- \n\n=>\n\n${L3} = ['c', 'b', 'a']"
    },
    {
        "name": "Set List Value",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            },
            {
                "name": "index",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "index"
            },
            {
                "name": "value",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets the value of <code>list</code> specified by <code>index</code> to the given <code>value</code>.</p>\n<p>Index <code>0</code> means the first position, <code>1</code> the second and so on. Similarly, <code>-1</code> is the last position, <code>-2</code> second last, and so on. Using an index that does not exist on the list causes an error. The index can be either an integer or a string that can be converted to an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Set List Value</td>\n<td>${L3}</td>\n<td>1</td>\n<td>xxx</td>\n</tr>\n<tr>\n<td>Set List Value</td>\n<td>${L3}</td>\n<td>-1</td>\n<td>yyy</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${L3} = ['a', 'xxx', 'yyy']\n</pre>\n<p>Starting from Robot Framework 6.1, it is also possible to use the native item assignment syntax. This is equivalent to the above:</p>\n<table border=\"1\">\n<tr>\n<td>${L3}[1] =</td>\n<td>Set Variable</td>\n<td>xxx</td>\n</tr>\n<tr>\n<td>${L3}[-1] =</td>\n<td>Set Variable</td>\n<td>yyy</td>\n</tr>\n</table>",
        "shortdoc": "Sets the value of ``list`` specified by ``index`` to the given ``value``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 94,
        "doc_fr": "Définit la valeur de `list` spécifiée par `index` à la `value` donnée.\n\nL'index `0` signifie la première position, `1` la deuxième et ainsi de suite. De même, `-1`\nest la dernière position, `-2` l'avant-dernière, et ainsi de suite. L'utilisation d'un index qui n'existe pas dans la liste provoque une erreur. L'index peut être un entier ou une\nchaîne qui peut être convertie en entier.\n\nExemple :\n\nDéfinir la valeur de la liste | ${L3} | 1 | xxx \n---|---|---|--- \nDéfinir la valeur de la liste | ${L3} | -1 | yyy \n\n=>\n\n${L3} = ['a', 'xxx', 'yyy']\n\nÀ partir de Robot Framework 6.1, il est également possible d'utiliser la syntaxe d'affectation d'élément native. Cela équivaut à ce qui précède :\n\n${L3}[1] = | Définir la variable | xxx \n---|---|--- \n${L3}[-1] = | Définir la variable | yyy"
    },
    {
        "name": "Set To Dictionary",
        "args": [
            {
                "name": "dictionary",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "dictionary"
            },
            {
                "name": "key_value_pairs",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*key_value_pairs"
            },
            {
                "name": "items",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_NAMED",
                "required": false,
                "repr": "**items"
            }
        ],
        "returnType": null,
        "doc": "<p>Adds the given <code>key_value_pairs</code> and/or <code>items</code> to the <code>dictionary</code>.</p>\n<p>If given items already exist in the dictionary, their values are updated.</p>\n<p>It is easiest to specify items using the <code>name=value</code> syntax:</p>\n<table border=\"1\">\n<tr>\n<td>Set To Dictionary</td>\n<td>${D1}</td>\n<td>key=value</td>\n<td>second=${2}</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${D1} = {'a': 1, 'key': 'value', 'second': 2}\n</pre>\n<p>A limitation of the above syntax is that keys must be strings. That can be avoided by passing keys and values as separate arguments:</p>\n<table border=\"1\">\n<tr>\n<td>Set To Dictionary</td>\n<td>${D1}</td>\n<td>key</td>\n<td>value</td>\n<td>${2}</td>\n<td>value 2</td>\n</tr>\n</table>\n<p>=&gt;</p>\n<pre>\n${D1} = {'a': 1, 'key': 'value', 2: 'value 2'}\n</pre>\n<p>Starting from Robot Framework 6.1, it is also possible to use the native item assignment syntax. This is equivalent to the above:</p>\n<table border=\"1\">\n<tr>\n<td>${D1}[key] =</td>\n<td>Set Variable</td>\n<td>value</td>\n</tr>\n<tr>\n<td>${D1}[${2}] =</td>\n<td>Set Variable</td>\n<td>value 2</td>\n</tr>\n</table>",
        "shortdoc": "Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 518,
        "doc_fr": "Ajoute les `key_value_pairs` et/ou `items` donnés au `dictionary`.\n\nSi les éléments donnés existent déjà dans le dictionnaire, leurs valeurs sont mises à jour.\n\nIl est plus facile de spécifier les éléments en utilisant la syntaxe `name=value` :\n\nSet To Dictionary | ${D1} | key=value | second=${2} \n---|---|---|--- \n\n=>\n\n${D1} = {'a': 1, 'key': 'value', 'second': 2}\n\nUne limitation de la syntaxe ci-dessus est que les clés doivent être des chaînes. Cela peut être\névité en passant les clés et les valeurs sous forme d'arguments séparés :\n\nSet To Dictionary | ${D1} | key | value | ${2} | valeur 2 \n---|---|---|---|---|--- \n\n=>\n\n${D1} = {'a': 1, 'key': 'value', 2: 'value 2'}\n\nÀ partir de Robot Framework 6.1, il est également possible d'utiliser la syntaxe d'affectation d'élément native. Cela équivaut à ce qui précède :\n\n${D1}[key] = | Set Variable | value \n---|---|--- \n${D1}[${2}] = | Set Variable | value 2"
    },
    {
        "name": "Should Contain Match",
        "args": [
            {
                "name": "list",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list"
            },
            {
                "name": "pattern",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "pattern"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "case_insensitive",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "case_insensitive: bool | None = None"
            },
            {
                "name": "whitespace_insensitive",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "whitespace_insensitive: bool | None = None"
            },
            {
                "name": "ignore_case",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case: bool = False"
            },
            {
                "name": "ignore_whitespace",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_whitespace: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>pattern</code> is not found in <code>list</code>.</p>\n<p>By default, pattern matching is similar to matching files in a shell and is case-sensitive and whitespace-sensitive. In the pattern syntax, <code>*</code> matches to anything and <code>?</code> matches to any single character. You can also prepend <code>glob=</code> to your pattern to explicitly use this pattern matching behavior.</p>\n<p>If you prepend <code>regexp=</code> to your pattern, your pattern will be used according to the Python <a href=\"http://docs.python.org/library/re.html\">re module</a> regular expression syntax. Notice that the backslash character often used with regular expressions is an escape character in Robot Framework data and needs to be escaped with another backslash like <code>regexp=\\\\d{6}</code>. See <span class=\"name\">BuiltIn.Should Match Regexp</span> for more details.</p>\n<p>Matching is case-sensitive by default, but that can be changed by giving the <code>ignore_case</code> argument a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>). This argument is new in Robot Framework 7.0, but with earlier versions it is possible to use <code>case_insensitive</code> for the same purpose.</p>\n<p>It is possible to ignore all whitespace by giving the <code>ignore_whitespace</code> argument a true value. This argument is new in Robot Framework 7.0 as well, and with earlier versions it is possible to use <code>whitespace_insensitive</code>.</p>\n<p>Notice that both <code>case_insensitive</code> and <code>whitespace_insensitive</code> are considered deprecated. They will eventually be removed.</p>\n<p>Non-string values in lists are ignored when matching patterns.</p>\n<p>Use the <code>msg</code> argument to override the default error message.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>a*</td>\n<td></td>\n<td></td>\n<td># Match strings beginning with 'a'.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>regexp=a.*</td>\n<td></td>\n<td></td>\n<td># Same as the above but with regexp.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>regexp=\\\\d{6}</td>\n<td></td>\n<td></td>\n<td># Match strings containing six digits.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>a*</td>\n<td>ignore_case=True</td>\n<td></td>\n<td># Match strings beginning with 'a' or 'A'.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>ab*</td>\n<td>ignore_whitespace=yes</td>\n<td></td>\n<td># Match strings beginning with 'ab' with possible whitespace ignored.</td>\n</tr>\n<tr>\n<td>Should Contain Match</td>\n<td>${list}</td>\n<td>ab*</td>\n<td>ignore_whitespace=true</td>\n<td>ignore_case=true</td>\n<td># Same as the above but also ignore case.</td>\n</tr>\n</table>",
        "shortdoc": "Fails if ``pattern`` is not found in ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 981,
        "doc_fr": "Échoue si `pattern` n'est pas trouvé dans `list`.\n\nPar défaut, la correspondance de motifs est similaire à la correspondance de fichiers dans un shell et est\nsensible à la casse et aux espaces. Dans la syntaxe de motif, `*` correspond à\ntout et `?` correspond à n'importe quel caractère unique. Vous pouvez également ajouter `glob=`\nà votre motif pour utiliser explicitement ce comportement de correspondance de motifs.\n\nSi vous ajoutez `regexp=` à votre motif, votre motif sera utilisé conformément\nà la syntaxe d'expression régulière Python [module re](http://docs.python.org/library/re.html). Notez que le caractère barre oblique inverse souvent utilisé avec les\nexpressions régulières est un caractère d'échappement dans les données de Robot Framework et doit être\néchappé avec une autre barre oblique inverse comme `regexp=\\\\d{6}`. Voir BuiltIn.Should Match\nRegexp pour plus de détails.\n\nLa correspondance est sensible à la casse par défaut, mais cela peut être modifié en donnant à l'argument\n`ignore_case` une valeur true (voir Arguments booléens). Cet argument est\nnouveau dans Robot Framework 7.0, mais avec les versions antérieures, il est possible d'utiliser\n`case_insensitive` dans le même but.\n\nIl est possible d'ignorer tous les espaces en donnant à l'argument\n`ignore_whitespace` une valeur true. Cet argument est également nouveau dans Robot Framework 7.0,\net avec les versions antérieures, il est possible d'utiliser `whitespace_insensitive`.\n\nRemarquez que `case_insensitive` et `whitespace_insensitive` sont\nconsidérés comme obsolètes. Ils seront éventuellement supprimés.\n\nLes valeurs non-chaînes dans les listes sont ignorées lors de la correspondance des modèles.\n\nUtilisez l'argument `msg` pour remplacer le message d'erreur par défaut.\n\nExemples :\n\nDoit contenir Match | ${list} | a* | | | # Correspond aux chaînes commençant par 'a'.\n---|---|---|---|---|--- \nDoit contenir Match | ${liste} | regexp=a.* | | | # Identique à ci-dessus mais avec regexp. \nDoit contenir Match | ${liste} | regexp=\\\\\\d{6} | | | # Correspond aux chaînes contenant six chiffres. \nDoit contenir Match | ${liste} | a* | ignore_case=True | | # Correspond aux chaînes commençant par 'a' ou 'A'. \nDoit contenir Match | ${liste} | ab* | ignore_whitespace=yes | | # Correspond aux chaînes commençant par 'ab' en ignorant les éventuels espaces. \nDoit contenir Match | ${liste} | ab* | ignore_whitespace=true | ignore_case=true | # Identique à ci-dessus mais ignore également la casse."
    },
    {
        "name": "Should Not Contain Match",
        "args": [
            {
                "name": "list",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list"
            },
            {
                "name": "pattern",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "pattern"
            },
            {
                "name": "msg",
                "type": null,
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "msg=None"
            },
            {
                "name": "case_insensitive",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "case_insensitive: bool | None = None"
            },
            {
                "name": "whitespace_insensitive",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "whitespace_insensitive: bool | None = None"
            },
            {
                "name": "ignore_case",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case: bool = False"
            },
            {
                "name": "ignore_whitespace",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_whitespace: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Fails if <code>pattern</code> is found in <code>list</code>.</p>\n<p>Exact opposite of <a href=\"#Should%20Contain%20Match\" class=\"name\">Should Contain Match</a> keyword. See that keyword for information about arguments and usage in general.</p>",
        "shortdoc": "Fails if ``pattern`` is found in ``list``.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 1033,
        "doc_fr": "Échoue si `pattern` est trouvé dans `list`.\n\nExact opposé du mot-clé Should Contain Match. Voir ce mot-clé pour\ndes informations sur les arguments et l'utilisation en général."
    },
    {
        "name": "Sort List",
        "args": [
            {
                "name": "list_",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "list_"
            }
        ],
        "returnType": null,
        "doc": "<p>Sorts the given list in place.</p>\n<p>Sorting fails if items in the list are not comparable with each others. For example, sorting a list containing strings and numbers is not possible.</p>\n<p>Note that the given list is changed and nothing is returned. Use <a href=\"#Copy%20List\" class=\"name\">Copy List</a> first, if you need to preserve the list also in the original order.</p>",
        "shortdoc": "Sorts the given list in place.",
        "tags": [],
        "source": "/home/peke/Devel/robotframework/src/robot/libraries/Collections.py",
        "lineno": 293,
        "doc_fr": "Trie la liste donnée sur place.\n\nLe tri échoue si les éléments de la liste ne sont pas comparables entre eux. Par exemple, le tri d'une liste contenant des chaînes et des nombres n'est pas possible.\n\nNotez que la liste donnée est modifiée et que rien n'est renvoyé. Utilisez d'abord Copier la liste\nsi vous devez conserver la liste également dans l'ordre d'origine."
    }
]