[
    {
        "name": "Add Cookie",
        "args": [
            {
                "name": "name",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name: str"
            },
            {
                "name": "value",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: str"
            },
            {
                "name": "path",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "path: str | None = None"
            },
            {
                "name": "domain",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "domain: str | None = None"
            },
            {
                "name": "secure",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "secure: bool | None = None"
            },
            {
                "name": "expiry",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "expiry: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Adds a cookie to your current session.</p>\n<p><code>name</code> and <code>value</code> are required, <code>path</code>, <code>domain</code>, <code>secure</code> and <code>expiry</code> are optional.  Expiry supports the same formats as the <a href=\"http://robotframework.org/robotframework/latest/libraries/DateTime.html\">DateTime</a> library or an epoch timestamp.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>domain=example.com</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=2027-09-28 16:21:35</td>\n<td># Expiry as timestamp.</td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=1822137695</td>\n<td># Expiry as epoch seconds.</td>\n</tr>\n</table>\n<p>Prior to SeleniumLibrary 3.0 setting expiry did not work.</p>",
        "shortdoc": "Adds a cookie to your current session.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/cookie.py",
        "lineno": 143,
        "doc_fr": "Ajoute un cookie à votre session actuelle.\n\n`name` et `value` sont obligatoires, `path`, `domain`, `secure` et `expiry` sont\nfacultatifs. Expiry prend en charge les mêmes formats que la\n[DateTime](http://robotframework.org/robotframework/latest/libraries/DateTime.html)\nbibliothèque ou un horodatage d'époque.\n\nExemple :\n\nAjouter un cookie | foo | bar | | \n---|---|---|---|--- \nAjouter un cookie | foo | bar | domain=example.com | \nAjouter un cookie | foo | bar | expiry=2027-09-28 16:21:35 | # Expiration en tant qu'horodatage. \nAjouter un cookie | foo | bar | expiry=1822137695 | # Expiration en tant que secondes d'époque. \n\nAvant SeleniumLibrary 3.0, l'expiration des paramètres ne fonctionnait pas."
    },
    {
        "name": "Add Location Strategy",
        "args": [
            {
                "name": "strategy_name",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "strategy_name: str"
            },
            {
                "name": "strategy_keyword",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "strategy_keyword: str"
            },
            {
                "name": "persist",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "persist: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Adds a custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies. <a href=\"#Remove%20Location%20Strategy\" class=\"name\">Remove Location Strategy</a> can be used to remove a registered strategy.</p>\n<p>Location strategies are automatically removed after leaving the current scope by default. Setting <code>persist</code> to a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>) will cause the location strategy to stay registered throughout the life of the test.</p>",
        "shortdoc": "Adds a custom location strategy.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1149,
        "doc_fr": "Ajoute une stratégie de localisation personnalisée.\n\nVoir Localisateurs personnalisés pour plus d'informations sur la création et l'utilisation de\nstratégies personnalisées. Supprimer la stratégie de localisation peut être utilisé pour supprimer une\nstratégie enregistrée.\n\nLes stratégies de localisation sont automatiquement supprimées après avoir quitté la portée actuelle\npar défaut. La définition de `persist` sur une valeur true (voir Arguments booléens)\nentraînera le maintien de la stratégie de localisation enregistrée tout au long de la\nvie du test."
    },
    {
        "name": "Alert Should Be Present",
        "args": [
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "text: str = "
            },
            {
                "name": "action",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "ACCEPT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "action: str = ACCEPT"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that an alert is present and by default, accepts it.</p>\n<p>Fails if no alert is present. If <code>text</code> is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p><code>action</code> and <code>timeout</code> arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.</p>",
        "shortdoc": "Verifies that an alert is present and by default, accepts it.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/alert.py",
        "lineno": 52,
        "doc_fr": "Vérifie qu'une alerte est présente et l'accepte par défaut.\n\nÉchoue si aucune alerte n'est présente. Si `text` est une chaîne non vide, elle est utilisée\npour vérifier le message de l'alerte. L'alerte est acceptée par défaut, mais ce comportement\npeut être contrôlé en utilisant l'argument `action` de la même manière qu'avec Handle\nAlert.\n\n`timeout` spécifie le temps d'attente avant que l'alerte n'apparaisse. S'il n'est pas\ndonné, le délai d'attente par défaut global est utilisé à la place.\n\nLes arguments `action` et `timeout` sont nouveaux dans SeleniumLibrary 3.0. Dans les\nversions antérieures, l'alerte était toujours acceptée et un délai d'attente était codé en dur à une\nseconde."
    },
    {
        "name": "Alert Should Not Be Present",
        "args": [
            {
                "name": "action",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "ACCEPT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "action: str = ACCEPT"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that no alert is present.</p>\n<p>If the alert actually exists, the <code>action</code> argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> keyword.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the <a href=\"#Time%20format\" class=\"name\">time format</a> section for information about the syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Verifies that no alert is present.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/alert.py",
        "lineno": 79,
        "doc_fr": "Vérifie qu'aucune alerte n'est présente.\n\nSi l'alerte existe réellement, l'argument `action` détermine comment elle\ndoit être gérée. Par défaut, l'alerte est acceptée, mais elle peut également être rejetée ou\nlaissée ouverte de la même manière qu'avec le mot-clé Handle Alert.\n\n`timeout` spécifie le délai d'attente pour l'apparition de l'alerte. Par défaut, l'alerte\nn'est pas du tout attendue, mais un délai personnalisé peut être donné si l'alerte\npeut être retardée. Consultez la section sur le format de l'heure pour plus d'informations sur la syntaxe.\n\nNouveauté dans SeleniumLibrary 3.0."
    },
    {
        "name": "Assign Id To Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "id",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "id: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Assigns a temporary <code>id</code> to the element specified by <code>locator</code>.</p>\n<p>This is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Assign%20Id%20To%20Element\" class=\"name\">Assign ID to Element</a></td>\n<td>//ul[@class='example' and ./li[contains(., 'Stuff')]]</td>\n<td>my id</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>my id</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Assigns a temporary ``id`` to the element specified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 227,
        "doc_fr": "Affecte un `id` temporaire à l'élément spécifié par `locator`.\n\nCela est particulièrement utile si le localisateur est une expression XPath compliquée et/ou lente et qu'il est nécessaire plusieurs fois. L'identifiant expire lorsque la page\nest rechargée.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nExemple :\n\nAffecter un ID à l'élément | //ul[@class='example' et ./li[contains(., 'Stuff')]] | mon identifiant \n---|---|--- \nLa ​​page doit contenir l'élément | mon identifiant |"
    },
    {
        "name": "Capture Element Screenshot",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "filename",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "selenium-element-screenshot-{index}.png",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "filename: str = selenium-element-screenshot-{index}.png"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Captures a screenshot from the element identified by <code>locator</code> and embeds it into log file.</p>\n<p>See <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> for details about <code>filename</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>An absolute path to the created element screenshot is returned.</p>\n<p>Support for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.</p>\n<p>New in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>${OUTPUTDIR}/id_image_id-1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>EMBED</td>\n</tr>\n</table>",
        "shortdoc": "Captures a screenshot from the element identified by ``locator`` and embeds it into log file.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/screenshot.py",
        "lineno": 132,
        "doc_fr": "Capture une capture d'écran de l'élément identifié par `locator` et l'intègre\ndans le fichier journal.\n\nVoir Capture d'écran de la page pour plus de détails sur l'argument `filename`. Voir la section\nLocalisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nUn chemin absolu vers la capture d'écran de l'élément créé est renvoyé.\n\nLa prise en charge de la capture d'écran à partir d'un élément est limitée chez\nles fournisseurs de navigateurs. Veuillez consulter la documentation du pilote du fournisseur du navigateur pour savoir si le\nnavigateur prend en charge la capture d'une capture d'écran à partir d'un élément.\n\nNouveau dans SeleniumLibrary 3.3. La prise en charge de EMBED est nouvelle dans SeleniumLibrary 4.2.\n\nExemples :\n\nCapture d'écran de l'élément | id:image_id | \n---|---|--- \nCapture d'écran de l'élément | id:image_id | ${OUTPUTDIR}/id_image_id-1.png \nCapture d'écran de l'élément | id:image_id | EMBED"
    },
    {
        "name": "Capture Page Screenshot",
        "args": [
            {
                "name": "filename",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "selenium-screenshot-{index}.png",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "filename: str = selenium-screenshot-{index}.png"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Takes a screenshot of the current page and embeds it into a log file.</p>\n<p><code>filename</code> argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when <a href=\"#Importing\" class=\"name\">importing</a> the library or by using the <a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a> keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>filename</code> equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem.</p>\n<p>Starting from SeleniumLibrary 1.8, if <code>filename</code> contains marker <code>{index}</code>, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>An absolute path to the created screenshot file is returned or if <code>filename</code>  equals to EMBED, word <span class=\"name\">EMBED</span> is returned.</p>\n<p>Support for EMBED is new in SeleniumLibrary 4.2</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-1.png</td>\n</tr>\n<tr>\n<td>${path} =</td>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-2.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${path}</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_name.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_name.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_with_index_{index}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_with_index_1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>formatted_index_{index:03}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/formatted_index_001.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>EMBED</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Not Exist</span></td>\n<td>EMBED</td>\n</tr>\n</table>",
        "shortdoc": "Takes a screenshot of the current page and embeds it into a log file.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/screenshot.py",
        "lineno": 70,
        "doc_fr": "Prend une capture d'écran de la page actuelle et l'intègre dans un fichier journal.\n\nL'argument `filename` spécifie le nom du fichier dans lequel écrire la capture d'écran\n. Le répertoire dans lequel les captures d'écran sont enregistrées peut être défini lors de l'importation de la\nbibliothèque ou en utilisant le mot-clé Set Screenshot Directory. Si le répertoire\nn'est pas configuré, les captures d'écran sont enregistrées dans le même répertoire où le fichier journal de\nRobot\nFramework est écrit.\n\nSi `filename` est égal à EMBED (insensible à la casse), alors la capture d'écran est intégrée\nen tant qu'image Base64 dans le fichier log.html. Dans ce cas, le fichier n'est pas créé dans le\nsystème de fichiers.\n\nÀ partir de SeleniumLibrary 1.8, si `filename` contient le marqueur `{index}`, il\nsera automatiquement remplacé par un index d'exécution unique, empêchant ainsi les fichiers\nd'être écrasés. Les indices commencent à 1 et la manière dont ils sont représentés peut être\npersonnalisée à l'aide de la syntaxe de chaîne de format Python (https://docs.python.org/3/library/string.html#format-string-syntax).\n\nUn chemin absolu vers le fichier de capture d'écran créé est renvoyé ou si `filename`\nest égal à EMBED, le mot EMBED est renvoyé.\n\nLa prise en charge d'EMBED est une nouveauté dans SeleniumLibrary 4.2\n\nExemples :\n\nCapture d'écran de la page de capture | \n---|--- \nLe fichier doit exister | ${OUTPUTDIR}/selenium-screenshot-1.png \n${path} = | Capture d'écran de la page de capture \nLe fichier doit exister | ${OUTPUTDIR}/selenium-screenshot-2.png \nLe fichier doit exister | ${path} \nCapture d'écran de la page de capture | custom_name.png \nLe fichier doit exister | ${OUTPUTDIR}/custom_name.png \nCapture d'écran de la page | custom_with_index_{index}.png \nLe fichier doit exister | ${OUTPUTDIR}/custom_with_index_1.png \nCapture d'écran de la page | formatted_index_{index:03}.png \nLe fichier doit exister | ${OUTPUTDIR}/formatted_index_001.png \nCapture d'écran de la page | EMBED \nLe fichier ne doit pas exister | EMBED"
    },
    {
        "name": "Checkbox Should Be Selected",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies checkbox <code>locator</code> is selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies checkbox ``locator`` is selected/checked.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 44,
        "doc_fr": "Vérifie que la case à cocher « locator » est sélectionnée/cochée.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Checkbox Should Not Be Selected",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies checkbox <code>locator</code> is not selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies checkbox ``locator`` is not selected/checked.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 58,
        "doc_fr": "Vérifie que la case à cocher « locator » n'est pas sélectionnée/cochée.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Choose File",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "file_path",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "file_path: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Inputs the <code>file_path</code> into the file input field <code>locator</code>.</p>\n<p>This keyword is most often used to input files into upload forms. The keyword does not check <code>file_path</code> is the file or folder available on the machine where tests are executed. If the <code>file_path</code> points at a file and when using Selenium Grid, Selenium will <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE\">magically</a>, transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.</p>\n<p>That <code>file_path</code> is not checked, is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Choose%20File\" class=\"name\">Choose File</a></td>\n<td>my_upload_field</td>\n<td>${CURDIR}/trades.csv</td>\n</tr>\n</table>",
        "shortdoc": "Inputs the ``file_path`` into the file input field ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 216,
        "doc_fr": "Saisit le `file_path` dans le champ de saisie de fichier `locator`.\n\nCe mot-clé est le plus souvent utilisé pour saisir des fichiers dans des formulaires de téléchargement. Le mot-clé\nne vérifie pas que `file_path` est le fichier ou le dossier disponible sur la machine\noù les tests sont exécutés. Si le `file_path` pointe vers un fichier et lorsque vous utilisez\nSelenium Grid, Selenium\n[magiquement](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE),\ntransfère le fichier de la machine où les tests sont exécutés vers le\nnœud Selenium Grid où le navigateur est exécuté. Selenium enverra ensuite le\nchemin du fichier, depuis le système de fichiers des nœuds, au navigateur.\n\nLe fait que `file_path` ne soit pas vérifié est une nouveauté dans SeleniumLibrary 4.0.\n\nExemple :\n\nChoisir Fichier | my_upload_field | ${CURDIR}/trades.csv \n---|---|---"
    },
    {
        "name": "Clear Element Text",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Clears the value of the text-input-element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Clears the value of the text-input-element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 561,
        "doc_fr": "Efface la valeur de l'élément d'entrée de texte identifié par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Click Button",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "modifier",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "modifier: bool | str = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Clicks the button identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
        "shortdoc": "Clicks the button identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 584,
        "doc_fr": "Clique sur le bouton identifié par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les boutons sont recherchés à l'aide de « id », « name » et « value ».\n\nVoir le mot-clé Click Element pour plus de détails sur l'argument « modifier ».\n\nL'argument « modifier » est nouveau dans SeleniumLibrary 3.3"
    },
    {
        "name": "Click Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "modifier",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "modifier: bool | str = False"
            },
            {
                "name": "action_chain",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "action_chain: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Click the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>modifier</code> argument can be used to pass <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys\">Selenium Keys</a> when clicking the element. The <span class=\"name\">+</span> can be used as a separator for different Selenium Keys. The <span class=\"name\">CTRL</span> is internally translated to the <span class=\"name\">CONTROL</span> key. The <code>modifier</code> is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT\">ALT key</a> . If <code>modifier</code> does not match to Selenium Keys, keyword fails.</p>\n<p>If <code>action_chain</code> argument is true, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the &lt;web_element&gt;.click() function. If both <code>action_chain</code> and <code>modifier</code> are defined, the click will be performed using <code>modifier</code> and <code>action_chain</code> will be ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td></td>\n<td># Would click element without any modifiers.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL</td>\n<td># Would click element with CTLR key pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL+ALT</td>\n<td># Would click element with CTLR and ALT keys pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>action_chain=True</td>\n<td># Clicks the button using an Selenium  ActionChains</td>\n</tr>\n</table>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.2 The <code>action_chain</code> argument is new in SeleniumLibrary 4.1</p>",
        "shortdoc": "Click the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 654,
        "doc_fr": "Cliquez sur l'élément identifié par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'argument « modifier » peut être utilisé pour transmettre des [clés Selenium ](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys)\nlorsque vous cliquez sur l'élément. Le + peut être utilisé comme séparateur pour différentes clés Selenium. La touche CTRL est traduite en interne en touche CONTROL. Le `modifier` est insensible à l'espace et à la casse, par exemple \"alt\" et \" aLt \" sont\ndes formats pris en charge pour la touche [ALT](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT)\n. Si `modifier` ne correspond pas aux clés Selenium, le mot-clé échoue.\n\nSi l'argument `action_chain` est vrai, voir Arguments booléens pour plus de détails sur\ncomment définir l'argument booléen, alors le mot-clé utilise le clic basé sur ActionChain au lieu\nde la fonction <web_element>.click(). Si `action_chain` et `modifier`\nsont tous deux définis, le clic sera effectué à l'aide de `modifier` et `action_chain`\nsera ignoré.\n\nExemple :\n\nCliquez sur l'élément | id : bouton | | # Cliquerait sur l'élément sans aucun modificateur.\n---|---|---|--- \nCliquez sur l'élément | id:button | CTRL | # Cliquer sur l'élément avec la touche CTLR enfoncée. \nCliquez sur l'élément | id:button | CTRL+ALT | # Cliquer sur l'élément avec les touches CTLR et ALT enfoncées. \nCliquez sur l'élément | id:button | action_chain=True | # Clique sur le bouton à l'aide d'une chaîne d'action Selenium \n\nL'argument `modifier` est nouveau dans SeleniumLibrary 3.2 L'argument `action_chain`\nest nouveau dans SeleniumLibrary 4.1"
    },
    {
        "name": "Click Element At Coordinates",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "xoffset",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "xoffset: int"
            },
            {
                "name": "yoffset",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "yoffset: int"
            }
        ],
        "returnType": null,
        "doc": "<p>Click the element <code>locator</code> at <code>xoffset/yoffset</code>.</p>\n<p>The Cursor is moved and the center of the element and x/y coordinates are calculated from that point.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Click the element ``locator`` at ``xoffset/yoffset``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 722,
        "doc_fr": "Cliquez sur l'élément « locator » à « xoffset/yoffset ».\n\nLe curseur est déplacé et le centre de l'élément ainsi que les coordonnées x/y sont\ncalculés à partir de ce point.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Click Image",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "modifier",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "modifier: bool | str = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Clicks an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
        "shortdoc": "Clicks an image identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 608,
        "doc_fr": "Clique sur une image identifiée par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les images sont recherchées à l'aide de « id », « name »,\n« src » et « alt ».\n\nVoir le mot-clé Click Element pour plus de détails sur l'argument « modifier ».\n\nL'argument « modifier » est nouveau dans SeleniumLibrary 3.3"
    },
    {
        "name": "Click Link",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "modifier",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "modifier: bool | str = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Clicks a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
        "shortdoc": "Clicks a link identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 633,
        "doc_fr": "Clique sur un lien identifié par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les liens sont recherchés à l'aide de « id », « name »,\n« href » et du texte du lien.\n\nVoir le mot-clé Click Element pour plus de détails sur l'argument « modifier ».\n\nL'argument « modifier » est nouveau dans SeleniumLibrary 3.3"
    },
    {
        "name": "Close All Browsers",
        "args": [],
        "returnType": null,
        "doc": "<p>Closes all open browsers and resets the browser cache.</p>\n<p>After this keyword, new indexes returned from <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword are reset to 1.</p>\n<p>This keyword should be used in test or suite teardown to make sure all browsers are closed.</p>",
        "shortdoc": "Closes all open browsers and resets the browser cache.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 40,
        "doc_fr": "Ferme tous les navigateurs ouverts et réinitialise le cache du navigateur.\n\nAprès ce mot-clé, les nouveaux index renvoyés par le mot-clé Open Browser sont réinitialisés\nà 1.\n\nCe mot-clé doit être utilisé lors du test ou de la suppression de la suite pour s'assurer que tous\nles navigateurs sont fermés."
    },
    {
        "name": "Close Browser",
        "args": [],
        "returnType": null,
        "doc": "<p>Closes the current browser.</p>",
        "shortdoc": "Closes the current browser.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 53,
        "doc_fr": "Ferme le navigateur actuel."
    },
    {
        "name": "Close Window",
        "args": [],
        "returnType": null,
        "doc": "<p>Closes currently opened and selected browser window/tab.</p>",
        "shortdoc": "Closes currently opened and selected browser window/tab.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 125,
        "doc_fr": "Ferme la fenêtre/l'onglet du navigateur actuellement ouvert et sélectionné."
    },
    {
        "name": "Cover Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Will cover elements identified by <code>locator</code> with a blue div without breaking page layout.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.3.0</p>\n<p>Example: |<a href=\"#Cover%20Element\" class=\"name\">Cover Element</a> | css:div#container |</p>",
        "shortdoc": "Will cover elements identified by ``locator`` with a blue div without breaking page layout.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 511,
        "doc_fr": "Couvrira les éléments identifiés par « locator » avec un div bleu sans interrompre la\nmise en page.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nNouveau dans SeleniumLibrary 3.3.0\n\nExemple : | Élément de couverture | css:div#container |"
    },
    {
        "name": "Create Webdriver",
        "args": [
            {
                "name": "driver_name",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "driver_name: str"
            },
            {
                "name": "alias",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "alias: str | None = None"
            },
            {
                "name": "kwargs",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "dict",
                            "typedoc": "dictionary",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "kwargs: dict | None = None"
            },
            {
                "name": "init_kwargs",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_NAMED",
                "required": false,
                "repr": "**init_kwargs"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Creates an instance of Selenium WebDriver.</p>\n<p>Like <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a>, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> is not adequate.</p>\n<p><code>driver_name</code> must be a WebDriver implementation name like Firefox, Chrome, Ie, Edge, Safari, or Remote.</p>\n<p>The initialized WebDriver can be configured either with a Python dictionary <code>kwargs</code> or by using keyword arguments <code>**init_kwargs</code>. These arguments are passed directly to WebDriver without any processing. See <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/api.html\">Selenium API documentation</a> for details about the supported arguments.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td># Use proxy with Firefox</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${proxy}=</td>\n<td><span class=\"name\">Evaluate</span></td>\n<td>selenium.webdriver.Proxy()</td>\n<td>modules=selenium, selenium.webdriver</td>\n</tr>\n<tr>\n<td>${proxy.http_proxy}=</td>\n<td><span class=\"name\">Set Variable</span></td>\n<td>localhost:8888</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a></td>\n<td>Firefox</td>\n<td>proxy=${proxy}</td>\n<td></td>\n</tr>\n</table>\n<p>Returns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> keyword is used. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for an example.</p>",
        "shortdoc": "Creates an instance of Selenium WebDriver.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 277,
        "doc_fr": "Crée une instance de Selenium WebDriver.\n\nComme Open Browser, mais permet de passer des arguments directement à l'instance WebDriver\ncréée. Ce mot-clé ne doit être utilisé que si la fonctionnalité\nfournie par Open Browser n'est pas adéquate.\n\n`driver_name` doit être un nom d'implémentation WebDriver comme Firefox, Chrome,\nIe, Edge, Safari ou Remote.\n\nLe WebDriver initialisé peut être configuré soit avec un dictionnaire Python\n`kwargs` soit en utilisant les arguments de mot-clé `**init_kwargs`. Ces arguments sont\npassés directement à WebDriver sans aucun traitement. Voir la [documentation de l'API Selenium](https://seleniumhq.github.io/selenium/docs/api/py/api.html) pour\nplus de détails sur les arguments pris en charge.\n\nExemples :\n\n# Utiliser un proxy avec Firefox | | | \n---|---|---|--- \n${proxy}= | Évaluer | selenium.webdriver.Proxy() | modules=selenium, selenium.webdriver \n${proxy.http_proxy}= | Set Variable | localhost:8888 | \nCreate Webdriver | Firefox | proxy=${proxy} | \n\nRenvoie l'index de cette instance de navigateur qui peut être utilisé ultérieurement pour revenir à\ncelui-ci. L'index démarre à 1 et est réinitialisé à ce dernier lorsque le mot-clé Close All\nBrowsers est utilisé. Voir Changer de navigateur pour un exemple."
    },
    {
        "name": "Current Frame Should Contain",
        "args": [
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the current frame contains <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Current Frame Contains</span>.</p>",
        "shortdoc": "Verifies that the current frame contains ``text``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/frames.py",
        "lineno": 53,
        "doc_fr": "Vérifie que le cadre actuel contient du « texte ».\n\nVoir La page doit contenir pour une explication sur l'argument « loglevel ».\n\nAvant SeleniumLibrary 3.0, ce mot-clé s'appelait « Le cadre actuel contient »."
    },
    {
        "name": "Current Frame Should Not Contain",
        "args": [
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the current frame does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Verifies that the current frame does not contain ``text``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/frames.py",
        "lineno": 70,
        "doc_fr": "Vérifie que le cadre actuel ne contient pas de « texte ».\n\nVoir La page doit contenir pour une explication sur l'argument « loglevel »."
    },
    {
        "name": "Delete All Cookies",
        "args": [],
        "returnType": null,
        "doc": "<p>Deletes all cookies.</p>",
        "shortdoc": "Deletes all cookies.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/cookie.py",
        "lineno": 57,
        "doc_fr": "Supprime tous les cookies."
    },
    {
        "name": "Delete Cookie",
        "args": [
            {
                "name": "name",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name"
            }
        ],
        "returnType": null,
        "doc": "<p>Deletes the cookie matching <code>name</code>.</p>\n<p>If the cookie is not found, nothing happens.</p>",
        "shortdoc": "Deletes the cookie matching ``name``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/cookie.py",
        "lineno": 62,
        "doc_fr": "Supprime le cookie correspondant à « nom ».\n\nSi le cookie n'est pas trouvé, rien ne se passe."
    },
    {
        "name": "Double Click Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Double clicks the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Double clicks the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 744,
        "doc_fr": "Double-cliquez sur l'élément identifié par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Drag And Drop",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "target",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "target: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Drags the element identified by <code>locator</code> into the <code>target</code> element.</p>\n<p>The <code>locator</code> argument is the locator of the dragged element and the <code>target</code> is the locator of the target. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop\" class=\"name\">Drag And Drop</a></td>\n<td>css:div#element</td>\n<td>css:div.target</td>\n</tr>\n</table>",
        "shortdoc": "Drags the element identified by ``locator`` into the ``target`` element.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 780,
        "doc_fr": "Fait glisser l'élément identifié par `locator` dans l'élément `target`.\n\nL'argument `locator` est le localisateur de l'élément glissé et `target`\nest le localisateur de la cible. Voir la section Localisation des éléments pour plus de détails\nsur la syntaxe du localisateur.\n\nExemple :\n\nGlisser-déposer | css:div#element | css:div.target \n---|---|---"
    },
    {
        "name": "Drag And Drop By Offset",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "xoffset",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "xoffset: int"
            },
            {
                "name": "yoffset",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "yoffset: int"
            }
        ],
        "returnType": null,
        "doc": "<p>Drags the element identified with <code>locator</code> by <code>xoffset/yoffset</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element will be moved by <code>xoffset</code> and <code>yoffset</code>, each of which is a negative or positive number specifying the offset.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop%20By%20Offset\" class=\"name\">Drag And Drop By Offset</a></td>\n<td>myElem</td>\n<td>50</td>\n<td>-35</td>\n<td># Move myElem 50px right and 35px down</td>\n</tr>\n</table>",
        "shortdoc": "Drags the element identified with ``locator`` by ``xoffset/yoffset``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 798,
        "doc_fr": "Déplace l'élément identifié avec `locator` par `xoffset/yoffset`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'élément sera déplacé par `xoffset` et `yoffset`, chacun étant un\nnombre négatif ou positif spécifiant le décalage.\n\nExemple :\n\nGlisser et déposer par décalage | myElem | 50 | -35 | # Déplacer myElem de 50 px vers la droite et de 35 px vers le bas \n---|---|---|---|---"
    },
    {
        "name": "Element Attribute Value Should Be",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "attribute",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "attribute: str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: None | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies element identified by <code>locator</code> contains expected attribute value.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example: <a href=\"#Element%20Attribute%20Value%20Should%20Be\" class=\"name\">Element Attribute Value Should Be</a> | css:img | href | value</p>\n<p>New in SeleniumLibrary 3.2.</p>",
        "shortdoc": "Verifies element identified by ``locator`` contains expected attribute value.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 451,
        "doc_fr": "Vérifie que l'élément identifié par « locator » contient la valeur d'attribut attendue.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nExemple : La valeur d'attribut d'élément doit être | css:img | href | value\n\nNouveauté dans SeleniumLibrary 3.2."
    },
    {
        "name": "Element Should Be Disabled",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element identified by <code>locator</code> is disabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies that element identified by ``locator`` is disabled.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 246,
        "doc_fr": "Vérifie que l'élément identifié par « locator » est désactivé.\n\nCe mot-clé considère également que les éléments en lecture seule sont désactivés.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Element Should Be Enabled",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element identified by <code>locator</code> is enabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies that element identified by ``locator`` is enabled.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 259,
        "doc_fr": "Vérifie que l'élément identifié par « locator » est activé.\n\nCe mot-clé considère également que les éléments en lecture seule sont désactivés.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Element Should Be Focused",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element identified by <code>locator</code> is focused.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Verifies that element identified by ``locator`` is focused.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 272,
        "doc_fr": "Vérifie que l'élément identifié par « locator » est focalisé.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nNouveauté dans SeleniumLibrary 3.0."
    },
    {
        "name": "Element Should Be Visible",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the element identified by <code>locator</code> is visible.</p>\n<p>Herein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries <code>display:none</code> is not logically visible, so using this keyword on that element would fail.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>",
        "shortdoc": "Verifies that the element identified by ``locator`` is visible.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 289,
        "doc_fr": "Vérifie que l'élément identifié par `locator` est visible.\n\nIci, visible signifie que l'élément est logiquement visible, et non optiquement\nvisible dans la fenêtre d'affichage actuelle du navigateur. Par exemple, un élément qui porte\n`display:none` n'est pas logiquement visible, donc l'utilisation de ce mot-clé sur cet élément\néchouerait.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'argument `message` peut être utilisé pour remplacer le message d'erreur par défaut."
    },
    {
        "name": "Element Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: None | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "ignore_case",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element <code>locator</code> contains text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Text%20Should%20Be\" class=\"name\">Element Text Should Be</a> if you want to match the exact text, not a substring.</p>",
        "shortdoc": "Verifies that element ``locator`` contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 54,
        "doc_fr": "Vérifie que l'élément `locator` contient le texte `expected`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'argument `message` peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument `ignore_case` peut être défini sur True pour comparer sans tenir compte de la casse,\nla valeur par défaut est False. Nouveauté dans SeleniumLibrary 3.1.\n\nL'argument `ignore_case` est une nouveauté dans SeleniumLibrary 3.1.\n\nUtilisez l'élément Le texte doit être si vous souhaitez faire correspondre le texte exact, pas une\nsous-chaîne."
    },
    {
        "name": "Element Should Not Be Visible",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the element identified by <code>locator</code> is NOT visible.</p>\n<p>Passes if the element does not exists. See <a href=\"#Element%20Should%20Be%20Visible\" class=\"name\">Element Should Be Visible</a> for more information about visibility and supported arguments.</p>",
        "shortdoc": "Verifies that the element identified by ``locator`` is NOT visible.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 312,
        "doc_fr": "Vérifie que l'élément identifié par `locator` n'est PAS visible.\n\nPasse si l'élément n'existe pas. Voir L'élément doit être visible pour plus\nd'informations sur la visibilité et les arguments pris en charge."
    },
    {
        "name": "Element Should Not Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: None | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "ignore_case",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element <code>locator</code> does not contain text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument new in SeleniumLibrary 3.1.</p>",
        "shortdoc": "Verifies that element ``locator`` does not contain text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 92,
        "doc_fr": "Vérifie que l'élément `locator` ne contient pas le texte `expected`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'argument `message` peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument `ignore_case` peut être défini sur True pour comparer sans tenir compte de la casse,\nla valeur par défaut est False.\n\nArgument `ignore_case` nouveau dans SeleniumLibrary 3.1."
    },
    {
        "name": "Element Text Should Be",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: None | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "ignore_case",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element <code>locator</code> contains exact the text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Should%20Contain\" class=\"name\">Element Should Contain</a> if a substring match is desired.</p>",
        "shortdoc": "Verifies that element ``locator`` contains exact the text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 331,
        "doc_fr": "Vérifie que l'élément `locator` contient exactement le texte `attendu`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'argument `message` peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument `ignore_case` peut être défini sur True pour comparer sans tenir compte de la casse,\nla valeur par défaut est False.\n\nL'argument `ignore_case` est nouveau dans SeleniumLibrary 3.1.\n\nUtilisez Element Should Contain si une correspondance de sous-chaîne est souhaitée."
    },
    {
        "name": "Element Text Should Not Be",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "not_expected",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "not_expected: None | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "ignore_case",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ignore_case: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element <code>locator</code> does not contain exact the text <code>not_expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p>New in SeleniumLibrary 3.1.1</p>",
        "shortdoc": "Verifies that element ``locator`` does not contain exact the text ``not_expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 367,
        "doc_fr": "Vérifie que l'élément `locator` ne contient pas exactement le texte\n`not_expected`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'argument `message` peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument `ignore_case` peut être défini sur True pour comparer sans tenir compte de la casse,\nla valeur par défaut est False.\n\nNouveauté dans SeleniumLibrary 3.1.1"
    },
    {
        "name": "Execute Async Javascript",
        "args": [
            {
                "name": "code",
                "type": {
                    "name": "Any",
                    "typedoc": "Any",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*code: Any"
            }
        ],
        "returnType": {
            "name": "Any",
            "typedoc": "Any",
            "nested": [],
            "union": false
        },
        "doc": "<p>Executes asynchronous JavaScript code with possible arguments.</p>\n<p>Similar to <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.</p>\n<p>Scripts must complete within the script timeout or this keyword will fail. See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section for more information.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script\">arguments</a> as part of <code>code</code> argument. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> for more details.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>${CURDIR}/async_js_to_execute.js</td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>var callback = arguments[arguments.length - 1];</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>function answer(){callback(\"text\");};</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>window.setTimeout(answer, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${result}</td>\n<td>text</td>\n</tr>\n</table>",
        "shortdoc": "Executes asynchronous JavaScript code with possible arguments.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/javascript.py",
        "lineno": 76,
        "doc_fr": "Exécute du code JavaScript asynchrone avec des arguments possibles.\n\nSimilaire à Exécuter Javascript, sauf que les scripts exécutés avec ce mot-clé\ndoivent signaler explicitement qu'ils sont terminés en appelant le rappel fourni.\nCe rappel est toujours injecté dans la fonction exécutée comme dernier\nargument.\n\nLes scripts doivent se terminer dans le délai d'expiration du script, sinon ce mot-clé échouera. Voir\nla section Délai d'expiration pour plus d'informations.\n\nÀ partir de SeleniumLibrary 3.2, il est possible de fournir des\n[arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script)\ndans le cadre de l'argument `code`. Voir Exécuter Javascript pour plus de détails.\n\nExecute Async JavaScript | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); | \n---|---|--- \nExécuter JavaScript asynchrone | ${CURDIR}/async_js_to_execute.js | \n${result} = | Exécuter JavaScript asynchrone | \n... | var callback = arguments[arguments.length - 1]; | \n... | function answer(){callback(\"text\");}; | \n... | window.setTimeout(answer, 2000); | \nDoit être égal | ${result} | text"
    },
    {
        "name": "Execute Javascript",
        "args": [
            {
                "name": "code",
                "type": {
                    "name": "Any",
                    "typedoc": "Any",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*code: Any"
            }
        ],
        "returnType": {
            "name": "Any",
            "typedoc": "Any",
            "nested": [],
            "union": false
        },
        "doc": "<p>Executes the given JavaScript code with possible arguments.</p>\n<p><code>code</code> may be divided into multiple cells in the test data and <code>code</code> may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from <code>code</code>.</p>\n<p>If <code>code</code> is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.</p>\n<p>The JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use <code>window</code> to refer to the window of your application and <code>document</code> to refer to the document object of the current frame or window, e.g. <code>document.getElementById('example')</code>.</p>\n<p>This keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script\">arguments</a> as part of <code>code</code> argument. The JavaScript code and arguments must be separated with <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers and must be used exactly with this format. If the Javascript code is first, then the <span class=\"name\">JAVASCRIPT</span> marker is optional. The order of <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers can be swapped, but if <span class=\"name\">ARGUMENTS</span> is the first marker, then <span class=\"name\">JAVASCRIPT</span> marker is mandatory. It is only allowed to use <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers only one time in the <code>code</code> argument.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>window.myFunc('arg1', 'arg2')</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>${CURDIR}/js_to_execute.js</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>alert(arguments[0]);</td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td>JAVASCRIPT</td>\n<td>alert(arguments[0]);</td>\n</tr>\n</table>",
        "shortdoc": "Executes the given JavaScript code with possible arguments.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/javascript.py",
        "lineno": 33,
        "doc_fr": "Exécute le code JavaScript donné avec des arguments possibles.\n\n`code` peut être divisé en plusieurs cellules dans les données de test et `code` peut\ncontenir plusieurs lignes de code et d'arguments. Dans ce cas, les parties de code JavaScript\nsont concaténées ensemble sans ajouter d'espaces et les\narguments facultatifs sont séparés de `code`.\n\nSi `code` est un chemin vers un fichier existant, le JavaScript à\nexécuter sera lu à partir de ce fichier. Les barres obliques fonctionnent comme séparateur de chemin sur\ntous les systèmes d'exploitation.\n\nLe JavaScript s'exécute dans le contexte du cadre ou de la\nfenêtre actuellement sélectionné(e) comme corps d'une fonction anonyme. Utilisez `window` pour faire référence à la\nfenêtre de votre application et `document` pour faire référence à l'objet document du\ncadre ou de la fenêtre actuelle, par exemple `document.getElementById('example')`.\n\nCe mot-clé renvoie tout ce que le code JavaScript\nexécuté renvoie. Les valeurs de retour sont\nconverties en types Python appropriés.\n\nÀ partir de SeleniumLibrary 3.2, il est possible de fournir des\n[arguments](https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script)\nJavaScript dans le cadre de l'argument `code`. Le code JavaScript et les arguments doivent être\nséparés par des marqueurs JAVASCRIPT et ARGUMENTS et doivent être utilisés exactement\navec ce format. Si le code Javascript est le premier, le marqueur JAVASCRIPT est\nfacultatif. L'ordre des marqueurs JAVASCRIPT et ARGUMENTS peut être inversé, mais si\nARGUMENTS est le premier marqueur, le marqueur JAVASCRIPT est obligatoire. Il n'est\nautorisé d'utiliser les marqueurs JAVASCRIPT et ARGUMENTS qu'une seule fois dans\nl'argument `code`.\n\nExecute JavaScript | window.myFunc('arg1', 'arg2') | | | \n---|---|---|---|--- \nExécuter JavaScript | ${CURDIR}/js_to_execute.js | | | \nExécuter JavaScript | alert(arguments[0]); | ARGUMENTS | 123 | \nExécuter JavaScript | ARGUMENTS | 123 | JAVASCRIPT | alert(arguments[0]);"
    },
    {
        "name": "Frame Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that frame identified by <code>locator</code> contains <code>text</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Verifies that frame identified by ``locator`` contains ``text``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/frames.py",
        "lineno": 84,
        "doc_fr": "Vérifie que le cadre identifié par « locator » contient « text ».\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nConsultez La page doit contenir pour une explication sur l'argument « loglevel »."
    },
    {
        "name": "Get Action Chain Delay",
        "args": [],
        "returnType": null,
        "doc": "<p>Gets the currently stored value for chain_delay_value in timestr format.</p>",
        "shortdoc": "Gets the currently stored value for chain_delay_value in timestr format.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 656,
        "doc_fr": "Obtient la valeur actuellement stockée pour chain_delay_value au format timestr."
    },
    {
        "name": "Get All Links",
        "args": [],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns a list containing ids of all links found in current page.</p>\n<p>If a link has no id, an empty string will be in the list instead.</p>",
        "shortdoc": "Returns a list containing ids of all links found in current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1028,
        "doc_fr": "Renvoie une liste contenant les identifiants de tous les liens trouvés dans la page actuelle.\n\nSi un lien n'a pas d'identifiant, une chaîne vide apparaîtra à la place dans la liste."
    },
    {
        "name": "Get Browser Aliases",
        "args": [],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary <code>${aliases.key}</code> or as list <code>@{aliases}[0]</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserA</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserB</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{aliases}</td>\n<td><a href=\"#Get%20Browser%20Aliases\" class=\"name\">Get Browser Aliases</a></td>\n<td></td>\n<td># &amp;{aliases} = { BrowserA=1|BrowserB=2 }</td>\n</tr>\n<tr>\n<td><span class=\"name\">Log</span></td>\n<td>${aliases.BrowserA}</td>\n<td></td>\n<td># logs <code>1</code></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${alias}</td>\n<td>IN</td>\n<td>@{aliases}</td>\n</tr>\n<tr>\n<td></td>\n<td><span class=\"name\">Log</span></td>\n<td>${alias}</td>\n<td># logs <code>BrowserA</code> and <code>BrowserB</code></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
        "shortdoc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 388,
        "doc_fr": "Renvoie les alias de tous les navigateurs actifs qui ont un alias comme NormalizedDict. Le\ndictionnaire contient les alias comme clés et l'index comme valeur. On peut y accéder\nen tant que dictionnaire `${aliases.key}` ou en tant que liste `@{aliases}[0]`.\n\nExemple :\n\nOpen Browser | <https://example.com> | alias=BrowserA | \n---|---|---|--- \nOpen Browser | <https://example.com> | alias=BrowserB | \n&{aliases} | Get Browser Aliases | | # &{aliases} = { BrowserA=1|BrowserB=2 } \nLog | ${aliases.BrowserA} | | # logs `1` \nFOR | ${alias} | IN | @{aliases} \n| Log | ${alias} | # enregistre `BrowserA` et `BrowserB` \nEND | | | \n\nVoir Switch Browser pour plus d'informations et d'exemples.\n\nNouveautés de SeleniumLibrary 4.0"
    },
    {
        "name": "Get Browser Ids",
        "args": [],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns index of all active browser as list.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>@{browser_ids}=</td>\n<td>Get Browser Ids</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${id}</td>\n<td>IN</td>\n<td>@{browser_ids}</td>\n</tr>\n<tr>\n<td></td>\n<td>@{window_titles}=</td>\n<td>Get Window Titles</td>\n<td>browser=${id}</td>\n</tr>\n<tr>\n<td></td>\n<td>Log</td>\n<td>Browser ${id} has these windows: ${window_titles}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
        "shortdoc": "Returns index of all active browser as list.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 371,
        "doc_fr": "Renvoie l'index de tous les navigateurs actifs sous forme de liste.\n\nExemple :\n\n@{browser_ids}= | Obtenir les identifiants du navigateur | | \n---|---|---|--- \nPOUR | ${id} | DANS | @{browser_ids} \n| @{window_titles}= | Obtenir les titres des fenêtres | navigateur=${id} \n| Journal | Le navigateur ${id} a ces fenêtres : ${window_titles} | \nFIN | | | \n\nVoir Changer de navigateur pour plus d'informations et d'exemples.\n\nNouveautés de SeleniumLibrary 4.0"
    },
    {
        "name": "Get Cookie",
        "args": [
            {
                "name": "name",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "name: str"
            }
        ],
        "returnType": {
            "name": "CookieInformation",
            "typedoc": null,
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns information of cookie with <code>name</code> as an object.</p>\n<p>If no cookie is found with <code>name</code>, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.</p>\n<table border=\"1\">\n<tr>\n<th>Attribute</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of a cookie.</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Value of the cookie.</td>\n</tr>\n<tr>\n<td>path</td>\n<td>Indicates a URL path, for example <code>/</code>.</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>The domain, the cookie is visible to.</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>When true, the cookie is only used with HTTPS connections.</td>\n</tr>\n<tr>\n<td>httpOnly</td>\n<td>When true, the cookie is not accessible via JavaScript.</td>\n</tr>\n<tr>\n<td>expiry</td>\n<td>Python datetime object indicating when the cookie expires.</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>Possible attributes outside of the WebDriver specification</td>\n</tr>\n</table>\n<p>See the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a> for details about the cookie information. Notice that <code>expiry</code> is specified as a <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\">datetime object</a>, not as seconds since Unix Epoch like WebDriver natively does.</p>\n<p>In some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a>. These other attributes are available in an <code>extra</code> attribute in the cookie object and it contains a dictionary of the other attributes. The <code>extra</code> attribute is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n</tr>\n<tr>\n<td>${cookie} =</td>\n<td><a href=\"#Get%20Cookie\" class=\"name\">Get Cookie</a></td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.name}</td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.value}</td>\n<td>bar</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${cookie.expiry.year} &gt; 2017</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Returns information of cookie with ``name`` as an object.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/cookie.py",
        "lineno": 97,
        "doc_fr": "Renvoie les informations du cookie avec `name` comme objet.\n\nSi aucun cookie n'est trouvé avec `name`, le mot-clé échoue. L'objet cookie contient\ndes détails sur le cookie. Les attributs disponibles dans l'objet sont documentés dans\nle tableau ci-dessous.\n\nAttribut | Explication \n---|--- \nname | Le nom d'un cookie. \nvalue | Valeur du cookie. \npath | Indique un chemin d'URL, par exemple `/`. \ndomain | Le domaine pour lequel le cookie est visible. \nsecure | Lorsque la valeur est true, le cookie n'est utilisé qu'avec les connexions HTTPS. \nhttpOnly | Lorsque la valeur est true, le cookie n'est pas accessible via JavaScript. \nexpiry | Objet datetime Python indiquant quand le cookie expire. \nextra | Attributs possibles en dehors de la spécification WebDriver \n\nVoir la [spécification WebDriver](https://w3c.github.io/webdriver/#cookies)\npour plus de détails sur les informations sur les cookies. Notez que `expiry` est spécifié comme\nun [objet\ndatetime](https://docs.python.org/3/library/datetime.html#datetime.datetime),\net non comme des secondes depuis Unix Epoch comme le fait nativement WebDriver.\n\nDans certains cas, par exemple lors de l'exécution d'un navigateur dans le cloud, il est\npossible que le cookie contienne d'autres attributs que ceux définis dans la [spécification\nWebDriver](https://w3c.github.io/webdriver/#cookies). Ces autres\nattributs sont disponibles dans un attribut `extra` dans l'objet cookie et il\ncontient un dictionnaire des autres attributs. L'attribut `extra` est nouveau dans\nSeleniumLibrary 4.0.\n\nExemple :\n\nAjouter un cookie | foo | bar \n---|---|--- \n${cookie} = | Obtenir un cookie | foo \nDoit être égal | ${cookie.name} | foo \nDoit être égal | ${cookie.value} | bar \nDoit être vrai | ${cookie.expiry.year} > 2017 | \n\nNouveau dans SeleniumLibrary 3.0."
    },
    {
        "name": "Get Cookies",
        "args": [
            {
                "name": "as_dict",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "as_dict: bool = False"
            }
        ],
        "returnType": {
            "name": "Union",
            "typedoc": null,
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                {
                    "name": "dict",
                    "typedoc": "dictionary",
                    "nested": [],
                    "union": false
                }
            ],
            "union": true
        },
        "doc": "<p>Returns all cookies of the current page.</p>\n<p>If <code>as_dict</code> argument evaluates as false, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details, then cookie information is returned as a single string in format <code>name1=value1; name2=value2; name3=value3</code>. When <code>as_dict</code> argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter.</p>\n<p>The <span class=\"name\">` as_dict</span>` argument is new in SeleniumLibrary 3.3</p>",
        "shortdoc": "Returns all cookies of the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/cookie.py",
        "lineno": 70,
        "doc_fr": "Renvoie tous les cookies de la page actuelle.\n\nSi l'argument `as_dict` est évalué comme faux, voir Arguments booléens pour plus\nde détails, alors les informations sur les cookies sont renvoyées sous forme de chaîne unique au format\n`name1=value1; name2=value2; name3=value3`. Lorsque l'argument `as_dict` est évalué\ncomme vrai, les informations sur les cookies sont renvoyées sous forme de dictionnaire Robot Framework.\nLe format de chaîne peut être utilisé, par exemple, à des fins de journalisation ou dans les en-têtes\nlors de l'envoi de requêtes HTTP. Le format de dictionnaire est utile lorsque le résultat\npeut être transmis au paramètre facultatif cookies du mot-clé Create Session de la bibliothèque de requêtes.\n\nL'argument ` as_dict` est nouveau dans SeleniumLibrary 3.3"
    },
    {
        "name": "Get Dom Attribute",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "attribute",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "attribute: str"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the value of <code>attribute</code> from the element <code>locator</code>. <a href=\"#Get%20Dom%20Attribute\" class=\"name\">Get DOM Attribute</a> keyword only returns attributes declared within the element's HTML markup.  If the requested attribute is not there, the keyword returns ${None}.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${id}=</td>\n<td><a href=\"#Get%20Dom%20Attribute\" class=\"name\">Get DOM Attribute</a></td>\n<td>css:h1</td>\n<td>id</td>\n</tr>\n</table>",
        "shortdoc": "Returns the value of ``attribute`` from the element ``locator``. `Get DOM Attribute` keyword only returns attributes declared within the element's HTML markup.  If the requested attribute is not there, the keyword returns ${None}.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 419,
        "doc_fr": "Renvoie la valeur de `attribute` de l'élément `locator`. Obtenir l'attribut DOM\nkeyword renvoie uniquement les attributs déclarés dans le balisage HTML de l'élément. Si\nl'attribut demandé n'est pas présent, le mot clé renvoie ${None}.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nExemple :\n\n${id}= | Obtenir l'attribut DOM | css:h1 | id \n---|---|---|---"
    },
    {
        "name": "Get Element Attribute",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "attribute",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "attribute: str"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the value of <code>attribute</code> from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${id}=</td>\n<td><a href=\"#Get%20Element%20Attribute\" class=\"name\">Get Element Attribute</a></td>\n<td>css:h1</td>\n<td>id</td>\n</tr>\n</table>\n<p>Passing attribute name as part of the <code>locator</code> was removed in SeleniumLibrary 3.2. The explicit <code>attribute</code> argument should be used instead.</p>",
        "shortdoc": "Returns the value of ``attribute`` from the element ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 401,
        "doc_fr": "Renvoie la valeur de `attribute` de l'élément `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nExemple :\n\n${id}= | Obtenir l'attribut de l'élément | css:h1 | id \n---|---|---|--- \n\nLa transmission du nom de l'attribut dans le cadre de `locator` a été supprimée dans SeleniumLibrary\n3.2. L'argument explicite `attribute` doit être utilisé à la place."
    },
    {
        "name": "Get Element Count",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the number of elements matching <code>locator</code>.</p>\n<p>If you wish to assert the number of matching elements, use <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> with <code>limit</code> argument. Keyword will always return an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${count} =</td>\n<td><a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a></td>\n<td>name:div_name</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${count} &gt; 2</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Returns the number of elements matching ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1133,
        "doc_fr": "Renvoie le nombre d'éléments correspondant à `locator`.\n\nSi vous souhaitez affirmer le nombre d'éléments correspondants, utilisez Page Should Contain\nElement avec l'argument `limit`. Le mot-clé renverra toujours un entier.\n\nExemple :\n\n${count} = | Obtenir le nombre d'éléments | nom :div_name \n---|---|--- \nDoit être vrai | ${count} > 2 | \n\nNouveau dans SeleniumLibrary 3.0."
    },
    {
        "name": "Get Element Size",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "Tuple",
            "typedoc": "tuple",
            "nested": [
                {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns width and height of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both width and height are returned as integers.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height} =</td>\n<td><a href=\"#Get%20Element%20Size\" class=\"name\">Get Element Size</a></td>\n<td>css:div#container</td>\n</tr>\n</table>",
        "shortdoc": "Returns width and height of the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 496,
        "doc_fr": "Renvoie la largeur et la hauteur de l'élément identifié par `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nLa largeur et la hauteur sont toutes deux renvoyées sous forme d'entiers.\n\nExemple :\n\n${width} | ${height} = | Obtenir la taille de l'élément | css:div#container \n---|---|---|---"
    },
    {
        "name": "Get Horizontal Position",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the horizontal position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the left side of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Vertical%20Position\" class=\"name\">Get Vertical Position</a>.</p>",
        "shortdoc": "Returns the horizontal position of the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 482,
        "doc_fr": "Renvoie la position horizontale de l'élément identifié par `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nLa position est renvoyée en pixels à gauche de la page, sous forme d'entier.\n\nVoir également Obtenir la position verticale."
    },
    {
        "name": "Get List Items",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "values",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "values: bool = False"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns all labels or values of selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Returns visible labels by default, but values can be returned by setting the <code>values</code> argument to a true value (see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a>).</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${labels} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>mylist</td>\n<td></td>\n</tr>\n<tr>\n<td>${values} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>css:#example select</td>\n<td>values=True</td>\n</tr>\n</table>\n<p>Support to return values is new in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Returns all labels or values of selection list ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 27,
        "doc_fr": "Renvoie toutes les étiquettes ou valeurs de la liste de sélection `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nRenvoie les étiquettes visibles par défaut, mais des valeurs peuvent être renvoyées en définissant l'argument\n`values` sur une valeur true (voir Arguments booléens).\n\nExemple :\n\n${labels} = | Obtenir les éléments de la liste | mylist | \n---|---|---|--- \n${values} = | Obtenir les éléments de la liste | css:#example select | values=True \n\nLa prise en charge du retour de valeurs est une nouveauté dans SeleniumLibrary 3.0."
    },
    {
        "name": "Get Location",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the current browser window URL.</p>",
        "shortdoc": "Returns the current browser window URL.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 427,
        "doc_fr": "Renvoie l'URL de la fenêtre actuelle du navigateur."
    },
    {
        "name": "Get Locations",
        "args": [
            {
                "name": "browser",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "CURRENT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "browser: str = CURRENT"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns and logs URLs of all windows of the selected browser.</p>\n<p><b>Browser Scope:</b></p>\n<p>The <code>browser</code> argument specifies the browser that shall return its windows information.</p>\n<ul>\n<li><code>browser</code> can be <code>index_or_alias</code> like in <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a>.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>CURRENT</code> (default, case-insensitive) the currently active browser is selected.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>ALL</code> (case-insensitive) the window information of all windows of all opened browsers are returned.</li>\n</ul>",
        "shortdoc": "Returns and logs URLs of all windows of the selected browser.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 166,
        "doc_fr": "Renvoie et enregistre les URL de toutes les fenêtres du navigateur sélectionné.\n\n**Portée du navigateur :**\n\nL'argument `browser` spécifie le navigateur qui doit renvoyer ses\ninformations sur les fenêtres.\n\n* `browser` peut être `index_or_alias` comme dans Switch Browser.\n\n* Si `browser` est `CURRENT` (par défaut, insensible à la casse), le navigateur actuellement actif est sélectionné.\n\n* Si `browser` est `ALL` (insensible à la casse), les informations sur les fenêtres de toutes les fenêtres de tous les navigateurs ouverts sont renvoyées."
    },
    {
        "name": "Get Property",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "property",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "property: str"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the value of <code>property</code> from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${text_length}=</td>\n<td><a href=\"#Get%20Property\" class=\"name\">Get Property</a></td>\n<td>css:h1</td>\n<td>text_length</td>\n</tr>\n</table>",
        "shortdoc": "Returns the value of ``property`` from the element ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 436,
        "doc_fr": "Renvoie la valeur de `property` à partir de l'élément `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nExemple :\n\n${text_length}= | Obtenir la propriété | css:h1 | text_length \n---|---|---|---"
    },
    {
        "name": "Get Selected List Label",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the label of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the label of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Returns the label of selected option from selection list ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 52,
        "doc_fr": "Renvoie l'étiquette de l'option sélectionnée dans la liste de sélection `locator`.\n\nSi plusieurs options sont sélectionnées, l'étiquette de la première option est\nrenvoyée.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Get Selected List Labels",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns labels of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Returns labels of selected options from selection list ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 65,
        "doc_fr": "Renvoie les libellés des options sélectionnées à partir de la liste de sélection `locator`.\n\nÀ partir de SeleniumLibrary 3.0, renvoie une liste vide s'il n'y a pas\nde sélections. Dans les versions antérieures, cela provoquait une erreur.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Get Selected List Value",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the value of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the value of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Returns the value of selected option from selection list ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 78,
        "doc_fr": "Renvoie la valeur de l'option sélectionnée dans la liste de sélection `locator`.\n\nSi plusieurs options sont sélectionnées, la valeur de la première option est\nrenvoyée.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Get Selected List Values",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns values of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Returns values of selected options from selection list ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 91,
        "doc_fr": "Renvoie les valeurs des options sélectionnées à partir de la liste de sélection `locator`.\n\nÀ partir de SeleniumLibrary 3.0, renvoie une liste vide s'il n'y a aucune\nsélection. Dans les versions antérieures, cela provoquait une erreur.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Get Selenium Implicit Wait",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Gets the implicit wait value used by Selenium.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>",
        "shortdoc": "Gets the implicit wait value used by Selenium.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 549,
        "doc_fr": "Obtient la valeur d'attente implicite utilisée par Selenium.\n\nLa valeur est renvoyée sous forme de chaîne lisible par l'homme, comme « 1 seconde ».\n\nVoir la section Attente implicite ci-dessus pour plus d'informations."
    },
    {
        "name": "Get Selenium Page Load Timeout",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Gets the time to wait for a page load to complete before raising a timeout exception.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Page%20load\" class=\"name\">Page load</a> section above for more information.</p>\n<p>New in SeleniumLibrary 6.1</p>",
        "shortdoc": "Gets the time to wait for a page load to complete before raising a timeout exception.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 559,
        "doc_fr": "Obtient le temps d'attente pour la fin du chargement d'une page avant de déclencher une exception de délai d'attente.\n\nLa valeur est renvoyée sous la forme d'une chaîne lisible par l'homme, comme « 1 seconde ».\n\nConsultez la section Chargement de page ci-dessus pour plus d'informations.\n\nNouveautés de SeleniumLibrary 6.1"
    },
    {
        "name": "Get Selenium Speed",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Gets the delay that is waited after each Selenium command.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>",
        "shortdoc": "Gets the delay that is waited after each Selenium command.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 529,
        "doc_fr": "Obtient le délai attendu après chaque commande Selenium.\n\nLa valeur est renvoyée sous forme de chaîne lisible par l'homme, comme « 1 seconde ».\n\nConsultez la section Selenium Speed ​​ci-dessus pour plus d'informations."
    },
    {
        "name": "Get Selenium Timeout",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Gets the timeout that is used by various keywords.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>",
        "shortdoc": "Gets the timeout that is used by various keywords.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 539,
        "doc_fr": "Obtient le délai d'expiration utilisé par divers mots-clés.\n\nLa valeur est renvoyée sous forme de chaîne lisible par l'homme, comme « 1 seconde ».\n\nVoir la section Délai d'expiration ci-dessus pour plus d'informations."
    },
    {
        "name": "Get Session Id",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the currently active browser session id.</p>\n<p>New in SeleniumLibrary 3.2</p>",
        "shortdoc": "Returns the currently active browser session id.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 409,
        "doc_fr": "Renvoie l'identifiant de session du navigateur actuellement actif.\n\nNouveauté dans SeleniumLibrary 3.2"
    },
    {
        "name": "Get Source",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the entire HTML source of the current page or frame.</p>",
        "shortdoc": "Returns the entire HTML source of the current page or frame.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 417,
        "doc_fr": "Renvoie l'intégralité de la source HTML de la page ou du cadre actuel."
    },
    {
        "name": "Get Table Cell",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "row",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "row: int"
            },
            {
                "name": "column",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "column: int"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns contents of a table cell.</p>\n<p>The table is located using the <code>locator</code> argument and its cell found using <code>row</code> and <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.</p>\n<p>All <code>&lt;th&gt;</code> and <code>&lt;td&gt;</code> elements anywhere in the table are considered to be cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Returns contents of a table cell.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/tableelement.py",
        "lineno": 26,
        "doc_fr": "Renvoie le contenu d'une cellule de tableau.\n\nLe tableau est localisé à l'aide de l'argument `locator` et sa cellule est trouvée à l'aide de\n`row` et `column`. Consultez la section Localisation des éléments pour plus de détails sur la\nsyntaxe du localisateur.\n\nLes index de ligne et de colonne commencent à 1, et les lignes d'en-tête et de pied de page sont\nincluses dans le décompte. Il est possible de faire référence aux lignes et aux colonnes à partir de\nla fin en utilisant des index négatifs de sorte que -1 soit la dernière ligne/colonne, -2 soit l'avant-dernière, et ainsi de suite.\n\nTous les éléments `<th>` et `<td>` n'importe où dans le tableau sont considérés comme des\ncellules.\n\nConsultez La page doit contenir pour une explication sur l'argument `loglevel`."
    },
    {
        "name": "Get Text",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the text value of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Returns the text value of the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 552,
        "doc_fr": "Renvoie la valeur textuelle de l'élément identifié par `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Get Title",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the title of the current page.</p>",
        "shortdoc": "Returns the title of the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 422,
        "doc_fr": "Renvoie le titre de la page actuelle."
    },
    {
        "name": "Get Value",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the value attribute of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Returns the value attribute of the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 543,
        "doc_fr": "Renvoie l'attribut value de l'élément identifié par `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Get Vertical Position",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the vertical position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the top of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Horizontal%20Position\" class=\"name\">Get Horizontal Position</a>.</p>",
        "shortdoc": "Returns the vertical position of the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 570,
        "doc_fr": "Renvoie la position verticale de l'élément identifié par `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nLa position est renvoyée en pixels à partir du haut de la page, sous forme d'entier.\n\nVoir également Obtenir la position horizontale."
    },
    {
        "name": "Get WebElement",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "WebElement",
            "typedoc": null,
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns the first WebElement matching the given <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Returns the first WebElement matching the given ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 32,
        "doc_fr": "Renvoie le premier élément Web correspondant au « locator » donné.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Get WebElements",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "WebElement",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns a list of WebElement objects matching the <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Starting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.</p>",
        "shortdoc": "Returns a list of WebElement objects matching the ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 41,
        "doc_fr": "Renvoie une liste d'objets WebElement correspondant au « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nÀ partir de SeleniumLibrary 3.0, le mot-clé renvoie une liste vide s'il n'y a\naucun élément correspondant. Dans les versions précédentes, le mot-clé échouait dans ce\ncas."
    },
    {
        "name": "Get Window Handles",
        "args": [
            {
                "name": "browser",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "CURRENT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "browser: str = CURRENT"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns all child window handles of the selected browser as a list.</p>\n<p>Can be used as a list of windows to exclude with <span class=\"name\">Select Window</span>.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>\n<p>Prior to SeleniumLibrary 3.0, this keyword was named <span class=\"name\">List Windows</span>.</p>",
        "shortdoc": "Returns all child window handles of the selected browser as a list.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 130,
        "doc_fr": "Renvoie tous les handles de fenêtre enfant du navigateur sélectionné sous forme de liste.\n\nPeut être utilisé comme liste de fenêtres à exclure avec Select Window.\n\nPour savoir comment sélectionner la portée `browser` de ce mot-clé, voir Get Locations.\n\nAvant SeleniumLibrary 3.0, ce mot-clé s'appelait List Windows."
    },
    {
        "name": "Get Window Identifiers",
        "args": [
            {
                "name": "browser",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "CURRENT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "browser: str = CURRENT"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [],
            "union": false
        },
        "doc": "<p>Returns and logs id attributes of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
        "shortdoc": "Returns and logs id attributes of all windows of the selected browser.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 142,
        "doc_fr": "Renvoie et enregistre les attributs d'identification de toutes les fenêtres du navigateur sélectionné.\n\nPour savoir comment sélectionner la portée « browser » de ce mot-clé, voir Obtenir les emplacements."
    },
    {
        "name": "Get Window Names",
        "args": [
            {
                "name": "browser",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "CURRENT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "browser: str = CURRENT"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns and logs names of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
        "shortdoc": "Returns and logs names of all windows of the selected browser.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 150,
        "doc_fr": "Renvoie et enregistre les noms de toutes les fenêtres du navigateur sélectionné.\n\nPour savoir comment sélectionner la portée « browser » de ce mot-clé, voir Obtenir les emplacements."
    },
    {
        "name": "Get Window Position",
        "args": [],
        "returnType": {
            "name": "Tuple",
            "typedoc": "tuple",
            "nested": [
                {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns current window position.</p>\n<p>The position is relative to the top left corner of the screen. Returned values are integers. See also <a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x}</td>\n<td>${y}=</td>\n<td><a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a></td>\n</tr>\n</table>",
        "shortdoc": "Returns current window position.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 261,
        "doc_fr": "Renvoie la position actuelle de la fenêtre.\n\nLa position est relative au coin supérieur gauche de l'écran. Les valeurs renvoyées\nsont des entiers. Voir également Définir la position de la fenêtre.\n\nExemple :\n\n${x} | ${y}= | Obtenir la position de la fenêtre \n---|---|---"
    },
    {
        "name": "Get Window Size",
        "args": [
            {
                "name": "inner",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "inner: bool = False"
            }
        ],
        "returnType": {
            "name": "Tuple",
            "typedoc": "tuple",
            "nested": [
                {
                    "name": "float",
                    "typedoc": "float",
                    "nested": [],
                    "union": false
                },
                {
                    "name": "float",
                    "typedoc": "float",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns current window width and height as integers.</p>\n<p>See also <a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a>.</p>\n<p>If <code>inner</code> parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean arguments. The <code>inner</code> is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td>True</td>\n</tr>\n</table>",
        "shortdoc": "Returns current window width and height as integers.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 195,
        "doc_fr": "Renvoie la largeur et la hauteur actuelles de la fenêtre sous forme d'entiers.\n\nVoir aussi Définir la taille de la fenêtre.\n\nSi le paramètre `inner` est défini sur True, le mot-clé renvoie les propriétés HTML DOM\nwindow.innerWidth et window.innerHeight. Voir Arguments booléens\npour plus de détails sur la manière de définir les arguments booléens. Le paramètre `inner` est nouveau dans\nSeleniumLibrary 4.0.\n\nExemple :\n\n${width} | ${height}= | Obtenir la taille de la fenêtre | \n---|---|---|--- \n${width} | ${height}= | Obtenir la taille de la fenêtre | True"
    },
    {
        "name": "Get Window Titles",
        "args": [
            {
                "name": "browser",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "CURRENT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "browser: str = CURRENT"
            }
        ],
        "returnType": {
            "name": "List",
            "typedoc": "list",
            "nested": [
                {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                }
            ],
            "union": false
        },
        "doc": "<p>Returns and logs titles of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
        "shortdoc": "Returns and logs titles of all windows of the selected browser.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 158,
        "doc_fr": "Renvoie et enregistre les titres de toutes les fenêtres du navigateur sélectionné.\n\nPour savoir comment sélectionner la portée « browser » de ce mot-clé, voir Obtenir les emplacements."
    },
    {
        "name": "Go Back",
        "args": [],
        "returnType": null,
        "doc": "<p>Simulates the user clicking the back button on their browser.</p>",
        "shortdoc": "Simulates the user clicking the back button on their browser.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 513,
        "doc_fr": "Simule l'utilisateur qui clique sur le bouton Retour de son navigateur."
    },
    {
        "name": "Go To",
        "args": [
            {
                "name": "url",
                "type": null,
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "url"
            }
        ],
        "returnType": null,
        "doc": "<p>Navigates the current browser window to the provided <code>url</code>.</p>",
        "shortdoc": "Navigates the current browser window to the provided ``url``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 518,
        "doc_fr": "Navigue dans la fenêtre actuelle du navigateur vers l'URL fournie."
    },
    {
        "name": "Handle Alert",
        "args": [
            {
                "name": "action",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "ACCEPT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "action: str = ACCEPT"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Handles the current alert and returns its message.</p>\n<p>By default, the alert is accepted, but this can be controlled with the <code>action</code> argument that supports the following case-insensitive values:</p>\n<ul>\n<li><code>ACCEPT</code>: Accept the alert i.e. press <code>Ok</code>. Default.</li>\n<li><code>DISMISS</code>: Dismiss the alert i.e. press <code>Cancel</code>.</li>\n<li><code>LEAVE</code>: Leave the alert open.</li>\n</ul>\n<p>The <code>timeout</code> argument specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Handle Alert</td>\n<td></td>\n<td></td>\n<td># Accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>action=DISMISS</td>\n<td></td>\n<td># Dismiss alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>timeout=10 s</td>\n<td></td>\n<td># Use custom timeout and accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>DISMISS</td>\n<td>1 min</td>\n<td># Use custom timeout and dismiss alert.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td></td>\n<td># Accept alert and get its message.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td>LEAVE</td>\n<td># Leave alert open and get its message.</td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Handles the current alert and returns its message.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/alert.py",
        "lineno": 104,
        "doc_fr": "Gère l'alerte en cours et renvoie son message.\n\nPar défaut, l'alerte est acceptée, mais cela peut être contrôlé avec l'argument\n`action` qui prend en charge les valeurs suivantes insensibles à la casse :\n\n* `ACCEPT` : Acceptez l'alerte, c'est-à-dire appuyez sur `Ok`. Par défaut.\n* `DISMISS` : Rejetez l'alerte, c'est-à-dire appuyez sur `Annuler`.\n* `LEAVE` : Laissez l'alerte ouverte.\n\nL'argument `timeout` spécifie le délai d'attente avant que l'alerte apparaisse. S'il n'est pas fourni, le délai d'attente par défaut global est utilisé à la place.\n\nExemples :\n\nHandle Alert | | | # Accepter l'alerte. \n---|---|---|--- \nHandle Alert | action=DISMISS | | # Rejeter l'alerte. \nHandle Alert | timeout=10 s | | # Utiliser un délai d'attente personnalisé et accepter l'alerte. \nHandle Alert | DISMISS | 1 min | # Utiliser un délai d'attente personnalisé et rejeter l'alerte. \n${message} = | Gérer l'alerte | | # Accepter l'alerte et obtenir son message. \n${message} = | Gérer l'alerte | QUITTER | # Laisser l'alerte ouverte et obtenir son message. \n\nNouveau dans SeleniumLibrary 3.0."
    },
    {
        "name": "Input Password",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "password",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "password: str"
            },
            {
                "name": "clear",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "clear: bool = True"
            }
        ],
        "returnType": null,
        "doc": "<p>Types the given password into the text field identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See <a href=\"#Input%20Text\" class=\"name\">Input Text</a> for <code>clear</code> argument details.</p>\n<p>Difference compared to <a href=\"#Input%20Text\" class=\"name\">Input Text</a> is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>password</td>\n</tr>\n</table>\n<p>the password is shown as a normal keyword argument. A way to avoid that is using variables like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>${PASSWORD}</td>\n</tr>\n</table>\n<p>Please notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.</p>\n<p>The <span class=\"name\">clear</span> argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.</p>",
        "shortdoc": "Types the given password into the text field identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 242,
        "doc_fr": "Tape le mot de passe donné dans le champ de texte identifié par `locator`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur. Voir\nTexte d'entrée pour les détails de l'argument `clear`.\n\nLa différence par rapport à Texte d'entrée est que ce mot-clé n'enregistre pas le\nmot de passe donné au niveau INFO. Notez que si vous utilisez le mot-clé comme\n\nMot de passe d'entrée | champ_mot_de_passe | mot_de_passe \n---|---|--- \n\nle mot de passe est affiché comme un argument de mot-clé normal. Une façon d'éviter cela est\nd'utiliser des variables comme\n\nMot de passe d'entrée | champ_mot_de_passe | ${PASSWORD} \n---|---|--- \n\nVeuillez noter que Robot Framework enregistre tous les arguments en utilisant le niveau TRACE\net que les tests ne doivent pas être exécutés en utilisant un niveau inférieur à DEBUG si le mot de passe ne doit\npas être enregistré dans aucun format.\n\nL'argument clear est nouveau dans SeleniumLibrary 4.0. Le masquage de la journalisation des mots de passe dans\nles journaux Selenium est une nouveauté de SeleniumLibrary 4.2."
    },
    {
        "name": "Input Text",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "clear",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "True",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "clear: bool = True"
            }
        ],
        "returnType": null,
        "doc": "<p>Types the given <code>text</code> into the text field identified by <code>locator</code>.</p>\n<p>When <code>clear</code> is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use <a href=\"#Input%20Password\" class=\"name\">Input Password</a> if you do not want the given <code>text</code> to be logged.</p>\n<p>If <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a> is used and the <code>text</code> argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the <code>text</code> string as is to the element. If a file should be transferred to the hub and upload should be performed, please use <a href=\"#Choose%20File\" class=\"name\">Choose File</a> keyword.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See the <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> section how Boolean values are handled.</p>\n<p>Disabling the file upload the Selenium Grid node and the <span class=\"name\">clear</span> argument are new in SeleniumLibrary 4.0</p>",
        "shortdoc": "Types the given ``text`` into the text field identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 272,
        "doc_fr": "Tape le `text` donné dans le champ de texte identifié par `locator`.\n\nLorsque `clear` est vrai, l'élément d'entrée est effacé avant que le texte ne soit saisi\ndans l'élément. Lorsqu'il est faux, le texte précédent n'est pas effacé de l'élément. Utilisez le mot de passe d'entrée si vous ne souhaitez pas que le `text` donné soit enregistré.\n\nSi [Selenium Grid](https://github.com/SeleniumHQ/selenium/wiki/Grid2) est utilisé\net que l'argument `text` pointe vers un fichier dans le système de fichiers, alors ce mot-clé\nempêche Selenium de transférer le fichier vers le hub Selenium Grid. Au lieu de cela,\nce mot-clé enverra la chaîne `text` telle quelle à l'élément. Si un fichier\ndoit être transféré vers le hub et que le téléchargement doit être effectué, veuillez utiliser\nle mot-clé Choisir un fichier.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur. Voir\nla section Arguments booléens sur la gestion des valeurs booléennes.\n\nLa désactivation du téléchargement de fichiers du nœud Selenium Grid et l'argument clear sont\nnouveautés dans SeleniumLibrary 4.0"
    },
    {
        "name": "Input Text Into Alert",
        "args": [
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "action",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "ACCEPT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "action: str = ACCEPT"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Types the given <code>text</code> into an input field in an alert.</p>\n<p>The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Types the given ``text`` into an input field in an alert.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/alert.py",
        "lineno": 34,
        "doc_fr": "Tape le texte donné dans un champ de saisie d'une alerte.\n\nL'alerte est acceptée par défaut, mais ce comportement peut être contrôlé en utilisant\nl'argument `action` de la même manière qu'avec Handle Alert.\n\n`timeout` spécifie le délai d'attente avant que l'alerte n'apparaisse. S'il n'est pas\nindiqué, le délai d'attente global par défaut est utilisé à la place.\n\nNouveau dans SeleniumLibrary 3.0."
    },
    {
        "name": "List Selection Should Be",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*expected: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies selection list <code>locator</code> has <code>expected</code> options selected.</p>\n<p>It is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.</p>\n<p>If no expected options are given, validates that the list has no selections. A more explicit alternative is using <a href=\"#List%20Should%20Have%20No%20Selections\" class=\"name\">List Should Have No Selections</a>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>gender</td>\n<td>Female</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>interests</td>\n<td>Test Automation</td>\n<td>Python</td>\n</tr>\n</table>",
        "shortdoc": "Verifies selection list ``locator`` has ``expected`` options selected.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 104,
        "doc_fr": "Vérifie que la liste de sélection `locator` a sélectionné les options `attendues`.\n\nIl est possible de donner les options attendues à la fois sous forme d'étiquettes visibles et de valeurs.\nÀ partir de SeleniumLibrary 3.0, il n'est pas possible de mélanger les étiquettes et les valeurs.\nL'ordre des options sélectionnées n'est pas validé.\n\nSi aucune option attendue n'est donnée, valide que la liste ne contient aucune sélection. Une\nalternative plus explicite consiste à utiliser la liste ne doit avoir aucune sélection.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nExemples :\n\nLa sélection de liste doit être | genre | Féminin | \n--|---|---|--- \nLa ​​sélection de liste doit être | intérêts | Automatisation des tests | Python"
    },
    {
        "name": "List Should Have No Selections",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies selection list <code>locator</code> has no options selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies selection list ``locator`` has no options selected.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 141,
        "doc_fr": "Vérifie que la liste de sélection « locator » ne contient aucune option sélectionnée.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Location Should Be",
        "args": [
            {
                "name": "url",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "url: str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the current URL is exactly <code>url</code>.</p>\n<p>The <code>url</code> argument contains the exact url that should exist in browser.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
        "shortdoc": "Verifies that the current URL is exactly ``url``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 432,
        "doc_fr": "Vérifie que l'URL actuelle est exactement « url ».\n\nL'argument « url » contient l'URL exacte qui devrait exister dans le navigateur.\n\nL'argument « message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument « message » est nouveau dans SeleniumLibrary 3.2.0."
    },
    {
        "name": "Location Should Contain",
        "args": [
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
        "shortdoc": "Verifies that the current URL contains ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 450,
        "doc_fr": "Vérifie que l'URL actuelle contient « expected ».\n\nL'argument « expected » contient la valeur attendue dans l'URL.\n\nL'argument « message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument « message » est nouveau dans SeleniumLibrary 3.2.0."
    },
    {
        "name": "Log Location",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Logs and returns the current browser window URL.</p>",
        "shortdoc": "Logs and returns the current browser window URL.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 471,
        "doc_fr": "Enregistre et renvoie l'URL de la fenêtre actuelle du navigateur."
    },
    {
        "name": "Log Source",
        "args": [
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "INFO",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = INFO"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Logs and returns the HTML source of the current page or frame.</p>\n<p>The <code>loglevel</code> argument defines the used log level. Valid log levels are <code>WARN</code>, <code>INFO</code> (default), <code>DEBUG</code>, <code>TRACE</code> and <code>NONE</code> (no logging).</p>",
        "shortdoc": "Logs and returns the HTML source of the current page or frame.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 478,
        "doc_fr": "Enregistre et renvoie la source HTML de la page ou du cadre actuel.\n\nL'argument `loglevel` définit le niveau de journalisation utilisé. Les niveaux de journalisation valides sont\n`WARN`, `INFO` (par défaut), `DEBUG`, `TRACE` et `NONE` (pas de journalisation)."
    },
    {
        "name": "Log Title",
        "args": [],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Logs and returns the title of the current page.</p>",
        "shortdoc": "Logs and returns the title of the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 490,
        "doc_fr": "Enregistre et renvoie le titre de la page actuelle."
    },
    {
        "name": "Maximize Browser Window",
        "args": [],
        "returnType": null,
        "doc": "<p>Maximizes current browser window.</p>",
        "shortdoc": "Maximizes current browser window.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 185,
        "doc_fr": "Maximise la fenêtre actuelle du navigateur."
    },
    {
        "name": "Minimize Browser Window",
        "args": [],
        "returnType": null,
        "doc": "<p>Minimizes current browser window.</p>",
        "shortdoc": "Minimizes current browser window.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 190,
        "doc_fr": "Réduit la fenêtre actuelle du navigateur."
    },
    {
        "name": "Mouse Down",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates pressing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element is pressed without releasing the mouse button.</p>\n<p>See also the more specific keywords <a href=\"#Mouse%20Down%20On%20Image\" class=\"name\">Mouse Down On Image</a> and <a href=\"#Mouse%20Down%20On%20Link\" class=\"name\">Mouse Down On Link</a>.</p>",
        "shortdoc": "Simulates pressing the left mouse button on the element ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 818,
        "doc_fr": "Simule l'appui sur le bouton gauche de la souris sur l'élément « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'élément est appuyé sans relâcher le bouton de la souris.\n\nVoir également les mots-clés plus spécifiques Mouse Down On Image et Mouse Down On\nLink."
    },
    {
        "name": "Mouse Down On Image",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates a mouse down event on an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>",
        "shortdoc": "Simulates a mouse down event on an image identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1085,
        "doc_fr": "Simule un événement de clic de souris sur une image identifiée par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les images sont recherchées à l'aide de « id », « name »,\n« src » et « alt »."
    },
    {
        "name": "Mouse Down On Link",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates a mouse down event on a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>",
        "shortdoc": "Simulates a mouse down event on a link identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1037,
        "doc_fr": "Simule un événement de clic de souris sur un lien identifié par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les liens sont recherchés à l'aide de « id », « name »,\n« href » et du texte du lien."
    },
    {
        "name": "Mouse Out",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates moving the mouse away from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Simulates moving the mouse away from the element ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 835,
        "doc_fr": "Simule le déplacement de la souris en dehors de l'élément « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Mouse Over",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates hovering the mouse over the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Simulates hovering the mouse over the element ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 852,
        "doc_fr": "Simule le survol de la souris sur l'élément « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Mouse Up",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates releasing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Simulates releasing the left mouse button on the element ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 864,
        "doc_fr": "Simule le relâchement du bouton gauche de la souris sur l'élément « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Open Browser",
        "args": [
            {
                "name": "url",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "url: str | None = None"
            },
            {
                "name": "browser",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "firefox",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "browser: str = firefox"
            },
            {
                "name": "alias",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "alias: str | None = None"
            },
            {
                "name": "remote_url",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "remote_url: bool | str = False"
            },
            {
                "name": "desired_capabilities",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "dict",
                            "typedoc": "dictionary",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "desired_capabilities: dict | None | str = None"
            },
            {
                "name": "ff_profile_dir",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "FirefoxProfile",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "ff_profile_dir: FirefoxProfile | str | None = None"
            },
            {
                "name": "options",
                "type": {
                    "name": "Any",
                    "typedoc": "Any",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "options: Any = None"
            },
            {
                "name": "service_log_path",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "service_log_path: str | None = None"
            },
            {
                "name": "executable_path",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "executable_path: str | None = None"
            },
            {
                "name": "service",
                "type": {
                    "name": "Any",
                    "typedoc": "Any",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "service: Any = None"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Opens a new browser instance to the optional <code>url</code>.</p>\n<p>The <code>browser</code> argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.</p>\n<table border=\"1\">\n<tr>\n<th>Browser</th>\n<th>Name(s)</th>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>firefox, ff</td>\n</tr>\n<tr>\n<td>Google Chrome</td>\n<td>googlechrome, chrome, gc</td>\n</tr>\n<tr>\n<td>Headless Firefox</td>\n<td>headlessfirefox</td>\n</tr>\n<tr>\n<td>Headless Chrome</td>\n<td>headlesschrome</td>\n</tr>\n<tr>\n<td>Internet Explorer</td>\n<td>internetexplorer, ie</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>edge</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>safari</td>\n</tr>\n</table>\n<p>To be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the <a href=\"https://github.com/robotframework/SeleniumLibrary#browser-drivers\">project documentation</a> for more details.</p>\n<p>After opening the browser, it is possible to use optional <code>url</code> to navigate the browser to the desired address.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>alias=Firefox</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Edge</td>\n<td>remote_url=http://127.0.0.1:4444/wd/hub</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>about:blank</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>browser=Chrome</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Optional <code>alias</code> is an alias given for this browser instance and it can be used for switching between browsers. When same <code>alias</code> is given with two <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The <code>alias</code> definition overrules <code>browser</code> definition. When same <code>alias</code> is used but a different <code>browser</code> is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> is called. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>Alias examples:</p>\n<table border=\"1\">\n<tr>\n<td>${1_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Opens new browser because alias is new.</td>\n</tr>\n<tr>\n<td>${2_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td></td>\n<td># Opens new browser because alias is not defined.</td>\n</tr>\n<tr>\n<td>${3_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>${4_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=${1_index}</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${3_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${4_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${2_index}</td>\n<td>${2}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Optional <code>remote_url</code> is the URL for a <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a>.</p>\n<p>Optional <code>desired_capabilities</code> is deprecated and will be removed in the next release. Capabilities of each individual browser is now done through options or services. Please refer to those arguments for configuring specific browsers.</p>\n<p>Optional <code>ff_profile_dir</code> is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. The <code>ff_profile_dir</code> can also be an instance of the <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html\">selenium.webdriver.FirefoxProfile</a> . As a third option, it is possible to use <span class=\"name\">FirefoxProfile</span> methods and attributes to define the profile using methods and attributes in the same way as with <code>options</code> argument. Example: It is possible to use FirefoxProfile <span class=\"name\">set_preference</span> to define different profile settings. See <code>options</code> argument documentation in below how to handle backslash escaping.</p>\n<p>Example for FirefoxProfile</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=/path/to/profile</td>\n<td># Using profile from disk.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=${FirefoxProfile_instance}</td>\n<td># Using instance of FirefoxProfile.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\")</td>\n<td># Defining profile using FirefoxProfile mehtods.</td>\n</tr>\n</table>\n<p>Optional <code>options</code> argument allows defining browser specific Selenium options. Example for Chrome, the <code>options</code> argument allows defining the following <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">methods and attributes</a> and for Firefox these <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options\">methods and attributes</a> are available. Selenium options are also supported, when <code>remote_url</code> argument is used.</p>\n<p>The SeleniumLibrary <code>options</code> argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.</p>\n<p>The string format uses a Python like syntax to define Selenium options methods or attributes.</p>\n<p>Example when using <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">Chrome options</a> method:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\")</td>\n<td># Sting format.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\")</td>\n<td># Start Chomium-based application.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=r\"C:\\\\path\\\\to\\\\binary\"</td>\n<td># Windows OS path escaping.</td>\n</tr>\n</table>\n<p><code>options</code> argument also supports receiving the Selenium options as Python class instance.</p>\n<p>See the <span class=\"name\">Browser and Driver options</span> section for more details on how to use the either the string format or Python object syntax with the <code>options</code> argument.</p>\n<p>Optional <code>service_log_path</code> will be deprecated in the next release. Please use the browser specific <code>service</code> attribute instead. The <code>service_log_path</code> argument defines the name of the file where to write the browser driver logs. If the <code>service_log_path</code>  argument contains a marker <code>{index}</code>, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>Optional <code>executable_path</code>  will be deprecated in the next release. Please use the <span class=\"name\">executable_path</span> and, if needed, <span class=\"name\">port</span> attribute on the <code>service</code> argument instead. The <code>executable_path</code> argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the <a href=\"https://en.wikipedia.org/wiki/PATH_(variable)\">$PATH</a>.</p>\n<p>Optional <code>service</code> argument allows for managing the local drivers as well as setting some browser specific settings like logging. Service classes are not supported when <code>remote_url</code> argument is used. See the <span class=\"name\">Browser and Driver options</span> section for more details on how to use the <code>service</code> argument.</p>\n<p>If the provided configuration options are not enough, it is possible to use <a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a> to customize browser initialization even more.</p>\n<p>The <code>service</code> argument is new in SeleniumLibrary 6.4.</p>",
        "shortdoc": "Opens a new browser instance to the optional ``url``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 60,
        "doc_fr": ""
    },
    {
        "name": "Open Context Menu",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Opens the context menu on the element identified by <code>locator</code>.</p>",
        "shortdoc": "Opens the context menu on the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 875,
        "doc_fr": "Ouvre le menu contextuel sur l'élément identifié par `locator`."
    },
    {
        "name": "Page Should Contain",
        "args": [
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that current page contains <code>text</code>.</p>\n<p>If this keyword fails, it automatically logs the page source using the log level specified with the optional <code>loglevel</code> argument. Valid log levels are <code>TRACE</code> (default), <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, and <code>NONE</code>. If the log level is <code>NONE</code> or below the current active log level the source will not be logged.</p>\n<p>!! WARNING !! If you have an iframe selected, <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> will reset the frame reference back to the main frame. This is due to the fact that is searches for the <code>text</code> in all frames. To locate an element in an iframe after calling <span class=\"name\">Page Should Contian</span> one needs to (re)select the frame.</p>",
        "shortdoc": "Verifies that current page contains ``text``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 127,
        "doc_fr": "Vérifie que la page actuelle contient du « texte ».\n\nSi ce mot-clé échoue, il enregistre automatiquement la source de la page en utilisant le niveau de journalisation\nspécifié avec l'argument facultatif « loglevel ». Les niveaux de journalisation\nvalides sont « TRACE » (par défaut), « DEBUG », « INFO », « WARN » et « NONE ». Si le niveau de journalisation est\n« NONE » ou inférieur au niveau de journalisation actif actuel, la source ne sera pas enregistrée.\n\n!! AVERTISSEMENT !! Si vous avez sélectionné un iframe, Page Should Contain\nréinitialise la référence du cadre au cadre principal. Cela est dû au fait qu'il\nrecherche le « texte » dans tous les cadres. Pour localiser un élément dans un iframe après\navoir appelé Page Should Contian, il faut (re)sélectionner le cadre."
    },
    {
        "name": "Page Should Contain Button",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
        "shortdoc": "Verifies button ``locator`` is found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 430,
        "doc_fr": "Vérifie que le bouton « locator » est trouvé à partir de la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments « message » et\n« loglevel ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les boutons sont recherchés à l'aide de « id », « name » et\n« value »."
    },
    {
        "name": "Page Should Contain Checkbox",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies checkbox <code>locator</code> is found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies checkbox ``locator`` is found from the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 70,
        "doc_fr": "Vérifie que la case à cocher « locator » est trouvée dans la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments « message » et\n« loglevel ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Page Should Contain Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "List",
                            "typedoc": "list",
                            "nested": [
                                {
                                    "name": "Union",
                                    "typedoc": null,
                                    "nested": [
                                        {
                                            "name": "WebElement",
                                            "typedoc": null,
                                            "nested": [],
                                            "union": false
                                        },
                                        {
                                            "name": "str",
                                            "typedoc": "string",
                                            "nested": [],
                                            "union": false
                                        }
                                    ],
                                    "union": true
                                }
                            ],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str | List[WebElement | str]"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            },
            {
                "name": "limit",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "int",
                            "typedoc": "integer",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "limit: int | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element <code>locator</code> is found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <code>None</code> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Examples assumes that locator matches to two elements.</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=1</td>\n<td># Keyword fails.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=2</td>\n<td># Keyword passes.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=none</td>\n<td># None is considered one or more.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n</table>\n<p>The <code>limit</code> argument is new in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Verifies that element ``locator`` is found on the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 150,
        "doc_fr": "Vérifie que l'élément `locator` est trouvé sur la page actuelle.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nL'argument `message` peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument `limit` peut être utilisé pour définir le nombre d'éléments que la page\ndoit contenir. Lorsque `limit` est `None` (par défaut), la page peut contenir un ou plusieurs\néléments. Lorsque limit est un nombre, la page doit contenir le même nombre d'éléments.\n\nVoir La page doit contenir pour une explication sur l'argument `loglevel`.\n\nLes exemples supposent que le localisateur correspond à deux éléments.\n\nLa page doit contenir l'élément | div_name | limit=1 | # Le mot-clé échoue. \n---|---|---|--- \nLa ​​page doit contenir l'élément | div_name | limit=2 | # Le mot-clé passe. \nLa page doit contenir l'élément | div_name | limit=none | # Aucun est considéré comme un ou plusieurs.\nLa page doit contenir l'élément | div_name | | # Identique à ci-dessus. \n\nL'argument `limit` est nouveau dans SeleniumLibrary 3.0."
    },
    {
        "name": "Page Should Contain Image",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies image identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
        "shortdoc": "Verifies image identified by ``locator`` is found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1097,
        "doc_fr": "Vérifie que l'image identifiée par `locator` est trouvée à partir de la page actuelle.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les images sont recherchées à l'aide de `id`, `name`,\n`src` et `alt`.\n\nVoir La page doit contenir un élément pour une explication sur les arguments `message` et\n`loglevel`."
    },
    {
        "name": "Page Should Contain Link",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies link identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
        "shortdoc": "Verifies link identified by ``locator`` is found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1049,
        "doc_fr": "Vérifie que le lien identifié par « locator » est trouvé à partir de la page actuelle.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les liens sont recherchés à l'aide de « id », « name »,\n« href » et du texte du lien.\n\nVoir La page doit contenir un élément pour une explication sur les arguments « message » et\n« loglevel »."
    },
    {
        "name": "Page Should Contain List",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies selection list <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies selection list ``locator`` is found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 159,
        "doc_fr": "Vérifie que la liste de sélection `locator` est trouvée à partir de la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments `message` et\n`loglevel`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Page Should Contain Radio Button",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies radio button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
        "shortdoc": "Verifies radio button ``locator`` is found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 132,
        "doc_fr": "Vérifie que le bouton radio `locator` est trouvé à partir de la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments `message` et\n`loglevel`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les boutons radio sont recherchés à l'aide de `id`,\n`name` et `value`."
    },
    {
        "name": "Page Should Contain Textfield",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies text field <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies text field ``locator`` is found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 300,
        "doc_fr": "Vérifie que le champ de texte « locator » est trouvé à partir de la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments « message » et\n« loglevel ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Page Should Not Contain",
        "args": [
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies the current page does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Verifies the current page does not contain ``text``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 198,
        "doc_fr": "Vérifie que la page actuelle ne contient pas de « texte ».\n\nVoir La page doit contenir pour une explication sur l'argument « loglevel »."
    },
    {
        "name": "Page Should Not Contain Button",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
        "shortdoc": "Verifies button ``locator`` is not found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 451,
        "doc_fr": "Vérifie que le bouton « locator » n'est pas trouvé sur la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments « message » et\n« loglevel ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les boutons sont recherchés à l'aide de « id », « name » et\n« value »."
    },
    {
        "name": "Page Should Not Contain Checkbox",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies checkbox <code>locator</code> is not found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies checkbox ``locator`` is not found from the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 87,
        "doc_fr": "Vérifie que la case à cocher « locator » n'est pas trouvée dans la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments « message » et\n« loglevel ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Page Should Not Contain Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that element <code>locator</code> is not found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
        "shortdoc": "Verifies that element ``locator`` is not found on the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 210,
        "doc_fr": "Vérifie que l'élément « locator » n'est pas trouvé sur la page actuelle.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nVoir La page doit contenir pour une explication sur les arguments « message » et « loglevel »."
    },
    {
        "name": "Page Should Not Contain Image",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies image identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
        "shortdoc": "Verifies image identified by ``locator`` is not found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1115,
        "doc_fr": "Vérifie que l'image identifiée par `locator` n'est pas trouvée sur la page actuelle.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les images sont recherchées à l'aide de `id`, `name`,\n`src` et `alt`.\n\nVoir La page doit contenir un élément pour une explication sur les arguments `message` et\n`loglevel`."
    },
    {
        "name": "Page Should Not Contain Link",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies link identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
        "shortdoc": "Verifies link identified by ``locator`` is not found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1067,
        "doc_fr": "Vérifie que le lien identifié par « locator » n'est pas trouvé sur la page actuelle.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les liens sont recherchés à l'aide de « id », « name »,\n« href » et du texte du lien.\n\nVoir La page doit contenir un élément pour une explication sur les arguments « message » et\n« loglevel »."
    },
    {
        "name": "Page Should Not Contain List",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies selection list <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies selection list ``locator`` is not found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 176,
        "doc_fr": "Vérifie que la liste de sélection `locator` n'est pas trouvée dans la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments `message` et\n`loglevel`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Page Should Not Contain Radio Button",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies radio button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
        "shortdoc": "Verifies radio button ``locator`` is not found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 150,
        "doc_fr": "Vérifie que le bouton radio `locator` n'est pas trouvé sur la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments `message` et\n`loglevel`.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\nLorsque vous utilisez la stratégie de localisation par défaut, les boutons radio sont recherchés à l'aide de `id`,\n`name` et `value`."
    },
    {
        "name": "Page Should Not Contain Textfield",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies text field <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies text field ``locator`` is not found from current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 317,
        "doc_fr": "Vérifie que le champ de texte « locator » n'est pas trouvé sur la page actuelle.\n\nVoir La page doit contenir un élément pour une explication sur les arguments « message » et\n« loglevel ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Press Key",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "key",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "key: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates user pressing key on element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>key</code> is either a single character, a string, or a numerical ASCII code of the key lead by '\\'.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Press%20Key\" class=\"name\">Press Key</a></td>\n<td>text_field</td>\n<td>q</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Key\" class=\"name\">Press Key</a></td>\n<td>text_field</td>\n<td>abcde</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Key\" class=\"name\">Press Key</a></td>\n<td>login_button</td>\n<td>\\13</td>\n<td># ASCII code for enter key</td>\n</tr>\n</table>\n<p><a href=\"#Press%20Key\" class=\"name\">Press Key</a> and <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> differ in the methods to simulate key presses. <a href=\"#Press%20Key\" class=\"name\">Press Key</a> uses the WebDriver <span class=\"name\">SEND_KEYS_TO_ELEMENT</span> command using the selenium send_keys method. Although one is not recommended over the other if <a href=\"#Press%20Key\" class=\"name\">Press Key</a> does not work we recommend trying <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a>. send_</p>",
        "shortdoc": "Simulates user pressing key on element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 907,
        "doc_fr": "Simule l'utilisateur qui appuie sur une touche sur un élément identifié par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\n« key » est soit un caractère unique, une chaîne ou un code ASCII numérique de la\ntouche précédé de « \\ ».\n\nExemples :\n\nPress Key | text_field | q | \n---|---|---|--- \nPress Key | text_field | abcde | \nPress Key | login_button | \\13 | # Code ASCII pour la touche Entrée \n\nPress Key et Press Keys diffèrent dans les méthodes de simulation des appuis sur les touches. Press Key utilise la commande WebDriver SEND_KEYS_TO_ELEMENT à l'aide de la méthode sélénium\nsend_keys. Bien que l'un ne soit pas recommandé par rapport à l'autre si Press Key\nne fonctionne pas, nous vous recommandons d'essayer Press Keys. send_"
    },
    {
        "name": "Press Keys",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "locator: WebElement | None | str = None"
            },
            {
                "name": "keys",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*keys: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates the user pressing key(s) to an element or on the active browser.</p>\n<p>If <code>locator</code> evaluates as false, see <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details, then the <code>keys</code> are sent to the currently active browser. Otherwise element is searched and <code>keys</code> are send to the element identified by the <code>locator</code>. In later case, keyword fails if element is not found. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>keys</code> arguments can contain one or many strings, but it can not be empty. <code>keys</code> can also be a combination of <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\">Selenium Keys</a> and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the <span class=\"name\">+</span> character, like in <span class=\"name\">CONTROL+c</span>. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string <span class=\"name\">AALTO</span> and <span class=\"name\">ALT</span> not parsed inside of the string. But <span class=\"name\">A+ALT+O</span> would found Selenium ALT key from the <code>keys</code> argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`.</p>\n<p>If Selenium Keys are detected in the <code>keys</code> argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with <span class=\"name\">+</span> character, example <span class=\"name\">E+N+D</span>.</p>\n<p><span class=\"name\">CTRL</span> is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL\">Selenium CONTROL</a> and ESC is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE\">Selenium ESCAPE</a></p>\n<p>New in SeleniumLibrary 3.3</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>AAAAA</td>\n<td></td>\n<td># Sends string \"AAAAA\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>None</td>\n<td>BBBBB</td>\n<td></td>\n<td># Sends string \"BBBBB\" to currently active browser.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>E+N+D</td>\n<td></td>\n<td># Sends string \"END\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX</td>\n<td>YY</td>\n<td># Sends strings \"XXX\" and \"YY\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX+YY</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT+ARROW_DOWN</td>\n<td></td>\n<td># Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT</td>\n<td>ARROW_DOWN</td>\n<td># Pressing \"ALT\" key and then pressing ARROW_DOWN.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>CTRL+c</td>\n<td></td>\n<td># Pressing CTRL key down, sends string \"c\" and then releases CTRL key.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>button</td>\n<td>RETURN</td>\n<td></td>\n<td># Pressing \"ENTER\" key to element.</td>\n</tr>\n</table>\n<p><a href=\"#Press%20Key\" class=\"name\">Press Key</a> and <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> differ in the methods to simulate key presses. <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> uses the Selenium/WebDriver Actions. <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> also has a more extensive syntax for describing keys, key combinations, and key actions. Although one is not recommended over the other if <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> does not work we recommend trying <a href=\"#Press%20Key\" class=\"name\">Press Key</a>.</p>",
        "shortdoc": "Simulates the user pressing key(s) to an element or on the active browser.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 934,
        "doc_fr": "Simule l'utilisateur qui appuie sur une ou plusieurs touches d'un élément ou du navigateur actif.\n\nSi `locator` est évalué comme faux, consultez les arguments booléens pour plus de détails,\nalors les `keys` sont envoyées au navigateur actuellement actif. Sinon, l'élément est\nrecherché et les `keys` sont envoyées à l'élément identifié par le `locator`. Dans\nce cas, le mot-clé échoue si l'élément n'est pas trouvé. Consultez la section Localisation des éléments\npour plus de détails sur la syntaxe du localisateur.\n\nLes arguments `keys` peuvent contenir une ou plusieurs chaînes, mais ils ne peuvent pas être vides.\n`keys` peut également être une combinaison de [Selenium\nKeys](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html)\net de chaînes ou une seule clé Selenium. Si la touche Selenium est combinée avec\ndes chaînes, la touche Selenium et les chaînes doivent être séparées par le caractère +, comme\ndans CONTROL+c. Les touches Selenium sont sensibles à l'espace et à la casse et les touches Selenium ne sont\npas analysées à l'intérieur de la chaîne. Par exemple, AALTO enverrait la chaîne AALTO et\nALT non analysée à l'intérieur de la chaîne. Mais A+ALT+O trouverait la touche Selenium ALT\nà partir de l'argument `keys`. Il est également possible d'appuyer sur plusieurs touches Selenium\nen même temps, par exemple 'ALT+ARROW_DOWN`.\n\nSi des touches Selenium sont détectées dans l'argument `keys`, le mot-clé appuiera sur la\ntouche Selenium, enverra les chaînes puis relâchera la touche Selenium. Si\nle mot-clé doit envoyer une clé Selenium sous forme de chaîne, chaque caractère doit être\nséparé par le caractère +, par exemple E+N+D.\n\nCTRL est un alias pour [Selenium\nCONTROL](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL)\net ESC est un alias pour [Selenium\nESCAPE](https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE)\n\nNouveauté dans SeleniumLibrary 3.3\n\nExemples :\n\nAppuyez sur les touches | champ_texte | AAAAA | | # Envoie la chaîne « AAAAA » à l'élément. \n---|---|---|---|--- \nAppuyez sur les touches | Aucun | BBBBB | | # Envoie la chaîne \"BBBBB\" au navigateur actuellement actif. \nAppuyez sur les touches | champ_texte | E+N+D | | # Envoie la chaîne \"END\" à l'élément. \nAppuyez sur les touches | champ_texte | XXX | YY | # Envoie les chaînes \"XXX\" et \"YY\" à l'élément. \nAppuyez sur les touches | champ_texte | XXX+YY | | # Comme ci-dessus. \nAppuyez sur les touches | champ_texte | ALT+FLÈCHE_BAS | | # Appuyez sur la touche \"ALT\" enfoncée, puis appuyez sur la FLÈCHE_BAS puis relâchez les deux touches. \nAppuyez sur les touches | champ_texte | ALT | FLÈCHE_BAS | # Appuyez sur la touche \"ALT\" puis appuyez sur la FLÈCHE_BAS. \nAppuyez sur les touches | champ_texte | CTRL+c | | # Appuyez sur la touche CTRL enfoncée, envoyez la chaîne \"c\" puis relâchez la touche CTRL. \nAppuyez sur les touches | bouton | RETOUR | | # Appuyez sur la touche \"ENTRÉE\" à l'élément. \n\nPress Key et Press Keys diffèrent dans les méthodes de simulation des appuis sur les touches. Press Keys utilise les actions Selenium/WebDriver. Press Keys dispose également d'une syntaxe plus\nétendue pour décrire les touches, les combinaisons de touches et les actions des touches. Bien que l'une ne soit\npas recommandée par rapport à l'autre, si Press Keys ne fonctionne pas, nous vous recommandons d'essayer\nPress Key."
    },
    {
        "name": "Print Page As Pdf",
        "args": [
            {
                "name": "filename",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "selenium-page-{index}.pdf",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "filename: str = selenium-page-{index}.pdf"
            },
            {
                "name": "background",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "background: bool | None = None"
            },
            {
                "name": "margin_bottom",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "float",
                            "typedoc": "float",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "margin_bottom: float | None = None"
            },
            {
                "name": "margin_left",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "float",
                            "typedoc": "float",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "margin_left: float | None = None"
            },
            {
                "name": "margin_right",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "float",
                            "typedoc": "float",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "margin_right: float | None = None"
            },
            {
                "name": "margin_top",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "float",
                            "typedoc": "float",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "margin_top: float | None = None"
            },
            {
                "name": "orientation",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "orientation: str | None = None"
            },
            {
                "name": "page_height",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "float",
                            "typedoc": "float",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "page_height: float | None = None"
            },
            {
                "name": "page_ranges",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "list",
                            "typedoc": "list",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "page_ranges: list | None = None"
            },
            {
                "name": "page_width",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "float",
                            "typedoc": "float",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "page_width: float | None = None"
            },
            {
                "name": "scale",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "float",
                            "typedoc": "float",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "scale: float | None = None"
            },
            {
                "name": "shrink_to_fit",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "bool",
                            "typedoc": "boolean",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "shrink_to_fit: bool | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Print the current page as a PDF</p>\n<p><code>page_ranges</code> defaults to <span class=\"name\">['-']</span> or \"all\" pages. <code>page_ranges</code> takes a list of strings indicating the ranges.</p>\n<p>The page size defaults to 21.59 for <code>page_width</code> and 27.94 for <code>page_height</code>. This is the equivalent size of US-Letter. The assumed units on these parameters is centimeters.</p>\n<p>The default margin for top, left, bottom, right is <span class=\"name\">1</span>. The assumed units on these parameters is centimeters.</p>\n<p>The default <code>orientation</code> is <span class=\"name\">portrait</span>. <code>orientation</code> can be either <span class=\"name\">portrait</span> or <span class=\"name\">landscape</span>.</p>\n<p>The default <code>scale</code> is <span class=\"name\">1</span>. <code>scale</code> must be greater than or equal to <span class=\"name\">0.1</span> and less than or equal to <span class=\"name\">2</span>.</p>\n<p><code>background</code> and <code>scale_to_fit</code> can be either <span class=\"name\">${True}</span> or <span class=\"name\">${False}</span>..</p>\n<p>If all print options are None then a pdf will fail to print silently.</p>",
        "shortdoc": "Print the current page as a PDF",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/screenshot.py",
        "lineno": 243,
        "doc_fr": "Imprimez la page actuelle au format PDF\n\n`page_ranges` par défaut est ['-'] ou \"toutes\" les pages. `page_ranges` prend une liste de\nchaînes indiquant les plages.\n\nLa taille de page par défaut est de 21,59 pour `page_width` et de 27,94 pour `page_height`.\nIl s'agit de la taille équivalente à celle d'un format US-Letter. Les unités supposées sur ces\nparamètres sont les centimètres.\n\nLa marge par défaut pour le haut, la gauche, le bas et la droite est de 1. Les unités supposées sur\nces paramètres sont les centimètres.\n\nL'`orientation` par défaut est portrait. `orientation` peut être portrait ou\npaysage.\n\nLa valeur par défaut de `scale` est 1. `scale` doit être supérieure ou égale à 0,1 et\ninférieure ou égale à 2.\n\n`background` et `scale_to_fit` peuvent être soit ${True} soit ${False}..\n\nSi toutes les options d'impression sont None, un PDF ne pourra pas s'imprimer en mode silencieux."
    },
    {
        "name": "Radio Button Should Be Set To",
        "args": [
            {
                "name": "group_name",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "group_name: str"
            },
            {
                "name": "value",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies radio button group <code>group_name</code> is set to <code>value</code>.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
        "shortdoc": "Verifies radio button group ``group_name`` is set to ``value``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 168,
        "doc_fr": "Vérifie que le groupe de boutons radio `group_name` est défini sur `value`.\n\n`group_name` est le `name` du groupe de boutons radio."
    },
    {
        "name": "Radio Button Should Not Be Selected",
        "args": [
            {
                "name": "group_name",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "group_name: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies radio button group <code>group_name</code> has no selection.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
        "shortdoc": "Verifies radio button group ``group_name`` has no selection.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 183,
        "doc_fr": "Vérifie que le groupe de boutons radio `group_name` n'a pas de sélection.\n\n`group_name` est le `name` du groupe de boutons radio."
    },
    {
        "name": "Register Keyword To Run On Failure",
        "args": [
            {
                "name": "keyword",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "keyword: str | None"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Sets the keyword to execute, when a SeleniumLibrary keyword fails.</p>\n<p><code>keyword</code> is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.</p>\n<p>The initial keyword to use is set when <a href=\"#Importing\" class=\"name\">importing</a> the library, and the keyword that is used by default is <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a>. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.</p>\n<p>It is possible to use string <code>NOTHING</code> or <code>NONE</code>, case-insensitively, as well as Python <code>None</code> to disable this feature altogether.</p>\n<p>This keyword returns the name of the previously registered failure keyword or Python <code>None</code> if this functionality was previously disabled. The return value can be always used to restore the original value later.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>Log Source</td>\n<td></td>\n</tr>\n<tr>\n<td>${previous kw}=</td>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>NONE</td>\n</tr>\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>${previous kw}</td>\n<td></td>\n</tr>\n</table>\n<p>Changes in SeleniumLibrary 3.0:</p>\n<ul>\n<li>Possible to use string <code>NONE</code> or Python <code>None</code> to disable the functionality.</li>\n<li>Return Python <code>None</code> when the functionality was disabled earlier. In previous versions special value <code>No Keyword</code> was returned and it could not be used to restore the original state.</li>\n</ul>",
        "shortdoc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/runonfailure.py",
        "lineno": 23,
        "doc_fr": "Définit le mot-clé à exécuter lorsqu'un mot-clé de la bibliothèque Selenium échoue.\n\n`keyword` est le nom d'un mot-clé qui sera exécuté si un mot-clé de la bibliothèque Selenium\néchoue. Il est possible d'utiliser n'importe quel mot-clé disponible, y compris les mots-clés de l'utilisateur\nou les mots-clés d'autres bibliothèques, mais le mot-clé ne doit prendre aucun\nargument.\n\nLe mot-clé initial à utiliser est défini lors de l'importation de la bibliothèque, et le mot-clé\nutilisé par défaut est Capture Page Screenshot. Prendre une capture d'écran lorsque\nquelque chose a échoué est une fonctionnalité très utile, mais notez que cela peut ralentir\nl'exécution.\n\nIl est possible d'utiliser la chaîne `NOTHING` ou `NONE`, sans tenir compte de la casse, ainsi\nque Python `None` pour désactiver complètement cette fonctionnalité.\n\nCe mot-clé renvoie le nom du mot-clé d'échec précédemment enregistré ou\nPython `None` si cette fonctionnalité a été précédemment désactivée. La valeur de retour\npeut toujours être utilisée pour restaurer la valeur d'origine ultérieurement.\n\nExemple :\n\nEnregistrer le mot-clé à exécuter en cas d'échec | Source du journal | \n---|---|--- \n${previous kw}= | Enregistrer le mot-clé à exécuter en cas d'échec | NONE \nEnregistrer le mot-clé à exécuter en cas d'échec | ${previous kw} | \n\nModifications dans SeleniumLibrary 3.0 :\n\n* Possibilité d'utiliser la chaîne `NONE` ou Python `None` pour désactiver la fonctionnalité.\n* Renvoyer Python `None` lorsque la fonctionnalité a été désactivée précédemment. Dans les versions précédentes, la valeur spéciale `No Keyword` était renvoyée et elle ne pouvait pas être utilisée pour restaurer l'état d'origine."
    },
    {
        "name": "Reload Page",
        "args": [],
        "returnType": null,
        "doc": "<p>Simulates user reloading page.</p>",
        "shortdoc": "Simulates user reloading page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 524,
        "doc_fr": "Simule le rechargement de la page par l'utilisateur."
    },
    {
        "name": "Remove Location Strategy",
        "args": [
            {
                "name": "strategy_name",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "strategy_name: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Removes a previously added custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies.</p>",
        "shortdoc": "Removes a previously added custom location strategy.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 1166,
        "doc_fr": "Supprime une stratégie de localisation personnalisée précédemment ajoutée.\n\nConsultez Localisateurs personnalisés pour plus d'informations sur la création et l'utilisation de\nstratégies personnalisées."
    },
    {
        "name": "Scroll Element Into View",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Scrolls the element identified by <code>locator</code> into view.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.2.0</p>",
        "shortdoc": "Scrolls the element identified by ``locator`` into view.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 768,
        "doc_fr": "Fait défiler l'élément identifié par « locator » dans la vue.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nNouveauté dans SeleniumLibrary 3.2.0"
    },
    {
        "name": "Select All From List",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Selects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Selects all options from multi-selection list ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 193,
        "doc_fr": "Sélectionne toutes les options de la liste à sélection multiple « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Select Checkbox",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Selects the checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if checkbox is already selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Selects the checkbox identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 104,
        "doc_fr": "Sélectionne la case à cocher identifiée par « locator ».\n\nNe fait rien si la case à cocher est déjà sélectionnée.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Select Frame",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets frame identified by <code>locator</code> as the current frame.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Works both with frames and iframes. Use <a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a> to cancel the frame selection and return to the main frame.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>top-frame</td>\n<td># Select frame with id or name 'top-frame'</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>example</td>\n<td># Click link 'example' in the selected frame</td>\n</tr>\n<tr>\n<td><a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a></td>\n<td></td>\n<td># Back to main frame.</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>//iframe[@name='xxx']</td>\n<td># Select frame using xpath</td>\n</tr>\n</table>",
        "shortdoc": "Sets frame identified by ``locator`` as the current frame.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/frames.py",
        "lineno": 25,
        "doc_fr": "Définit le cadre identifié par « locator » comme le cadre actuel.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nFonctionne à la fois avec les cadres et les iframes. Utilisez Désélectionner le cadre pour annuler la\nsélection du cadre et revenir au cadre principal.\n\nExemple :\n\nSélectionner le cadre | top-frame | # Sélectionner le cadre avec l'ID ou le nom « top-frame » \n---|---|--- \nCliquer sur le lien | exemple | # Cliquer sur le lien « exemple » dans le cadre sélectionné \nDésélectionner le cadre | | # Retour au cadre principal. \nSélectionner le cadre | //iframe[@name='xxx'] | # Sélectionner le cadre en utilisant xpath"
    },
    {
        "name": "Select From List By Index",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "indexes",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*indexes: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Selects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Selects options from selection list ``locator`` by ``indexes``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 209,
        "doc_fr": "Sélectionne les options de la liste de sélection `locator` par `indexes`.\n\nLes index des options de liste commencent à 0.\n\nSi plusieurs options sont données pour une liste à sélection unique, la dernière valeur\nsera sélectionnée. Avec les listes à sélection multiple, toutes les options spécifiées sont\nsélectionnées, mais les anciennes sélections possibles ne sont pas effacées.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Select From List By Label",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "labels",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*labels: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Selects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Selects options from selection list ``locator`` by ``labels``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 256,
        "doc_fr": "Sélectionne les options de la liste de sélection « locator » par « labels ».\n\nSi plusieurs options sont proposées pour une liste à sélection unique, la dernière valeur\nsera sélectionnée. Avec les listes à sélection multiple, toutes les options spécifiées sont\nsélectionnées, mais les anciennes sélections éventuelles ne sont pas effacées.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Select From List By Value",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "values",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Selects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Selects options from selection list ``locator`` by ``values``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 234,
        "doc_fr": "Sélectionne les options de la liste de sélection « locator » par « values ».\n\nSi plusieurs options sont proposées pour une liste à sélection unique, la dernière valeur\nsera sélectionnée. Avec les listes à sélection multiple, toutes les options spécifiées sont\nsélectionnées, mais les anciennes sélections possibles ne sont pas effacées.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Select Radio Button",
        "args": [
            {
                "name": "group_name",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "group_name: str"
            },
            {
                "name": "value",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets the radio button group <code>group_name</code> to <code>value</code>.</p>\n<p>The radio button to be selected is located by two arguments:</p>\n<ul>\n<li><code>group_name</code> is the name of the radio button group.</li>\n<li><code>value</code> is the <code>id</code> or <code>value</code> attribute of the actual radio button.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>size</td>\n<td>XL</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>contact</td>\n<td>email</td>\n</tr>\n</table>",
        "shortdoc": "Sets the radio button group ``group_name`` to ``value``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 198,
        "doc_fr": "Définit le groupe de boutons radio `group_name` sur `value`.\n\nLe bouton radio à sélectionner est localisé par deux arguments :\n\n* `group_name` est le nom du groupe de boutons radio.\n* `value` est l'attribut `id` ou `value` du bouton radio réel.\n\nExemples :\n\nSélectionnez le bouton radio | taille | XL \n---|---|--- \nSélectionnez le bouton radio | contact | email"
    },
    {
        "name": "Set Action Chain Delay",
        "args": [
            {
                "name": "value",
                "type": {
                    "name": "timedelta",
                    "typedoc": "timedelta",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: timedelta"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Sets the duration of delay in ActionChains() used by SeleniumLibrary.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>.</p>\n<p>Value is always stored as milliseconds internally.</p>\n<p>The previous value is returned and can be used to restore the original value later if needed.</p>",
        "shortdoc": "Sets the duration of delay in ActionChains() used by SeleniumLibrary.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 640,
        "doc_fr": "Définit la durée du délai dans ActionChains() utilisé par SeleniumLibrary.\n\nLa valeur peut être donnée sous la forme d'un nombre considéré comme des secondes ou d'une\nchaîne lisible par l'homme comme « 1 seconde ».\n\nLa valeur est toujours stockée en interne sous forme de millisecondes.\n\nLa valeur précédente est renvoyée et peut être utilisée pour restaurer la valeur d'origine\nplus tard si nécessaire."
    },
    {
        "name": "Set Browser Implicit Wait",
        "args": [
            {
                "name": "value",
                "type": {
                    "name": "timedelta",
                    "typedoc": "timedelta",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: timedelta"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>Same as <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a> but only affects the current browser.</p>",
        "shortdoc": "Sets the implicit wait value used by Selenium.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 662,
        "doc_fr": "Définit la valeur d'attente implicite utilisée par Selenium.\n\nIdentique à Set Selenium Implicit Wait mais affecte uniquement le navigateur actuel."
    },
    {
        "name": "Set Focus To Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets the focus to the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Focus</span>.</p>",
        "shortdoc": "Sets the focus to the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 756,
        "doc_fr": "Définit le focus sur l'élément identifié par « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nAvant SeleniumLibrary 3.0, ce mot-clé s'appelait Focus."
    },
    {
        "name": "Set Screenshot Directory",
        "args": [
            {
                "name": "path",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "path: None | str"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Sets the directory for captured screenshots.</p>\n<p><code>path</code> argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when <a href=\"#Importing\" class=\"name\">importing</a> the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>path</code> equals to EMBED (case insensitive) and <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> or <a href=\"#Capture%20Element%20Screenshot\" class=\"name\">capture Element Screenshot</a> keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.</p>\n<p>The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>Returning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.</p>",
        "shortdoc": "Sets the directory for captured screenshots.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/screenshot.py",
        "lineno": 35,
        "doc_fr": "Définit le répertoire pour les captures d'écran capturées.\n\nL'argument `path` spécifie le chemin absolu vers un répertoire dans lequel les\ncaptures d'écran doivent être écrites. Si le répertoire n'existe pas, il sera\ncréé. Le répertoire peut également être défini lors de l'importation de la bibliothèque. S'il n'est\nconfiguré nulle part, les captures d'écran sont enregistrées dans le même répertoire où le\nfichier journal de Robot Framework est écrit.\n\nSi `path` est égal à EMBED (insensible à la casse) et que l'argument nom de fichier des mots-clés Capture Page Screenshot ou\nCapture Element Screenshot n'est pas modifié par rapport à la\nvaleur par défaut, alors la capture d'écran de la page ou de l'élément est intégrée en tant qu'image\nBase64 dans le log.html.\n\nLa valeur précédente est renvoyée et peut être utilisée pour restaurer la valeur\nd'origine ultérieurement si nécessaire.\n\nLe renvoi de la valeur précédente est une nouveauté dans SeleniumLibrary 3.0. L'argument persist\na été supprimé dans SeleniumLibrary 3.2 et EMBED est une nouveauté dans\nSeleniumLibrary 4.2."
    },
    {
        "name": "Set Selenium Implicit Wait",
        "args": [
            {
                "name": "value",
                "type": {
                    "name": "timedelta",
                    "typedoc": "timedelta",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: timedelta"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>This keyword sets the implicit wait for all opened browsers. Use <a href=\"#Set%20Browser%20Implicit%20Wait\" class=\"name\">Set Browser Implicit Wait</a> to set it only to the current browser.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig wait} =</td>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>10 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Perform AJAX call that is slow</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>${orig wait}</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Sets the implicit wait value used by Selenium.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 614,
        "doc_fr": "Définit la valeur d'attente implicite utilisée par Selenium.\n\nLa valeur peut être donnée sous la forme d'un nombre considéré comme des secondes ou d'une\nchaîne lisible par l'homme comme « 1 seconde ». La valeur précédente est renvoyée et peut\nêtre utilisée pour restaurer la valeur d'origine ultérieurement si nécessaire.\n\nCe mot-clé définit l'attente implicite pour tous les navigateurs ouverts. Utilisez Set Browser\nImplicit Wait pour le définir uniquement sur le navigateur actuel.\n\nVoir la section Implicit wait ci-dessus pour plus d'informations.\n\nExemple :\n\n${orig wait} = | Set Selenium Implicit Wait | 10 secondes \n---|---|--- \nEffectuer un appel AJAX lent | | \nSet Selenium Implicit Wait | ${orig wait} |"
    },
    {
        "name": "Set Selenium Page Load Timeout",
        "args": [
            {
                "name": "value",
                "type": {
                    "name": "timedelta",
                    "typedoc": "timedelta",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: timedelta"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Sets the page load timeout value used by Selenium.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>In contrast to <a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a> and <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a>, this keywords sets the time for the Webdriver to wait until the page is loaded before raising a timeout exception.</p>\n<p>See the <a href=\"#Page%20load\" class=\"name\">Page load</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig page load timeout} =</td>\n<td><a href=\"#Set%20Selenium%20Page%20Load%20Timeout\" class=\"name\">Set Selenium Page Load Timeout</a></td>\n<td>30 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Open page that loads slowly</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Page%20Load%20Timeout\" class=\"name\">Set Selenium Page Load Timeout</a></td>\n<td>${orig page load timeout}</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 6.1</p>",
        "shortdoc": "Sets the page load timeout value used by Selenium.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 671,
        "doc_fr": "Définit la valeur du délai d'expiration du chargement de la page utilisée par Selenium.\n\nLa valeur peut être donnée sous la forme d'un nombre considéré comme des secondes ou d'une\nchaîne lisible par l'homme comme « 1 seconde ». La valeur précédente est renvoyée et peut\nêtre utilisée pour restaurer la valeur d'origine ultérieurement si nécessaire.\n\nContrairement à Set Selenium Timeout et Set Selenium Implicit Wait, ces\nmots-clés définissent le temps pendant lequel Webdriver doit attendre que la page soit chargée\navant de déclencher une exception de délai d'expiration.\n\nVoir la section Chargement de la page ci-dessus pour plus d'informations.\n\nExemple :\n\n${orig page load timeout} = | Set Selenium Page Load Timeout | 30 secondes \n---|---|--- \nOuvrir une page qui se charge lentement | | \nSet Selenium Page Load Timeout | ${orig page load timeout} | \n\nNouveau dans SeleniumLibrary 6.1"
    },
    {
        "name": "Set Selenium Speed",
        "args": [
            {
                "name": "value",
                "type": {
                    "name": "timedelta",
                    "typedoc": "timedelta",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: timedelta"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Sets the delay that is waited after each Selenium command.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Selenium%20Speed\" class=\"name\">Set Selenium Speed</a></td>\n<td>0.5 seconds</td>\n</tr>\n</table>",
        "shortdoc": "Sets the delay that is waited after each Selenium command.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 572,
        "doc_fr": "Définit le délai d'attente après chaque commande Selenium.\n\nLa valeur peut être donnée sous la forme d'un nombre considéré comme des secondes ou d'une\nchaîne lisible par l'homme comme « 1 seconde ». La valeur précédente est renvoyée et peut\nêtre utilisée pour restaurer la valeur d'origine ultérieurement si nécessaire.\n\nVoir la section Vitesse Selenium ci-dessus pour plus d'informations.\n\nExemple :\n\nDéfinir la vitesse Selenium | 0,5 seconde \n---|---"
    },
    {
        "name": "Set Selenium Timeout",
        "args": [
            {
                "name": "value",
                "type": {
                    "name": "timedelta",
                    "typedoc": "timedelta",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "value: timedelta"
            }
        ],
        "returnType": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
        },
        "doc": "<p>Sets the timeout that is used by various keywords.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig timeout} =</td>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>15 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Open page that loads slowly</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>${orig timeout}</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Sets the timeout that is used by various keywords.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 592,
        "doc_fr": "Définit le délai d'expiration utilisé par divers mots-clés.\n\nLa valeur peut être donnée sous la forme d'un nombre considéré comme des secondes ou d'une\nchaîne lisible par l'homme comme « 1 seconde ». La valeur précédente est renvoyée et peut\nêtre utilisée pour restaurer la valeur d'origine ultérieurement si nécessaire.\n\nVoir la section Délai d'expiration ci-dessus pour plus d'informations.\n\nExemple :\n\n${orig timeout} = | Set Selenium Timeout | 15 secondes \n---|---|--- \nOuvrir une page qui se charge lentement | | \nDéfinir le délai d'expiration du sélénium | ${orig timeout} |"
    },
    {
        "name": "Set Window Position",
        "args": [
            {
                "name": "x",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "x: int"
            },
            {
                "name": "y",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "y: int"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets window position using <code>x</code> and <code>y</code> coordinates.</p>\n<p>The position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a></td>\n<td>100</td>\n<td>200</td>\n</tr>\n</table>",
        "shortdoc": "Sets window position using ``x`` and ``y`` coordinates.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 274,
        "doc_fr": "Définit la position de la fenêtre à l'aide des coordonnées « x » et « y ».\n\nLa position est relative au coin supérieur gauche de l'écran, mais certains\nnavigateurs excluent du calcul la barre des tâches éventuellement définie par le système\nd'exploitation. La position réelle peut donc être différente selon les\nnavigateurs.\n\nLes valeurs peuvent être données à l'aide de chaînes contenant des nombres ou en utilisant des\nnombres réels. Voir également Obtenir la position de la fenêtre.\n\nExemple :\n\nDéfinir la position de la fenêtre | 100 | 200 \n---|---|---"
    },
    {
        "name": "Set Window Size",
        "args": [
            {
                "name": "width",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "width: int"
            },
            {
                "name": "height",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "height: int"
            },
            {
                "name": "inner",
                "type": {
                    "name": "bool",
                    "typedoc": "boolean",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "False",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "inner: bool = False"
            }
        ],
        "returnType": null,
        "doc": "<p>Sets current windows size to given <code>width</code> and <code>height</code>.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a>.</p>\n<p>Browsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.</p>\n<p>If <code>inner</code> parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM <i>window.innerWidth</i> and <i>window.innerHeight</i>. See <a href=\"#Boolean%20arguments\" class=\"name\">Boolean arguments</a> for more details on how to set boolean arguments.</p>\n<p>The <code>inner</code> argument is new since SeleniumLibrary 4.0.</p>\n<p>This <code>inner</code> argument does not support Frames. If a frame is selected, switch to default before running this.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td>True</td>\n</tr>\n</table>",
        "shortdoc": "Sets current windows size to given ``width`` and ``height``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 217,
        "doc_fr": "Définit la taille actuelle des fenêtres sur les valeurs `width` et `height` données.\n\nLes valeurs peuvent être données à l'aide de chaînes contenant des nombres ou en utilisant des nombres\nréels. Voir aussi Obtenir la taille de la fenêtre.\n\nLes navigateurs ont une limite sur leur taille minimale. Essayer de les réduire\nentraînera une taille plus grande que la taille demandée.\n\nSi le paramètre `inner` est défini sur True, le mot-clé définit la largeur\net la hauteur de la fenêtre nécessaires pour obtenir les valeurs DOM HTML _window.innerWidth_ et\n_window.innerHeight_ souhaitées. Voir Arguments booléens pour plus de détails sur la manière de définir\nles arguments booléens.\n\nL'argument `inner` est nouveau depuis SeleniumLibrary 4.0.\n\nCet argument `inner` ne prend pas en charge les cadres. Si un cadre est sélectionné, passez\nà la valeur par défaut avant d'exécuter cette opération.\n\nExemple :\n\nDéfinir la taille de la fenêtre | 800 | 600 | \n---|---|---|--- \nDéfinir la taille de la fenêtre | 800 | 600 | Vrai"
    },
    {
        "name": "Simulate Event",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "event",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "event: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Simulates <code>event</code> on the element identified by <code>locator</code>.</p>\n<p>This keyword is useful if element has <code>OnEvent</code> handler that needs to be explicitly invoked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Simulate</span>.</p>",
        "shortdoc": "Simulates ``event`` on the element identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/element.py",
        "lineno": 882,
        "doc_fr": "Simule un événement sur l'élément identifié par un localisateur.\n\nCe mot-clé est utile si l'élément possède un gestionnaire OnEvent qui doit être invoqué\nexplicitement.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nAvant SeleniumLibrary 3.0, ce mot-clé s'appelait Simulate."
    },
    {
        "name": "Submit Form",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "locator: WebElement | None | str = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Submits a form identified by <code>locator</code>.</p>\n<p>If <code>locator</code> is not given, first form on the page is submitted.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Submits a form identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 29,
        "doc_fr": "Soumet un formulaire identifié par « locator ».\n\nSi « locator » n'est pas fourni, le premier formulaire de la page est soumis.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Switch Browser",
        "args": [
            {
                "name": "index_or_alias",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "index_or_alias: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Switches between active browsers using <code>index_or_alias</code>.</p>\n<p>Indices are returned by the <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword and aliases can be given to it explicitly. Indices start from 1.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td>ff</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td>ie</td>\n<td>alias=second</td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>1</td>\n<td># index</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>I'm feeling lucky</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>second</td>\n<td># alias</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>More Yahoo!</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Above example expects that there was no other open browsers when opening the first one because it used index <code>1</code> when switching to it later. If you are not sure about that, you can store the index into a variable as below.</p>\n<table border=\"1\">\n<tr>\n<td>${index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n</tr>\n<tr>\n<td># Do something ...</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>${index}</td>\n<td></td>\n</tr>\n</table>",
        "shortdoc": "Switches between active browsers using ``index_or_alias``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 334,
        "doc_fr": "Bascule entre les navigateurs actifs à l'aide de `index_or_alias`.\n\nLes indices sont renvoyés par le mot-clé Open Browser et des alias peuvent lui être attribués\nexplicitement. Les indices commencent à 1.\n\nExemple :\n\nOpen Browser | <http://google.com> | ff | \n---|---|---|--- \nLocation Should Be | <http://google.com> | | \nOpen Browser | <http://yahoo.com> | ie | alias=second \nLocation Should Be | <http://yahoo.com> | | \nSwitch Browser | 1 | # index | \nPage Should Contain | I'm feeling lucky | | \nSwitch Browser | second | # alias | \nPage Should Contain | More Yahoo! | | \nClose All Browsers | | | \n\nL'exemple ci-dessus suppose qu'il n'y avait pas d'autres navigateurs ouverts lors de l'ouverture du\npremier car il a utilisé l'index `1` lors du passage à celui-ci plus tard. Si vous n'êtes pas\nsûr de cela, vous pouvez stocker l'index dans une variable comme ci-dessous.\n\n${index} = | Ouvrir le navigateur | <http://google.com> \n---|---|--- \n# Faire quelque chose ... | | \nChanger de navigateur | ${index} |"
    },
    {
        "name": "Switch Window",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "list",
                            "typedoc": "list",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "MAIN",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "locator: list | str = MAIN"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: str | None = None"
            },
            {
                "name": "browser",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "CURRENT",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "browser: str = CURRENT"
            }
        ],
        "returnType": null,
        "doc": "<p>Switches to browser window matching <code>locator</code>.</p>\n<p>If the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.</p>\n<p>Notice that alerts should be handled with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> or other alert related keywords.</p>\n<p>The <code>locator</code> can be specified using different strategies somewhat similarly as when <a href=\"#Locating%20elements\" class=\"name\">locating elements</a> on pages.</p>\n<ul>\n<li>By default, the <code>locator</code> is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.</li>\n</ul>\n<ul>\n<li>The <code>locator</code> can specify an explicit strategy by using the format <code>strategy:value</code> (recommended) or <code>strategy=value</code>. Supported strategies are <code>name</code>, <code>title</code>, and <code>url</code>. These matches windows using their name, title, or URL, respectively. Additionally, <code>default</code> can be used to explicitly use the default strategy explained above.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>NEW</code> (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>MAIN</code> (default, case-insensitive), the main window is selected.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>CURRENT</code> (case-insensitive), nothing is done. This effectively just returns the current window handle.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is not a string, it is expected to be a list of window handles <i>to exclude</i>. Such a list of excluded windows can be got from <a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a> before doing an action that opens a new window.</li>\n</ul>\n<p>The <code>timeout</code> is used to specify how long keyword will poll to select the new window. The <code>timeout</code> is new in SeleniumLibrary 3.2.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup1</td>\n<td></td>\n<td># Open new window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>example</td>\n<td></td>\n<td># Select window using default strategy</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Button\" class=\"name\">Click Button</a></td>\n<td>popup2</td>\n<td></td>\n<td># Open another window</td>\n</tr>\n<tr>\n<td>${handle} =</td>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>NEW</td>\n<td># Select latest opened window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${handle}</td>\n<td></td>\n<td># Select window using handle</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>MAIN</td>\n<td></td>\n<td># Select the main window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Main</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${excludes} =</td>\n<td><a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a></td>\n<td></td>\n<td># Get list of current windows</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup3</td>\n<td></td>\n<td># Open one more window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${excludes}</td>\n<td></td>\n<td># Select window using excludes</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 3</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>The <code>browser</code> argument allows with <code>index_or_alias</code> to implicitly switch to a specific browser when switching to a window. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></p>\n<ul>\n<li>If the <code>browser</code> is <code>CURRENT</code> (case-insensitive), no other browser is selected.</li>\n</ul>\n<p><b>NOTE:</b></p>\n<ul>\n<li>The <code>strategy:value</code> syntax is only supported by SeleniumLibrary 3.0 and newer.</li>\n<li>Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.</li>\n<li>Earlier versions supported aliases <code>None</code>, <code>null</code> and the empty string for selecting the main window, and alias <code>self</code> for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.</li>\n</ul>",
        "shortdoc": "Switches to browser window matching ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/window.py",
        "lineno": 33,
        "doc_fr": "Bascule vers la fenêtre du navigateur correspondant à `locator`.\n\nSi la fenêtre est trouvée, toutes les commandes suivantes utilisent la fenêtre sélectionnée, jusqu'à ce que\nce mot-clé soit à nouveau utilisé. Si la fenêtre n'est pas trouvée, ce mot-clé échoue.\nLe handle de la fenêtre précédente est renvoyé et peut être utilisé pour y revenir\nplus tard.\n\nRemarque : les alertes doivent être traitées avec Handle Alert ou d'autres mots-clés\nliés aux alertes.\n\nLe `locator` peut être spécifié à l'aide de différentes stratégies, de manière\nun peu similaire à celle de la localisation d'éléments sur les pages.\n\n* Par défaut, le `locator` est mis en correspondance avec le handle de fenêtre, le nom, le titre et l'URL. La correspondance est effectuée dans cet ordre et la première fenêtre correspondante est sélectionnée.\n\n* Le `locator` peut spécifier une stratégie explicite en utilisant le format `strategy:value` (recommandé) ou `strategy=value`. Les stratégies prises en charge sont `name`, `title` et `url`. Elles correspondent aux fenêtres en utilisant respectivement leur nom, leur titre ou leur URL. De plus, `default` peut être utilisé pour utiliser explicitement la stratégie par défaut expliquée ci-dessus.\n\n* Si le `locator` est `NEW` (insensible à la casse), la dernière fenêtre ouverte est sélectionnée. C'est une erreur si c'est la même que la fenêtre actuelle.\n\n* Si le `locator` est `MAIN` (par défaut, insensible à la casse), la fenêtre principale est sélectionnée.\n\n* Si le `locator` est `CURRENT` (insensible à la casse), rien n'est fait. Cela renvoie simplement le handle de la fenêtre actuelle.\n\n* Si le `locator` n'est pas une chaîne, il est attendu qu'il s'agisse d'une liste de handles de fenêtre _à exclure_. Une telle liste de fenêtres exclues peut être obtenue à partir de Get Window Handles avant d'effectuer une action qui ouvre une nouvelle fenêtre.\n\nLe `timeout` est utilisé pour spécifier la durée pendant laquelle le mot-clé interrogera pour sélectionner la nouvelle\nfenêtre. Le `timeout` est nouveau dans SeleniumLibrary 3.2.\n\nExemple :\n\nCliquez sur Lien | popup1 | | # Ouvrir une nouvelle fenêtre \n---|---|---|--- \nChanger de fenêtre | exemple | | # Sélectionner une fenêtre en utilisant la stratégie par défaut \nLe titre doit être | Pop-up 1 | | \nCliquer sur le bouton | popup2 | | # Ouvrir une autre fenêtre \n${handle} = | Changer de fenêtre | NOUVEAU | # Sélectionner la dernière fenêtre ouverte \nLe titre doit être | Pop-up 2 | | \nChanger de fenêtre | ${handle} | | # Sélectionner une fenêtre en utilisant la poignée \nLe titre doit être | Pop-up 1 | | \nChanger de fenêtre | PRINCIPAL | | # Sélectionner la fenêtre principale \nLe titre doit être | Principal | | \n${excludes} = | Obtenir les poignées de fenêtre | | # Obtenir la liste des fenêtres actuelles \nCliquer sur le lien | popup3 | | # Ouvrir une autre fenêtre \nChanger de fenêtre | ${excludes} | | # Sélectionner une fenêtre en utilisant les exclusions \nLe titre doit être | Pop-up 3 | | \n\nL'argument `browser` permet avec `index_or_alias` de basculer implicitement vers un\nnavigateur spécifique lors du basculement vers une fenêtre. Voir Changer de navigateur\n\n* Si le `browser` est `CURRENT` (insensible à la casse), aucun autre navigateur n'est sélectionné.\n\n**REMARQUE :**\n\n* La syntaxe `strategy:value` n'est prise en charge que par SeleniumLibrary 3.0 et les versions plus récentes.\n* Avant SeleniumLibrary 3.0, la correspondance des fenêtres par nom, titre et URL n'était pas sensible à la casse.\n* Les versions antérieures prenaient en charge les alias `None`, `null` et la chaîne vide pour sélectionner la fenêtre principale, et l'alias `self` pour sélectionner la fenêtre actuelle. La prise en charge de ces alias a été supprimée dans SeleniumLibrary 3.2."
    },
    {
        "name": "Table Cell Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "row",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "row: int"
            },
            {
                "name": "column",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "column: int"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies table cell contains text <code>expected</code>.</p>\n<p>See <a href=\"#Get%20Table%20Cell\" class=\"name\">Get Table Cell</a> that this keyword uses internally for an explanation about accepted arguments.</p>",
        "shortdoc": "Verifies table cell contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/tableelement.py",
        "lineno": 90,
        "doc_fr": "Vérifie que la cellule du tableau contient le texte « attendu ».\n\nVoir Obtenir la cellule du tableau que ce mot-clé utilise en interne pour une explication sur\nles arguments acceptés."
    },
    {
        "name": "Table Column Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "column",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "column: int"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies table column contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Column indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple columns, those merged cells count as a single column.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Verifies table column contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/tableelement.py",
        "lineno": 113,
        "doc_fr": "Vérifie que la colonne du tableau contient le texte « attendu ».\n\nLe tableau est localisé à l'aide de l'argument « locator » et sa colonne est trouvée à l'aide de « column ». Consultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nLes index de colonne commencent à 1. Il est possible de faire référence aux colonnes à partir de la fin\nen utilisant des index négatifs de sorte que -1 soit la dernière colonne, -2 soit l'avant-dernière, et ainsi de suite.\n\nSi un tableau contient des cellules qui s'étendent sur plusieurs colonnes, ces cellules fusionnées comptent\ncomme une seule colonne.\n\nVoir La page doit contenir un élément pour une explication sur l'argument « loglevel »."
    },
    {
        "name": "Table Footer Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies table footer contains text <code>expected</code>.</p>\n<p>Any <code>&lt;td&gt;</code> element inside <code>&lt;tfoot&gt;</code> element is considered to be part of the footer.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Verifies table footer contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/tableelement.py",
        "lineno": 144,
        "doc_fr": "Vérifie que le pied de page du tableau contient le texte « attendu ».\n\nTout élément « <td> » à l'intérieur de l'élément « <tfoot> » est considéré comme faisant partie du\npied de page.\n\nLe tableau est localisé à l'aide de l'argument « locator ». Consultez la section Localisation des éléments\npour plus de détails sur la syntaxe du localisateur.\n\nConsultez la section La page doit contenir un élément pour une explication sur l'argument « loglevel »."
    },
    {
        "name": "Table Header Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies table header contains text <code>expected</code>.</p>\n<p>Any <code>&lt;th&gt;</code> element anywhere in the table is considered to be part of the header.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Verifies table header contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/tableelement.py",
        "lineno": 169,
        "doc_fr": "Vérifie que l'en-tête du tableau contient le texte « attendu ».\n\nTout élément « <th> » n'importe où dans le tableau est considéré comme faisant partie de\nl'en-tête.\n\nLe tableau est localisé à l'aide de l'argument « locator ». Consultez la section Localisation des éléments\npour plus de détails sur la syntaxe du localisateur.\n\nConsultez la section La page doit contenir l'élément pour une explication sur l'argument « loglevel »."
    },
    {
        "name": "Table Row Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "row",
                "type": {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "row: int"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that table row contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Row indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Verifies that table row contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/tableelement.py",
        "lineno": 194,
        "doc_fr": "Vérifie que la ligne du tableau contient le texte « attendu ».\n\nLe tableau est localisé à l'aide de l'argument « locator » et sa colonne est trouvée à l'aide de\n« column ». Consultez la section Localisation des éléments pour plus de détails sur la\nsyntaxe du localisateur.\n\nLes index de ligne commencent à 1. Il est possible de faire référence aux lignes à partir de la\nfin en utilisant des index négatifs de sorte que -1 soit la dernière ligne, -2 l'avant-dernière, et\nainsi de suite.\n\nSi un tableau contient des cellules qui s'étendent sur plusieurs lignes, une correspondance ne se produit que pour\nla ligne la plus haute de ces cellules fusionnées.\n\nConsultez La page doit contenir un élément pour une explication sur l'argument « loglevel »."
    },
    {
        "name": "Table Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "loglevel",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": "TRACE",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "loglevel: str = TRACE"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies table contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
        "shortdoc": "Verifies table contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/tableelement.py",
        "lineno": 225,
        "doc_fr": "Vérifie que la table contient le texte « attendu ».\n\nLa table est localisée à l'aide de l'argument « locator ». Consultez la section Localisation des éléments\npour plus de détails sur la syntaxe du localisateur.\n\nConsultez La page doit contenir l'élément pour une explication sur l'argument « loglevel »."
    },
    {
        "name": "Textarea Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies text area <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies text area ``locator`` contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 382,
        "doc_fr": "Vérifie que la zone de texte « locator » contient le texte « expected ».\n\n« message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Textarea Value Should Be",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies text area <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies text area ``locator`` has exactly text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 406,
        "doc_fr": "Vérifie que la zone de texte « locator » contient exactement le texte « attendu ».\n\n« message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Textfield Should Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies text field <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override the default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies text field ``locator`` contains text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 334,
        "doc_fr": "Vérifie que le champ de texte « locator » contient le texte « expected ».\n\n« message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Textfield Value Should Be",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies text field <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Verifies text field ``locator`` has exactly text ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 358,
        "doc_fr": "Vérifie que le champ de texte « locator » contient exactement le texte « attendu ».\n\n« message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Title Should Be",
        "args": [
            {
                "name": "title",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "title: str"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Verifies that the current page title equals <code>title</code>.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.1.</p>",
        "shortdoc": "Verifies that the current page title equals ``title``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/browsermanagement.py",
        "lineno": 497,
        "doc_fr": "Vérifie que le titre de la page actuelle est égal à « title ».\n\nL'argument « message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument « message » est nouveau dans SeleniumLibrary 3.1."
    },
    {
        "name": "Unselect All From List",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Unselects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Unselects all options from multi-selection list ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 278,
        "doc_fr": "Désélectionne toutes les options de la liste à sélection multiple « locator ».\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\nNouveauté dans SeleniumLibrary 3.0."
    },
    {
        "name": "Unselect Checkbox",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            }
        ],
        "returnType": null,
        "doc": "<p>Removes the selection of checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if the checkbox is not selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Removes the selection of checkbox identified by ``locator``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/formelement.py",
        "lineno": 118,
        "doc_fr": "Supprime la sélection de la case à cocher identifiée par « locator ».\n\nNe fait rien si la case à cocher n'est pas sélectionnée.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Unselect Frame",
        "args": [],
        "returnType": null,
        "doc": "<p>Sets the main frame as the current frame.</p>\n<p>In practice cancels the previous <a href=\"#Select%20Frame\" class=\"name\">Select Frame</a> call.</p>",
        "shortdoc": "Sets the main frame as the current frame.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/frames.py",
        "lineno": 45,
        "doc_fr": "Définit le cadre principal comme cadre actuel.\n\nEn pratique, cela annule l'appel précédent à Select Frame."
    },
    {
        "name": "Unselect From List By Index",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "indexes",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*indexes: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Unselects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0. This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Unselects options from selection list ``locator`` by ``indexes``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 295,
        "doc_fr": "Désélectionne les options de la liste de sélection `locator` par `indexes`.\n\nLes index des options de liste commencent à 0. Ce mot clé ne fonctionne qu'avec les listes à sélection multiple.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Unselect From List By Label",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "labels",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*labels: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Unselects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Unselects options from selection list ``locator`` by ``labels``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 347,
        "doc_fr": "Désélectionne les options de la liste de sélection `locator` par `labels`.\n\nCe mot clé ne fonctionne qu'avec les listes à sélection multiple.\n\nVoir la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Unselect From List By Value",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "values",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*values: str"
            }
        ],
        "returnType": null,
        "doc": "<p>Unselects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
        "shortdoc": "Unselects options from selection list ``locator`` by ``values``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/selectelement.py",
        "lineno": 322,
        "doc_fr": "Désélectionne les options de la liste de sélection « locator » par « values ».\n\nCe mot clé ne fonctionne qu'avec les listes à sélection multiple.\n\nConsultez la section Localisation des éléments pour plus de détails sur la syntaxe du localisateur."
    },
    {
        "name": "Wait For Condition",
        "args": [
            {
                "name": "condition",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until <code>condition</code> is true or <code>timeout</code> expires.</p>\n<p>The condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a> for information about accessing content on pages.</p>\n<p>Fails if the timeout expires before the condition becomes true. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return document.title == \"New Title\"</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return jQuery.active == 0</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>style = document.querySelector('h1').style; return style.background == \"red\" &amp;&amp; style.color == \"white\"</td>\n</tr>\n</table>",
        "shortdoc": "Waits until ``condition`` is true or ``timeout`` expires.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 31,
        "doc_fr": "Attend que « condition » soit vraie ou que « timeout » expire.\n\nLa condition peut être une expression JavaScript arbitraire, mais elle doit renvoyer une\nvaleur à évaluer. Voir Exécuter JavaScript pour plus d'informations sur l'accès au\ncontenu des pages.\n\nÉchoue si le délai d'attente expire avant que la condition ne devienne vraie. Voir la\nsection Délais d'attente pour plus d'informations sur l'utilisation des délais d'attente et leur\nvaleur par défaut.\n\n« error » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nExemples :\n\nWait For Condition | return document.title == \"New Title\" \n---|--- \nWait For Condition | return jQuery.active == 0 \nWait For Condition | style = document.querySelector('h1').style; return style.background == \"red\" && style.color == \"white\""
    },
    {
        "name": "Wait For Expected Condition",
        "args": [
            {
                "name": "condition",
                "type": {
                    "name": "<module 'string' from '/Users/emanlove/.pyenv/versions/3.12.4/lib/python3.12/string.py'>",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "condition: <module 'string' from '/Users/emanlove/.pyenv/versions/3.12.4/lib/python3.12/string.py'>"
            },
            {
                "name": "args",
                "type": null,
                "defaultValue": null,
                "kind": "VAR_POSITIONAL",
                "required": false,
                "repr": "*args"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "float",
                            "typedoc": "float",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "10",
                "kind": "NAMED_ONLY",
                "required": false,
                "repr": "timeout: float | None = 10"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until <code>condition</code> is true or <code>timeout</code> expires.</p>\n<p>The condition must be one of selenium's expected condition which can be found within the selenium <a href=\"https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions\">Python API</a> documentation. The expected condition can written as snake_case (ex title_is) or it can be space delimited (ex Title Is). Some conditions require additional arguments or <code>args</code> which should be passed along after the expected condition.</p>\n<p>Fails if the timeout expires before the condition becomes true. The default value is 10 seconds.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Wait%20For%20Expected%20Condition\" class=\"name\">Wait For Expected Condition</a></td>\n<td>alert_is_present</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Expected%20Condition\" class=\"name\">Wait For Expected Condition</a></td>\n<td>Title Is</td>\n<td>New Title</td>\n</tr>\n</table>\n<p>If the expected condition expects a locator then one can pass as arguments a tuple containing the selenium locator strategies and the locator.</p>\n<p>Example of expected condition expecting locator:</p>\n<pre>\n${byElem}= |  Evaluate  (\"id\",\"added_btn\")\n<a href=\"#Wait%20For%20Expected%20Condition\" class=\"name\">Wait For Expected Condition</a> | Presence Of Element Located | ${byElem}\n</pre>",
        "shortdoc": "Waits until ``condition`` is true or ``timeout`` expires.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/expectedconditions.py",
        "lineno": 24,
        "doc_fr": "Attend que « condition » soit vraie ou que « timeout » expire.\n\nLa condition doit être l'une des conditions attendues de Selenium qui peuvent être trouvées\ndans la documentation de Selenium [Python\nAPI](https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-\nselenium.webdriver.support.expected_conditions). La\ncondition attendue peut être écrite sous la forme snake_case (ex : title_is) ou elle peut être délimitée par des espaces\n(ex : Title Is). Certaines conditions nécessitent des arguments supplémentaires ou « args » qui\ndoivent être transmis après la condition attendue.\n\nÉchoue si le délai d'attente expire avant que la condition ne devienne vraie. La\nvaleur par défaut est de 10 secondes.\n\nExemples :\n\nAttendre la condition attendue | alert_is_present |\n---|---|--- \nAttendre la condition attendue | Le titre est | Nouveau titre \n\nSi la condition attendue attend un localisateur, on peut passer comme arguments un\ntuple contenant les stratégies de localisation du sélénium et le localisateur.\n\nExemple de condition attendue attendant un localisateur :\n\n${byElem}= | Évaluer (\"id\",\"added_btn\")\nAttendre la condition attendue | Présence de l'élément localisé | ${byElem}"
    },
    {
        "name": "Wait Until Element Contains",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the element <code>locator</code> contains <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
        "shortdoc": "Waits until the element ``locator`` contains ``text``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 373,
        "doc_fr": "Attend que l'élément `locator` contienne `text`.\n\nÉchoue si `timeout` expire avant que le texte n'apparaisse. Consultez la section Délais d'attente\npour plus d'informations sur l'utilisation des délais d'attente et leur valeur par défaut et la section\nLocalisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\n`error` peut être utilisé pour remplacer le message d'erreur par défaut."
    },
    {
        "name": "Wait Until Element Does Not Contain",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the element <code>locator</code> does not contain <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
        "shortdoc": "Waits until the element ``locator`` does not contain ``text``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 397,
        "doc_fr": "Attend que l'élément `locator` ne contienne plus de `text`.\n\nÉchoue si `timeout` expire avant que le texte ne disparaisse. Consultez la section Délais\npour plus d'informations sur l'utilisation des délais et leur valeur par défaut et\nla section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\n`error` peut être utilisé pour remplacer le message d'erreur par défaut."
    },
    {
        "name": "Wait Until Element Is Enabled",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the element <code>locator</code> is enabled.</p>\n<p>Element is considered enabled if it is not disabled nor read-only.</p>\n<p>Fails if <code>timeout</code> expires before the element is enabled. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Considering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.</p>",
        "shortdoc": "Waits until the element ``locator`` is enabled.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 345,
        "doc_fr": "Attend que l'élément `locator` soit activé.\n\nL'élément est considéré comme activé s'il n'est ni désactivé ni en lecture seule.\n\nÉchoue si `timeout` expire avant que l'élément ne soit activé. Consultez la section Délais\npour plus d'informations sur l'utilisation des délais et leur valeur par défaut et\nla section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\n`error` peut être utilisé pour remplacer le message d'erreur par défaut.\n\nLa prise en compte des éléments en lecture seule comme désactivés est une nouvelle fonctionnalité de\nSeleniumLibrary 3.0."
    },
    {
        "name": "Wait Until Element Is Not Visible",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the element <code>locator</code> is not visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is not visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
        "shortdoc": "Waits until the element ``locator`` is not visible.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 322,
        "doc_fr": "Attend que l'élément `locator` ne soit plus visible.\n\nÉchoue si `timeout` expire avant que l'élément ne soit plus visible. Consultez la section Délais\npour plus d'informations sur l'utilisation des délais et leur valeur par défaut et\nla section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\n`error` peut être utilisé pour remplacer le message d'erreur par défaut."
    },
    {
        "name": "Wait Until Element Is Visible",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the element <code>locator</code> is visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
        "shortdoc": "Waits until the element ``locator`` is visible.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 299,
        "doc_fr": "Attend que l'élément `locator` soit visible.\n\nÉchoue si `timeout` expire avant que l'élément ne soit visible. Consultez la section Délais\npour plus d'informations sur l'utilisation des délais et leur valeur par défaut et\nla section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\n`error` peut être utilisé pour remplacer le message d'erreur par défaut."
    },
    {
        "name": "Wait Until Location Contains",
        "args": [
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
        "shortdoc": "Waits until the current URL contains ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 123,
        "doc_fr": "Attend que l'URL actuelle contienne « expected ».\n\nL'argument « expected » contienne la valeur attendue dans l'URL.\n\nÉchoue si « timeout » expire avant que l'emplacement ne contienne. Consultez la section Délais\npour plus d'informations sur l'utilisation des délais et leur valeur par défaut.\n\nL'argument « message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nNouveautés de SeleniumLibrary 4.0"
    },
    {
        "name": "Wait Until Location Does Not Contain",
        "args": [
            {
                "name": "location",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "location: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the current URL does not contains <code>location</code>.</p>\n<p>The <code>location</code> argument contains value not expected in url.</p>\n<p>Fails if <code>timeout</code> expires before the location not contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
        "shortdoc": "Waits until the current URL does not contains ``location``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 151,
        "doc_fr": "Attend que l'URL actuelle ne contienne plus « location ».\n\nL'argument « location » contient une valeur non attendue dans l'URL.\n\nÉchoue si « timeout » expire avant que l'emplacement ne contienne plus. Consultez la section Délais\npour plus d'informations sur l'utilisation des délais et leur valeur par défaut.\n\nL'argument « message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nNouveautés de SeleniumLibrary 4.3"
    },
    {
        "name": "Wait Until Location Is",
        "args": [
            {
                "name": "expected",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "expected: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the current URL is <code>expected</code>.</p>\n<p>The <code>expected</code> argument is the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
        "shortdoc": "Waits until the current URL is ``expected``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 66,
        "doc_fr": "Attend que l'URL actuelle soit « attendue ».\n\nL'argument « attendu » est la valeur attendue dans l'URL.\n\nÉchoue si « timeout » expire avant que l'emplacement ne le soit. Consultez la section Délais d'expiration\npour plus d'informations sur l'utilisation des délais d'expiration et leur valeur par défaut.\n\nL'argument « message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nNouveautés de SeleniumLibrary 4.0"
    },
    {
        "name": "Wait Until Location Is Not",
        "args": [
            {
                "name": "location",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "location: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "message",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "message: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the current URL is not <code>location</code>.</p>\n<p>The <code>location</code> argument is the unexpected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is not. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
        "shortdoc": "Waits until the current URL is not ``location``.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 95,
        "doc_fr": "Attend que l'URL actuelle ne soit plus « location ».\n\nL'argument « location » est la valeur inattendue dans l'URL.\n\nÉchoue si « timeout » expire avant que l'emplacement ne le soit. Consultez la section Délais\npour plus d'informations sur l'utilisation des délais et leur valeur par défaut.\n\nL'argument « message » peut être utilisé pour remplacer le message d'erreur par défaut.\n\nNouveautés de SeleniumLibrary 4.3"
    },
    {
        "name": "Wait Until Page Contains",
        "args": [
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until <code>text</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
        "shortdoc": "Waits until ``text`` appears on the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 179,
        "doc_fr": "Attend que « texte » apparaisse sur la page actuelle.\n\nÉchoue si « timeout » expire avant que le texte n'apparaisse. Consultez la section Délais d'attente\npour plus d'informations sur l'utilisation des délais d'attente et leur valeur par défaut.\n\n« error » peut être utilisé pour remplacer le message d'erreur par défaut."
    },
    {
        "name": "Wait Until Page Contains Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            },
            {
                "name": "limit",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "int",
                            "typedoc": "integer",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "limit: int | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the element <code>locator</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <a href=\"#type-None\" class=\"name\">None</a> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
        "shortdoc": "Waits until the element ``locator`` appears on the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 223,
        "doc_fr": "Attend que l'élément `locator` apparaisse sur la page en cours.\n\nÉchoue si `timeout` expire avant que l'élément n'apparaisse. Consultez la section Délais\nd'attente pour plus d'informations sur l'utilisation des délais d'attente et leur valeur par défaut et\nla section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\n`error` peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument `limit` peut être utilisé pour définir le nombre d'éléments que la page\ndoit contenir. Lorsque `limit` est None (par défaut), la page peut contenir un ou plusieurs éléments.\nLorsque limit est un nombre, la page doit contenir le même nombre d'éléments.\n\n`limit` est une nouveauté de SeleniumLibrary 4.4"
    },
    {
        "name": "Wait Until Page Does Not Contain",
        "args": [
            {
                "name": "text",
                "type": {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "text: str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until <code>text</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
        "shortdoc": "Waits until ``text`` disappears from the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 201,
        "doc_fr": "Attend que « texte » disparaisse de la page actuelle.\n\nÉchoue si « timeout » expire avant que le texte ne disparaisse. Consultez la section Délais\nd'attente pour plus d'informations sur l'utilisation des délais d'attente et leur valeur par défaut.\n\n« error » peut être utilisé pour remplacer le message d'erreur par défaut."
    },
    {
        "name": "Wait Until Page Does Not Contain Element",
        "args": [
            {
                "name": "locator",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "WebElement",
                            "typedoc": null,
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": null,
                "kind": "POSITIONAL_OR_NAMED",
                "required": true,
                "repr": "locator: WebElement | str"
            },
            {
                "name": "timeout",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "timedelta",
                            "typedoc": "timedelta",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "timeout: timedelta | None = None"
            },
            {
                "name": "error",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "str",
                            "typedoc": "string",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "error: str | None = None"
            },
            {
                "name": "limit",
                "type": {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                        {
                            "name": "int",
                            "typedoc": "integer",
                            "nested": [],
                            "union": false
                        },
                        {
                            "name": "None",
                            "typedoc": "None",
                            "nested": [],
                            "union": false
                        }
                    ],
                    "union": true
                },
                "defaultValue": "None",
                "kind": "POSITIONAL_OR_NAMED",
                "required": false,
                "repr": "limit: int | None = None"
            }
        ],
        "returnType": null,
        "doc": "<p>Waits until the element <code>locator</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should not contain. When <code>limit</code> is <a href=\"#type-None\" class=\"name\">None</a> (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
        "shortdoc": "Waits until the element ``locator`` disappears from the current page.",
        "tags": [],
        "source": "/Users/emanlove/code/seleniumlibrary/rf-sl/src/SeleniumLibrary/keywords/waiting.py",
        "lineno": 261,
        "doc_fr": "Attend que l'élément `locator` disparaisse de la page actuelle.\n\nÉchoue si `timeout` expire avant que l'élément ne disparaisse. Consultez la section Délais\nd'attente pour plus d'informations sur l'utilisation des délais d'attente et leur valeur par défaut et\nla section Localisation des éléments pour plus de détails sur la syntaxe du localisateur.\n\n`error` peut être utilisé pour remplacer le message d'erreur par défaut.\n\nL'argument `limit` peut être utilisé pour définir le nombre d'éléments que la page ne doit\npas contenir. Lorsque `limit` est None (par défaut), la page ne peut contenir aucun élément. Lorsque\nlimit est un nombre, la page ne doit pas contenir le même nombre d'éléments.\n\n`limit` est une nouveauté de SeleniumLibrary 4.4"
    }
]